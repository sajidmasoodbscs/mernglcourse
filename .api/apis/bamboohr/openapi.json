{
  "openapi": "3.0.0",
  "info": {
    "version": "v1",
    "title": "BambooHR API",
    "description": "This is the majority of the API requests including some that are not documented.\n\nhttp://www.bamboohr.com/api/documentation/",
    "license": {
      "name": "MIT",
      "url": "http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT"
    }
  },
  "security": [
    {
      "auth": []
    },
    {
      "basic": []
    }
  ],
  "paths": {
    "/{companyDomain}/v1/employees/{id}/": {
      "get": {
        "description": "Get employee data by specifying a set of fields. This is suitable for getting basic employee information, including current values for fields that are part of a historical table, like job title, or compensation information. See the [fields](ref:metadata-get-a-list-of-fields) endpoint for a list of possible fields.",
        "summary": "Get Employee",
        "tags": [
          "Employees"
        ],
        "operationId": "Get Employee",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": true,
            "description": "{fields} is a comma separated list of values taken from the official list of field names. ",
            "schema": {
              "type": "string",
              "default": "firstName,lastName"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any).",
            "schema": {
              "type": "string",
              "default": 0
            }
          },
          {
            "name": "onlyCurrent",
            "in": "query",
            "required": false,
            "description": "Setting to false will return future dated values from history table fields.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An Employee",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the employee"
                    }
                  },
                  "additionalProperties": true
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the employee"
                    }
                  },
                  "additionalProperties": true
                }
              }
            }
          },
          "403": {
            "description": "if the API user does not have permission to see the requested employee."
          },
          "404": {
            "description": "if the employee does not exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Update an employee, based on employee ID. If employee is currently on a pay schedule syncing with Trax Payroll, or being added to one, the API user will need to update the employee with all of the following required fields for the update to be successful (listed by API field name): employeeNumber, firstName, lastName, dateOfBirth, ssn, gender, maritalStatus, hireDate, address1, city, state, country, employmentHistoryStatus, exempt, payType, payRate, payPer, location, department, and division.",
        "summary": "Update Employee",
        "tags": [
          "Employees"
        ],
        "operationId": "Update Employee",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is an employee ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Employee when updating",
                "example": {
                  "firstName": "Panda",
                  "lastName": "Bear"
                },
                "type": "object",
                "properties": {
                  "firstName": {
                    "description": "",
                    "type": "string",
                    "maximum": 255
                  },
                  "lastName": {
                    "description": "",
                    "type": "string",
                    "maximum": 255
                  }
                },
                "additionalProperties": true
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Employee updated successfully."
          },
          "400": {
            "description": "Provided JSON is bad or user is missing required fields."
          },
          "403": {
            "description": "If the user doesn't have perms to see the employee or the user doesn't have perms to update ANY of the requested fields."
          },
          "404": {
            "description": "If the employee to be updated doesn't exist."
          },
          "409": {
            "description": "If an employee field was given an invalid value"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employees/": {
      "post": {
        "description": "Add a new employee. New employees must have at least a first name and a last name. The ID of the newly created employee is included in the Location header of the response. Other fields can be included. Please see the [fields](ref:metadata-get-a-list-of-fields) endpoint. New Employees added to a pay schedule synced with Trax Payroll must have the following required fields (listed by API field name): employeeNumber, firstName, lastName, dateOfBirth, ssn, gender, maritalStatus, hireDate, address1, city, state, country, employmentHistoryStatus, exempt, payType, payRate, payPer, location, department, and division.",
        "summary": "Add Employee",
        "tags": [
          "Employees"
        ],
        "operationId": "add-employee",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "New Employee",
                "example": {
                  "firstName": "Panda",
                  "lastName": "Bear"
                },
                "type": "object",
                "properties": {
                  "firstName": {
                    "description": "",
                    "type": "string",
                    "maximum": 255
                  },
                  "lastName": {
                    "description": "",
                    "type": "string",
                    "maximum": 255
                  }
                },
                "additionalProperties": true
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Additionally, an HTTP Location: header that points to the new API URL for the new employee will be returned.",
            "headers": {
              "Location": {
                "description": "The URL to view the employee in the web app. The ID of the employee will be included.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "If the posted XML or JSON is invalid or the minimum fields are not provided."
          },
          "403": {
            "description": "If the API user does not have permission to add an employee."
          },
          "409": {
            "description": "If an employee field was given an invalid value."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/employees/",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Accept": "application/json",
                "Content-Type": "application/xml"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "SDD: Add Employee (BAD)",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employees/directory": {
      "get": {
        "description": "Gets employee directory.",
        "summary": "Get Employee Directory",
        "tags": [
          "Employees"
        ],
        "operationId": "get-employees-directory",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of employees",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the employee"
                    }
                  },
                  "additionalProperties": true
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the employee"
                    }
                  },
                  "additionalProperties": true
                }
              }
            }
          },
          "403": {
            "description": "if the directory has not been shared company-wide."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/employees/directory",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Accept": "application/json",
                "Content-Type": "application/xml"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "SDD: Get Employees (BAD)",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employees/{id}/files/view/": {
      "get": {
        "description": "Lists employee files and categories",
        "summary": "List employee files and categories",
        "tags": [
          "Employee Files"
        ],
        "operationId": "list-employee-files",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any).",
            "schema": {
              "type": "string",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee file and category list"
          },
          "403": {
            "description": "if the API user does not have permission to see the requested employee or the employee's files."
          },
          "404": {
            "description": "if no files are found for this employee."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/employees/{id}/files/view",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Content-Type": "application/xml"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "SDD: Get Employees (BAD)",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employees/files/categories": {
      "post": {
        "description": "Add an employee file category.",
        "summary": "Add Employee File Category",
        "tags": [
          "Employee Files"
        ],
        "operationId": "add-employee-file-category",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "New Employee File Category",
                "example": [
                  "A new category"
                ],
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The category was created"
          },
          "400": {
            "description": "if the posted XML is invalid or there was no category name given."
          },
          "403": {
            "description": "if the API user does not have permission to create employee categories."
          },
          "500": {
            "description": "there was an unknown server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/employees/files/categories",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Accept": "application/json",
                "Content-Type": "application/xml"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "SDD: Add Employee (BAD)",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employees/{id}/files/{fileId}": {
      "post": {
        "description": "Update an employee file",
        "summary": "Update Employee File",
        "tags": [
          "Employee Files"
        ],
        "operationId": "update-employee-file",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any).",
            "schema": {
              "type": "string",
              "default": 0
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "description": "{fileId} is the ID of the employee file being updated.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Employee File Update",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "",
                    "type": "string"
                  },
                  "categoryId": {
                    "description": "",
                    "type": "string"
                  },
                  "shareWithEmployee": {
                    "description": "",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The employee file was updated"
          },
          "400": {
            "description": "Invalid JSON"
          },
          "403": {
            "description": "if the API user does not have permission to see the requested employee or the employee's files."
          },
          "404": {
            "description": "if the employee file or category was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/employees/{id}/files/{fileId}",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Accept": "application/json",
                "Content-Type": "application/xml"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "SDD: Add Employee (BAD)",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete an employee file",
        "summary": "Delete Employee File",
        "tags": [
          "Employee Files"
        ],
        "operationId": "delete-employee-file",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any).",
            "schema": {
              "type": "string",
              "default": 0
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "description": "{fileId} is the ID of the employee file being deleted.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee file was deleted"
          },
          "403": {
            "description": "if the API user does not have permission to see the requested employee or the employee's files."
          },
          "404": {
            "description": "if the employee file was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/employees/{id}/files/{fileId}",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Accept": "application/json",
                "Content-Type": "application/xml"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "SDD: Add Employee (BAD)",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "get": {
        "description": "Gets an employee file",
        "summary": "Get an Employee File",
        "tags": [
          "Employee Files"
        ],
        "operationId": "get-employee-file",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any).",
            "schema": {
              "type": "string",
              "default": 0
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "description": "{fileId} is the ID of the employee file being retrieved.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee file was successfully retrieved"
          },
          "403": {
            "description": "if the API user does not have permission to see the requested employee or the employee's files."
          },
          "404": {
            "description": "if the employee file was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/employees/{id}/files/{fileId}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "SDD: Add Employee (BAD)",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employees/{id}/files": {
      "post": {
        "description": "Upload an employee file",
        "summary": "Upload Employee File",
        "tags": [
          "Employee Files"
        ],
        "operationId": "upload-employee-file",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any).",
            "schema": {
              "type": "string",
              "default": 0
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The employee file was successfully uploaded"
          },
          "403": {
            "description": "if the API user does not have permission to see the requested employee or the employee's files."
          },
          "404": {
            "description": "if the category ID was not found."
          },
          "413": {
            "description": "if the file size exceeds 20MB or the storage limit for the company."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/employees/{id}/files",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Content-Type": "multipart/form-data"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "SDD: Add Employee (BAD)",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/files/view/": {
      "get": {
        "description": "Lists company files and categories",
        "summary": "List company files and categories",
        "tags": [
          "Company Files"
        ],
        "operationId": "list-company-files",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company files and category list"
          },
          "403": {
            "description": "if the API user does not have permission to see the company files."
          },
          "404": {
            "description": "if no files or categories are found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/files/view",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Content-Type": "application/xml"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "SDD: Get Employees (BAD)",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/files/categories": {
      "post": {
        "description": "Add a company file category.",
        "summary": "Add Company File Category",
        "tags": [
          "Company Files"
        ],
        "operationId": "add-company-file-category",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "New Company File Category",
                "example": [
                  "A new category"
                ],
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The category was created"
          },
          "400": {
            "description": "if the posted JSON is invalid or there was no category name given."
          },
          "403": {
            "description": "if the API user does not have permission to see the company files."
          },
          "500": {
            "description": "there was an unknown server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/files/categories",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Accept": "application/json",
                "Content-Type": "application/xml"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "SDD: Add Employee (BAD)",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/files/{fileId}": {
      "post": {
        "description": "Update a company file",
        "summary": "Update Company File",
        "tags": [
          "Company Files"
        ],
        "operationId": "update-company-file",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "description": "{fileId} is the ID of the employee file being updated.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Company File Update",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "",
                    "type": "string"
                  },
                  "categoryId": {
                    "description": "",
                    "type": "string"
                  },
                  "shareWithEmployee": {
                    "description": "",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The employee file was updated"
          },
          "400": {
            "description": "if the posted JSON is invalid."
          },
          "403": {
            "description": "if the API user does not have permission to see the company files."
          },
          "404": {
            "description": "if the file or category was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/files/{fileId}",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Accept": "application/json",
                "Content-Type": "application/xml"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "SDD: Add Employee (BAD)",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete a company file",
        "summary": "Delete Company File",
        "tags": [
          "Company Files"
        ],
        "operationId": "delete-company-file",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "description": "{fileId} is the ID of the company file being deleted.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company file was deleted"
          },
          "403": {
            "description": "if the API user does not have permission to see the requested file."
          },
          "404": {
            "description": "if the file was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/files/{fileId}",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Accept": "application/json",
                "Content-Type": "application/xml"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "SDD: Add Employee (BAD)",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "get": {
        "description": "Gets an company file",
        "summary": "Get an Company File",
        "tags": [
          "Company Files"
        ],
        "operationId": "get-company-file",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "description": "{fileId} is the ID of the company file being retrieved.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company file was successfully retrieved"
          },
          "403": {
            "description": "if the API user does not have permission to see the company files."
          },
          "404": {
            "description": "if the file was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/files/{fileId}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "SDD: Add Employee (BAD)",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/files": {
      "post": {
        "description": "Upload a company file",
        "summary": "Upload Company File",
        "tags": [
          "Company Files"
        ],
        "operationId": "upload-company-file",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The company file was successfully uploaded"
          },
          "403": {
            "description": "if the API user does not have permission to see the company files."
          },
          "404": {
            "description": "if the category ID was not found."
          },
          "413": {
            "description": "if the file size exceeds 20MB or the storage limit for the company."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/files",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Content-Type": "multipart/form-data"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "SDD: Add Employee (BAD)",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/reports/{id}": {
      "get": {
        "description": "Use this resource to request one of your existing custom company reports from the My Reports or Manage Reports sections in the Reports tab. You can get the report number by hovering over the report name and noting the ID from the URL. At present, only reports from the My Reports or Manage Reports sections are supported. In the future we may implement reports from the Standard Reports section if there is enough demand for it. The report numbers used in this request are different in each company.",
        "summary": "Get company report",
        "tags": [
          "Reports"
        ],
        "operationId": "get-company-report",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is a report ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "required": true,
            "description": "The output format for the report. Supported formats: CSV, PDF, XLS, XML, JSON",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fd",
            "in": "query",
            "required": false,
            "description": "yes=apply standard duplicate field filtering, no=return the raw results with no duplicate filtering. Default value is \"yes\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyCurrent",
            "in": "query",
            "required": false,
            "description": "Setting to false will return future dated values from history table fields.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All fields available in BambooHR."
          },
          "404": {
            "description": "if you request a nonexistent report number."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/reports/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Metadata: Get a List of Fields",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/reports/custom": {
      "post": {
        "description": "Use this resource to request BambooHR generate a report. You must specify a type of either \"PDF\", \"XLS\", \"CSV\", \"JSON\", or \"XML\". You must specify a list of fields to show on the report. The list of fields is available here. The custom report will return employees regardless of their status, \"Active\" or \"Inactive\". This differs from the UI, which by default applies a quick filter to display only \"Active\" employees.",
        "summary": "Request a custom report",
        "tags": [
          "Reports"
        ],
        "operationId": "request-custom-report",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "required": true,
            "description": "The output format for the report. Supported formats: CSV, PDF, XLS, XML, JSON",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyCurrent",
            "in": "query",
            "required": false,
            "description": "Limits the report to only current employees. Setting to false will include future-dated employees in the report.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Request Custom Report",
                "type": "object",
                "properties": {
                  "title": {
                    "description": "",
                    "type": "string"
                  },
                  "filters": {
                    "description": "",
                    "type": "object",
                    "properties": {
                      "lastChanged": {
                        "description": "",
                        "type": "object",
                        "properties": {
                          "includeNull": {
                            "description": "yes|no",
                            "type": "string"
                          },
                          "value": {
                            "description": "Date last changed",
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "fields": {
                    "description": "",
                    "type": "array",
                    "items": {
                      "description": "",
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Custom report successfully requested"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/files",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Content-Type": "application/json"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "SDD: Add Employee (BAD)",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employees/{id}/tables/{table}": {
      "get": {
        "description": "Returns a data structure representing all the table rows for a given employee and table combination. The result is not sorted in any particular order.",
        "summary": "Gets table rows for a given employee and table combination",
        "tags": [
          "Tabular Data"
        ],
        "operationId": "get-employee-table-row",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is the employee ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table",
            "in": "path",
            "required": true,
            "description": "Table name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/employees/{id}/tables/{table}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Metadata: Get a List of Fields",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Adds a table row. If employee is currently on a pay schedule syncing with Trax Payroll, or being added to one, the row cannot be added if they are missing any required fields for that table. If the API user is adding a row on the compensation table, the row cannot be added if they are missing any of the required employee fields (including fields not on that table).",
        "summary": "Adds a table row",
        "tags": [
          "Tabular Data"
        ],
        "operationId": "add-employee-table-row",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is the employee ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table",
            "in": "path",
            "required": true,
            "description": "Table name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Table Row Update",
                "type": "object",
                "properties": {
                  "date": {
                    "description": "",
                    "type": "string"
                  },
                  "location": {
                    "description": "",
                    "type": "string"
                  },
                  "division": {
                    "description": "",
                    "type": "string"
                  },
                  "department": {
                    "description": "",
                    "type": "string"
                  },
                  "jobTitle": {
                    "description": "",
                    "type": "string"
                  },
                  "reportsTo": {
                    "description": "",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Row added successfully."
          },
          "400": {
            "description": "Invalid or missing required fields."
          },
          "403": {
            "description": "Permission denied."
          },
          "406": {
            "description": "An error with one or more of the fields."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/employees/{id}/tables/{table}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Metadata: Get a List of Fields",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employees/{id}/tables/{table}/{rowId}": {
      "post": {
        "description": "Updates a table row. If employee is currently on a pay schedule syncing with Trax Payroll, or being added to one, the row cannot be added if they are missing any required fields for that table. If the API user is updating a row on the compensation table, the row cannot be updated if they are missing any of the required employee fields (including fields not on that table).",
        "summary": "Updates a table row.",
        "tags": [
          "Tabular Data"
        ],
        "operationId": "update-employee-table-row",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is the employee ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table",
            "in": "path",
            "required": true,
            "description": "Table name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rowId",
            "in": "path",
            "required": true,
            "description": "Row ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Table Row Update",
                "type": "object",
                "properties": {
                  "date": {
                    "description": "",
                    "type": "string"
                  },
                  "location": {
                    "description": "",
                    "type": "string"
                  },
                  "division": {
                    "description": "",
                    "type": "string"
                  },
                  "department": {
                    "description": "",
                    "type": "string"
                  },
                  "jobTitle": {
                    "description": "",
                    "type": "string"
                  },
                  "reportsTo": {
                    "description": "",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response is possible even if one or more updates were dis-allowed because of permissions. As long as a single field is updated a 200 response will be returned."
          },
          "400": {
            "description": "Invalid or missing required fields."
          },
          "403": {
            "description": "Permission denied."
          },
          "406": {
            "description": "An error with one or more of the fields."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/employees/{id}/tables/{table}/{rowId}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Metadata: Get a List of Fields",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Deletes a table row",
        "summary": "Deletes a table row",
        "tags": [
          "Tabular Data"
        ],
        "operationId": "delete-employee-table-row-v1",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is the employee ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table",
            "in": "path",
            "required": true,
            "description": "Table name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rowId",
            "in": "path",
            "required": true,
            "description": "Row ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Respond true if the row was deleted, false if the row was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sucess": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Invalid employee ID or table name."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Permission denied."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "DELETE",
              "uri": "/employees/{id}/tables/{table}/{rowId}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Delete Table Row",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1_1/employees/{id}/tables/{table}/{rowId}": {
      "post": {
        "description": "Updates a table row. Fundamentally the same as version 1 so choose a version and stay with it unless other changes occur. Changes from version 1 are now minor with a few variations limited to ACA, payroll, terminated rehire, gusto, benetrac, and final pay date.",
        "summary": "Updates a table row.",
        "tags": [
          "Tabular Data"
        ],
        "operationId": "update-employee-table-row-v",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is the employee ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table",
            "in": "path",
            "required": true,
            "description": "Table name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rowId",
            "in": "path",
            "required": true,
            "description": "Row ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Table Row Update",
                "type": "object",
                "properties": {
                  "date": {
                    "description": "",
                    "type": "string"
                  },
                  "location": {
                    "description": "",
                    "type": "string"
                  },
                  "division": {
                    "description": "",
                    "type": "string"
                  },
                  "department": {
                    "description": "",
                    "type": "string"
                  },
                  "jobTitle": {
                    "description": "",
                    "type": "string"
                  },
                  "reportsTo": {
                    "description": "",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response is possible even if one or more updates were dis-allowed because of permissions. As long as a single field is updated a 200 response will be returned."
          },
          "400": {
            "description": "Invalid or missing required fields."
          },
          "403": {
            "description": "Permission denied."
          },
          "406": {
            "description": "An error with one or more of the fields."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/employees/{id}/tables/{table}/{rowId}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Metadata: Get a List of Fields",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1_1/employees/{id}/tables/{table}": {
      "post": {
        "description": "Adds a table row. Fundamentally the same as version 1 so choose a version and stay with it unless other changes occur. Changes from version 1 are now minor with a few variations limited to ACA, payroll, terminated rehire, gusto, benetrac, and final pay date.",
        "summary": "Adds a table row",
        "tags": [
          "Tabular Data"
        ],
        "operationId": "add-employee-table-row-v1",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is the employee ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table",
            "in": "path",
            "required": true,
            "description": "Table name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Table Row Update",
                "type": "object",
                "properties": {
                  "date": {
                    "description": "",
                    "type": "string"
                  },
                  "location": {
                    "description": "",
                    "type": "string"
                  },
                  "division": {
                    "description": "",
                    "type": "string"
                  },
                  "department": {
                    "description": "",
                    "type": "string"
                  },
                  "jobTitle": {
                    "description": "",
                    "type": "string"
                  },
                  "reportsTo": {
                    "description": "",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/employees/{id}/tables/{table}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Metadata: Get a List of Fields",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employees/changed/tables/{table}": {
      "get": {
        "description": "This API is merely an optimization to avoid downloading all table data for all employees. When you use this API you will provide a timestamp and the results will be limited to just the employees that have changed since the time you provided. This API operates on an employee-last-changed-timestamp, which means that a change in ANY field in the employee record will cause ALL of that employees table rows to show up via this API.",
        "summary": "Gets all updated employee table data",
        "tags": [
          "Tabular Data"
        ],
        "operationId": "get-changed-employee-table-data",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table",
            "in": "path",
            "required": true,
            "description": "Table name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "required": true,
            "description": "URL encoded iso8601 timestamp",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/employees/changed/tables/{table}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Metadata: Get a List of Fields",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/meta/fields/": {
      "get": {
        "description": "This endpoint can help with discovery of fields that are available in an account.",
        "summary": "Get a list of fields",
        "tags": [
          "Account Information"
        ],
        "operationId": "Metadata: Get a List of Fields",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All fields available in BambooHR."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/meta/fields/",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Accept": "application/json"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Metadata: Get a List of Fields",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/meta/tables/": {
      "get": {
        "description": "This endpoint can help discover table fields available in your BambooHR account.",
        "summary": "Get a list of tabular fields",
        "tags": [
          "Account Information"
        ],
        "operationId": "Metadata: Get a List of Tabular Fields",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All table fields available in BambooHR"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/meta/tables/",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Accept": "application/xml"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Metadata: Get a List of Tabular Fields",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/meta/lists/": {
      "get": {
        "description": "This endpoint will return details for all list fields. Lists that can be edited will have the \"manageable\" attribute set to yes. Lists with the \"multiple\" attribute set to yes are fields that can have multiple values. Options with the \"archived\" attribute set to yes should not appear as current options, but are included so that historical data can reference the value.",
        "summary": "Get details for list fields",
        "tags": [
          "Account Information"
        ],
        "operationId": "Metadata: Get Details for List Fields",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All details for list fields available in BambooHR"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/meta/lists/",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Accept": "application/json"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Metadata: Get details for list fields",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/meta/lists/{listFieldId}": {
      "put": {
        "description": "This resource accepts one or more options. To update an option, specify an ID. You may also remove an option from the list of current values by archiving the value. To create a new option, do not specify an \"id\" attribute.",
        "summary": "Add or Update Values for List Fields",
        "tags": [
          "Account Information"
        ],
        "operationId": "Metadata: Add or Update Values for List Fields",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "listFieldId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Add or Update Values for List Fields",
                "type": "object",
                "properties": {
                  "options": {
                    "description": "",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "",
                          "type": "integer"
                        },
                        "value": {
                          "description": "",
                          "type": "string",
                          "maximum": 255
                        },
                        "archived": {
                          "description": "",
                          "type": "string",
                          "maximum": 255
                        },
                        "adpCode": {
                          "description": "",
                          "type": "string",
                          "maximum": 255
                        }
                      }
                    }
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response indicates that all the requested changes were made. The content of the response will be the full list of options for the specified listId."
          },
          "400": {
            "description": "The posted JSON is invalid."
          },
          "403": {
            "description": "List is not editable or insufficient permissions."
          },
          "404": {
            "description": "A non-existant list value or option ID is specified."
          },
          "409": {
            "description": "A duplicate list value conflicted with the value specified."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/meta/users/": {
      "get": {
        "description": "",
        "summary": "Get a List of Users",
        "tags": [
          "Account Information"
        ],
        "operationId": "Get a List of Users",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/meta/users/",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Accept": "application/json"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Metadata: Get a List of Users",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/meta/time_off/types/": {
      "get": {
        "description": "This endpoint gets a list of time off types.",
        "summary": "Get Time Off Types",
        "tags": [
          "Time Off"
        ],
        "operationId": "Get Time Off Types",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          },
          {
            "name": "mode",
            "in": "query",
            "required": false,
            "description": "set to 'request' to get a list of all time off types with which this user can create a time off request. The default is to return the list of time off types the user has permissions on. This distinction is important, as employees can request time off for types that they don't have permission to view balances and requests for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Time off types"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/meta/time_off/types/",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Accept": "application/json"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Metadata: Get Time Off Types",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/meta/time_off/policies/": {
      "get": {
        "description": "This endpoint gets a list of time off policies.",
        "summary": "Get Time Off Policies",
        "tags": [
          "Time Off"
        ],
        "operationId": "Get Time Off Policies",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/meta/time_off/policies/",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Accept": "application/json"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Metadata: Get a List of Time Off Policies",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_off/requests/": {
      "get": {
        "description": "",
        "summary": "Get Time Off Requests",
        "tags": [
          "Time Off"
        ],
        "operationId": "Time Off: Get Time Off Requests",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "description": "A particular request ID to limit the response to.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "action",
            "in": "query",
            "required": false,
            "description": "Limit to requests that the user has a particular level of access to. Legal values are: \"view\" or \"approve\". Defaults to view.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "required": false,
            "description": "A particular employee ID to limit the response to.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": true,
            "description": "YYYY-MM-DD. Only show time off that occurs on/after the specified start date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "required": true,
            "description": "YYYY-MM-DD. Only show time off that occurs on/before the specified end date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "A comma separated list of time off types IDs to include limit the response to. If omitted, requests of all types are included.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "description": "A comma separated list of request status values to include. If omitted, requests of all status values are included. Legal values are \"approved\", \"denied\", \"superceded\", \"requested\", \"canceled\".",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "Malformed request"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/time_off/requests/",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Accept": "application/json"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off: Get Time Off Requests",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": true,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employees/{employeeId}/time_off/request": {
      "put": {
        "description": "A time off request is an entity that describes the decision making process for approving time off. Once a request has been created, a history entry can be created documenting the actual use of time off.",
        "summary": "Add a Time Off Request",
        "tags": [
          "Time Off"
        ],
        "operationId": "Time Off: Add a Time Off Request",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Add time off request",
                "type": "object",
                "properties": {
                  "status": {
                    "description": "",
                    "type": "string",
                    "maximum": 255
                  },
                  "start": {
                    "description": "",
                    "type": "string",
                    "maximum": 255
                  },
                  "end": {
                    "description": "",
                    "type": "string",
                    "maximum": 255
                  },
                  "timeOffTypeId": {
                    "description": "",
                    "type": "integer"
                  },
                  "amount": {
                    "description": "",
                    "type": "integer"
                  },
                  "notes": {
                    "description": "",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "string"
                        },
                        "note": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "dates": {
                    "description": "",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "ymd": {
                          "type": "string"
                        },
                        "amount": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  "previousRequest": {
                    "description": "",
                    "type": "integer"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Request created."
          },
          "400": {
            "description": "Malformed request."
          },
          "403": {
            "description": "Forbidden. Cannot change past approved requests."
          },
          "404": {
            "description": "Employee not found"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "PUT",
              "uri": "/employees/{employeeId}/time_off/request",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Content-Type": "text/xml"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off: Add a Time Off Request",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_off/requests/{requestId}/status": {
      "put": {
        "description": "This endpoint allows you to change the status of a request in the system. You can use this to approve, deny, or cancel a time off request.",
        "summary": "Change a Request Status",
        "tags": [
          "Time Off"
        ],
        "operationId": "Time Off: Change a Request Status",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "requestId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Request Status",
                "example": {
                  "status": "Approved",
                  "note": "Note!"
                },
                "type": "object",
                "properties": {
                  "status": {
                    "description": "One of approved, cancelled, denied",
                    "type": "string",
                    "maximum": 20
                  },
                  "note": {
                    "description": "A note to attach to the change in status",
                    "type": "string",
                    "maximum": 255
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The status has been updated."
          },
          "400": {
            "description": "If the posted XML is invalid or the status is not \"approved\", \"denied\", \"canceled\", or \"declined\"."
          },
          "403": {
            "description": "If the current user doesn't have access to change the status in this way."
          },
          "404": {
            "description": "If the time off request ID doesn't exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "PUT",
              "uri": "/time_off/requests/{timeOffRequestId}/status",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Content-Type": "text/xml"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off: Change a Request Status",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employees/{employeeId}/time_off/history/": {
      "put": {
        "description": "To use this API make an HTTP PUT where the body of the request is the JSON documented below. A new time off history item will be inserted into the database. On success, a 201 Created code is returned and the \"Location\" header of the response will contain a URL that identifies the new history item.",
        "summary": "Add a Time Off History Item For Time Off Request",
        "tags": [
          "Time Off"
        ],
        "operationId": "Time Off: Add a Time Off History Item For Time Off Request",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "employeeId",
            "required": true,
            "description": "The ID of the employee.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "The date the request should be added in history. This will usually be the first date of the request. Should be in ISO8601 date format (YYYY-MM-DD).",
                    "type": "string"
                  },
                  "timeOffRequestId": {
                    "description": "The ID of the time off request.",
                    "type": "integer"
                  },
                  "note": {
                    "description": "This is an optional note to show in history.",
                    "type": "string",
                    "maximum": 255
                  }
                },
                "required": [
                  "date",
                  "timeOffRequestId"
                ],
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The history item has been created."
          },
          "400": {
            "description": "For empty or malformed JSON, an invalid date format, or an invalid time off request."
          },
          "403": {
            "description": "Invalid permissions to perform this action."
          },
          "409": {
            "description": "If the time off request already has a history item."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employees/{employeeId}/time_off/balance_adjustment/": {
      "put": {
        "description": "To use this API make an HTTP PUT where the body of the request is the JSON documented below. A time off balance adjustment will be inserted into the database. On success, a 201 Created code is returned and the \"Location\" header of the response will contain a URL that identifies the new history item.",
        "summary": "Adjust Time Off Balance",
        "tags": [
          "Time Off"
        ],
        "operationId": "Time Off: Adjust Time Off Balance",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "employeeId",
            "required": true,
            "description": "The ID of the employee.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "The date the adjustment should be added in history. Should be in ISO8601 date format (YYYY-MM-DD).",
                    "type": "string"
                  },
                  "timeOffTypeId": {
                    "description": "The ID of the time off type to add a balance adjustment for.",
                    "type": "integer"
                  },
                  "amount": {
                    "description": "The number of hours/days to adjust the balance by.",
                    "type": "number",
                    "format": "float"
                  },
                  "note": {
                    "description": "This is an optional note to show in history.",
                    "type": "string",
                    "maximum": 255
                  }
                },
                "required": [
                  "date",
                  "timeOffTypeId",
                  "amount"
                ],
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The balance adjustment has been created."
          },
          "400": {
            "description": "For empty or malformed JSON, an invalid date format, or an invalid time off type."
          },
          "403": {
            "description": "Invalid permissions to perform this action."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employees/{employeeId}/time_off/policies": {
      "get": {
        "description": "",
        "summary": "List Time Off Policies for Employee",
        "tags": [
          "Time Off"
        ],
        "operationId": "Time Off: List Time Off Policies for Employee",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/employees{employeeId}/time_off/policies",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Accept": "application/json"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off: List Time Off Policies for Employee",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "To use this API make an HTTP PUT where the body of the request is the JSON documented below. A time off policy will be assigned to the employee with accruals starting on the date specified. A null start date will remove the assignment. On success, a 200 Success code is returned and the content of the response will be the same as the List Time off Policies API.",
        "summary": "Assign Time Off Policies for an Employee",
        "tags": [
          "Time Off"
        ],
        "operationId": "Time Off: Assign Time Off Policies for an Employee",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Time Off Policies",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "timeOffPolicyId": {
                      "type": "integer"
                    },
                    "accrualStartDate": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1_1/employees/{employeeId}/time_off/policies": {
      "get": {
        "description": "",
        "summary": "List Time Off Policies for Employee, Version 1.1",
        "tags": [
          "Time Off"
        ],
        "operationId": "Time Off: V1.1 List Time Off Policies for Employee",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/employees{employeeId}/time_off/policies",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Accept": "application/json"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off: List Time Off Policies for Employee",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "To use this API make an HTTP PUT where the body of the request is the JSON documented below. A time off policy will be assigned to the employee with accruals starting on the date specified. On success, a 200 Success code is returned and the content of the response will be the same as the List Time off Policies API.",
        "summary": "Assign Time Off Policies for an Employee, Version 1.1",
        "tags": [
          "Time Off"
        ],
        "operationId": "Time Off: V1.1 Assign Time Off Policies for an Employee",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Time Off Policies",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "timeOffPolicyId": {
                      "type": "integer"
                    },
                    "accrualStartDate": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employees/{employeeId}/time_off/calculator": {
      "get": {
        "description": "This endpoint will sum future time off accruals, scheduled time off, and carry-over events to produce estimates for the anticipated time off balance on a given date in the future.",
        "summary": "Estimate Future Time Off Balances",
        "tags": [
          "Time Off"
        ],
        "operationId": "Estimate Future Time Off Balances",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          },
          {
            "name": "end",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/employees/{{employeeId}}/time_off/calculator?end=2017-12-01",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Accept": "application/json"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off: Estimate Future Time Off Balances",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_off/whos_out/": {
      "get": {
        "description": "This endpoint will return a list, sorted by date, of employees who will be out, and company holidays, for a period of time.",
        "summary": "Get a list of Who's Out",
        "tags": [
          "Time Off"
        ],
        "operationId": "Get a list of Who's Out",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "description": "A date in the form YYYY-MM-DD - defaults to the current date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "required": false,
            "description": "A date in the form YYYY-MM-DD - defaults to 14 days from the start date.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/time_off/whos_out/",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Accept": "application/json"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employees/{employeeId}/photo/{size}": {
      "get": {
        "description": "Get an employee photo",
        "summary": "Get an employee photo",
        "tags": [
          "Photos"
        ],
        "operationId": "get-employee-photo",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "The ID for the employee you are getting the photo for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "path",
            "required": true,
            "description": "Photo size",
            "schema": {
              "type": "string",
              "enum": [
                "original",
                "large",
                "medium",
                "xs",
                "tiny"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/employees/{employeeId}/photo/small",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employees/{employeeId}/photo": {
      "post": {
        "description": "Store a new employee photo",
        "summary": "Store a new employee photo",
        "tags": [
          "Photos"
        ],
        "operationId": "upload-employee-photo",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "The ID for the employee you are setting the photo for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The file was successfully uploaded"
          },
          "404": {
            "description": "if the employee doesn't exist"
          },
          "413": {
            "description": "if the file is too big."
          },
          "415": {
            "description": "if the file is not in a supported file format or if the width doesn't match the height."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/files",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Content-Type": "multipart/form-data"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "SDD: Add Employee (BAD)",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employees/changed": {
      "get": {
        "description": "This API allows for efficient syncing of employee data. When you use this API you will provide a timestamp and the results will be limited to just the employees that have changed since the time you provided. This API operates on an employee-last-changed-timestamp, which means that a change in ANY individual field in the employee record, as well as any change to the employment status, job info, or compensation tables, will cause that employee to be returned via this API.",
        "summary": "Gets all updated employee IDs",
        "tags": [
          "Last Change Information"
        ],
        "operationId": "get-changed-employee-ids",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "required": true,
            "description": "URL encoded iso8601 timestamp",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Use one of these in the {type} variable in the URL: \"inserted\", \"updated\", \"deleted\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/employees/changed",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Metadata: Get a List of Fields",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/login": {
      "post": {
        "description": "User Login",
        "summary": "User Login",
        "tags": [
          "Login"
        ],
        "operationId": "login",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "title": "Login",
                "type": "object",
                "properties": {
                  "applicationKey": {
                    "description": "",
                    "type": "string"
                  },
                  "user": {
                    "description": "",
                    "type": "string"
                  },
                  "password": {
                    "description": "",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/employees/{id}/tables/{table}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Metadata: Get a List of Fields",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/benefits/settings/deduction_types/all": {
      "get": {
        "description": "Get benefit deduction types",
        "summary": "Get benefit deduction types",
        "tags": [
          "Benefits"
        ],
        "operationId": "get-benefit-deduction-types",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/benefits/settings/deduction_types/all",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/benefit/company_benefit": {
      "get": {
        "description": "Get a list of company benefits",
        "summary": "Get a list of company benefits",
        "tags": [
          "Benefits"
        ],
        "operationId": "get-company-benefits",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of company benefits.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "title": "Company Benefit",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Name",
                        "type": "string"
                      },
                      "benefitVendorId": {
                        "description": "Benefit vendor ID",
                        "type": "string"
                      },
                      "benefitType": {
                        "description": "Benefit type",
                        "type": "string",
                        "enum": [
                          "health",
                          "dental",
                          "vision",
                          "retirement",
                          "hsa",
                          "flex",
                          "life",
                          "disability",
                          "reimbursement",
                          "supplemental",
                          "other"
                        ]
                      },
                      "deductionTypeId": {
                        "description": "Deduction type ID",
                        "type": "integer"
                      },
                      "startDate": {
                        "description": "Benefit start date",
                        "type": "string",
                        "format": "date"
                      },
                      "endDate": {
                        "description": "Benefit end date",
                        "type": "string",
                        "format": "date"
                      },
                      "description": {
                        "description": "Description",
                        "type": "string"
                      },
                      "planUrl": {
                        "description": "Plan url",
                        "type": "string"
                      },
                      "ssoLoginUrl": {
                        "description": "SSO login url",
                        "type": "string"
                      },
                      "ssoLoginUrlLinkText": {
                        "description": "SSO login link text",
                        "type": "string"
                      },
                      "safeHarbor": {
                        "description": "Is a safe harbor",
                        "type": "string",
                        "enum": [
                          "yes",
                          "no",
                          null
                        ]
                      },
                      "meetAcaMin": {
                        "description": "Meets ACA minimum requirements",
                        "type": "string",
                        "enum": [
                          "yes",
                          "no",
                          null
                        ]
                      },
                      "reimbursementAmount": {
                        "description": "Reimbursement amount",
                        "type": "number"
                      },
                      "reimbursementFrequency": {
                        "description": "Reimbursement frequency",
                        "type": "string",
                        "enum": [
                          "pay period",
                          "month",
                          "quarter",
                          "year",
                          "one time",
                          null
                        ]
                      },
                      "minEssentialCoverage": {
                        "description": "Provides minimum essential coverage",
                        "type": "string",
                        "enum": [
                          "yes",
                          "no",
                          null
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/benefit/company_benefit",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "HE: Get List of benefit deductions"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Add a new company benefit",
        "summary": "Add a new company benefit",
        "tags": [
          "Benefits"
        ],
        "operationId": "add-new-company-benefit",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "allOf": [
                  {
                    "title": "Company Benefit Request",
                    "type": "object",
                    "properties": {
                      "companyBenefitName": {
                        "description": "Name",
                        "type": "string"
                      },
                      "benefitVendorId": {
                        "description": "Benefit vendor ID",
                        "type": "string"
                      },
                      "benefitType": {
                        "description": "Benefit type",
                        "type": "string",
                        "enum": [
                          "health",
                          "dental",
                          "vision",
                          "retirement",
                          "hsa",
                          "flex",
                          "life",
                          "disability",
                          "reimbursement",
                          "supplemental",
                          "other"
                        ]
                      },
                      "deductionTypeId": {
                        "description": "Deduction type ID",
                        "type": "string"
                      },
                      "startDate": {
                        "description": "Benefit start date",
                        "type": "string",
                        "format": "date"
                      },
                      "endDate": {
                        "description": "Benefit end date",
                        "type": "string",
                        "format": "date"
                      },
                      "description": {
                        "description": "Description",
                        "type": "string"
                      },
                      "planUrl": {
                        "description": "Plan url",
                        "type": "string"
                      },
                      "ssoLoginUrl": {
                        "description": "SSO login url",
                        "type": "string"
                      },
                      "ssoLoginUrlLinkText": {
                        "description": "SSO login link text",
                        "type": "string"
                      },
                      "safeHarbor": {
                        "description": "Is a safe harbor",
                        "type": "boolean"
                      },
                      "meetAcaMin": {
                        "description": "Meets ACA minimum requirements",
                        "type": "boolean"
                      },
                      "reimbursementAmount": {
                        "description": "Reimbursement amount",
                        "type": "number"
                      },
                      "reimbursementFrequency": {
                        "description": "Reimbursement frequency",
                        "type": "string",
                        "enum": [
                          "pay period",
                          "month",
                          "quarter",
                          "year",
                          "one time",
                          null
                        ]
                      },
                      "reimbursementCurrencyCode": {
                        "description": "Reimbursement currency code",
                        "type": "string"
                      },
                      "minEssentialCoverage": {
                        "description": "Provides minimum essential coverage",
                        "type": "boolean"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "benefitType",
                      "deductionTypeId",
                      "startDate",
                      "meetAcaMin",
                      "minEssentialCoverage",
                      "endDate"
                    ]
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The newly created company benefit.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Company Benefit",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name",
                      "type": "string"
                    },
                    "benefitVendorId": {
                      "description": "Benefit vendor ID",
                      "type": "string"
                    },
                    "benefitType": {
                      "description": "Benefit type",
                      "type": "string",
                      "enum": [
                        "health",
                        "dental",
                        "vision",
                        "retirement",
                        "hsa",
                        "flex",
                        "life",
                        "disability",
                        "reimbursement",
                        "supplemental",
                        "other"
                      ]
                    },
                    "deductionTypeId": {
                      "description": "Deduction type ID",
                      "type": "integer"
                    },
                    "startDate": {
                      "description": "Benefit start date",
                      "type": "string",
                      "format": "date"
                    },
                    "endDate": {
                      "description": "Benefit end date",
                      "type": "string",
                      "format": "date"
                    },
                    "description": {
                      "description": "Description",
                      "type": "string"
                    },
                    "planUrl": {
                      "description": "Plan url",
                      "type": "string"
                    },
                    "ssoLoginUrl": {
                      "description": "SSO login url",
                      "type": "string"
                    },
                    "ssoLoginUrlLinkText": {
                      "description": "SSO login link text",
                      "type": "string"
                    },
                    "safeHarbor": {
                      "description": "Is a safe harbor",
                      "type": "string",
                      "enum": [
                        "yes",
                        "no",
                        null
                      ]
                    },
                    "meetAcaMin": {
                      "description": "Meets ACA minimum requirements",
                      "type": "string",
                      "enum": [
                        "yes",
                        "no",
                        null
                      ]
                    },
                    "reimbursementAmount": {
                      "description": "Reimbursement amount",
                      "type": "number"
                    },
                    "reimbursementFrequency": {
                      "description": "Reimbursement frequency",
                      "type": "string",
                      "enum": [
                        "pay period",
                        "month",
                        "quarter",
                        "year",
                        "one time",
                        null
                      ]
                    },
                    "minEssentialCoverage": {
                      "description": "Provides minimum essential coverage",
                      "type": "string",
                      "enum": [
                        "yes",
                        "no",
                        null
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/benefit/company_benefit",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "HE: Add New Company Benefit"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/benefit/company_benefit/{id}": {
      "get": {
        "description": "Get a company benefit",
        "summary": "Get a company benefit",
        "tags": [
          "Benefits"
        ],
        "operationId": "get-company-benefit",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is the company benefit ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested company benefit.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Company Benefit",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name",
                      "type": "string"
                    },
                    "benefitVendorId": {
                      "description": "Benefit vendor ID",
                      "type": "string"
                    },
                    "benefitType": {
                      "description": "Benefit type",
                      "type": "string",
                      "enum": [
                        "health",
                        "dental",
                        "vision",
                        "retirement",
                        "hsa",
                        "flex",
                        "life",
                        "disability",
                        "reimbursement",
                        "supplemental",
                        "other"
                      ]
                    },
                    "deductionTypeId": {
                      "description": "Deduction type ID",
                      "type": "integer"
                    },
                    "startDate": {
                      "description": "Benefit start date",
                      "type": "string",
                      "format": "date"
                    },
                    "endDate": {
                      "description": "Benefit end date",
                      "type": "string",
                      "format": "date"
                    },
                    "description": {
                      "description": "Description",
                      "type": "string"
                    },
                    "planUrl": {
                      "description": "Plan url",
                      "type": "string"
                    },
                    "ssoLoginUrl": {
                      "description": "SSO login url",
                      "type": "string"
                    },
                    "ssoLoginUrlLinkText": {
                      "description": "SSO login link text",
                      "type": "string"
                    },
                    "safeHarbor": {
                      "description": "Is a safe harbor",
                      "type": "string",
                      "enum": [
                        "yes",
                        "no",
                        null
                      ]
                    },
                    "meetAcaMin": {
                      "description": "Meets ACA minimum requirements",
                      "type": "string",
                      "enum": [
                        "yes",
                        "no",
                        null
                      ]
                    },
                    "reimbursementAmount": {
                      "description": "Reimbursement amount",
                      "type": "number"
                    },
                    "reimbursementFrequency": {
                      "description": "Reimbursement frequency",
                      "type": "string",
                      "enum": [
                        "pay period",
                        "month",
                        "quarter",
                        "year",
                        "one time",
                        null
                      ]
                    },
                    "minEssentialCoverage": {
                      "description": "Provides minimum essential coverage",
                      "type": "string",
                      "enum": [
                        "yes",
                        "no",
                        null
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/benefit/company_benefit/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "HE: Get a Company Benefit"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Update a company benefit",
        "summary": "Update a company benefit",
        "tags": [
          "Benefits"
        ],
        "operationId": "update-company-benefit",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is the company benefit ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "title": "Company Benefit Request",
                    "type": "object",
                    "properties": {
                      "companyBenefitName": {
                        "description": "Name",
                        "type": "string"
                      },
                      "benefitVendorId": {
                        "description": "Benefit vendor ID",
                        "type": "string"
                      },
                      "benefitType": {
                        "description": "Benefit type",
                        "type": "string",
                        "enum": [
                          "health",
                          "dental",
                          "vision",
                          "retirement",
                          "hsa",
                          "flex",
                          "life",
                          "disability",
                          "reimbursement",
                          "supplemental",
                          "other"
                        ]
                      },
                      "deductionTypeId": {
                        "description": "Deduction type ID",
                        "type": "string"
                      },
                      "startDate": {
                        "description": "Benefit start date",
                        "type": "string",
                        "format": "date"
                      },
                      "endDate": {
                        "description": "Benefit end date",
                        "type": "string",
                        "format": "date"
                      },
                      "description": {
                        "description": "Description",
                        "type": "string"
                      },
                      "planUrl": {
                        "description": "Plan url",
                        "type": "string"
                      },
                      "ssoLoginUrl": {
                        "description": "SSO login url",
                        "type": "string"
                      },
                      "ssoLoginUrlLinkText": {
                        "description": "SSO login link text",
                        "type": "string"
                      },
                      "safeHarbor": {
                        "description": "Is a safe harbor",
                        "type": "boolean"
                      },
                      "meetAcaMin": {
                        "description": "Meets ACA minimum requirements",
                        "type": "boolean"
                      },
                      "reimbursementAmount": {
                        "description": "Reimbursement amount",
                        "type": "number"
                      },
                      "reimbursementFrequency": {
                        "description": "Reimbursement frequency",
                        "type": "string",
                        "enum": [
                          "pay period",
                          "month",
                          "quarter",
                          "year",
                          "one time",
                          null
                        ]
                      },
                      "reimbursementCurrencyCode": {
                        "description": "Reimbursement currency code",
                        "type": "string"
                      },
                      "minEssentialCoverage": {
                        "description": "Provides minimum essential coverage",
                        "type": "boolean"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "companyBenefitName",
                      "startDate",
                      "benefitType"
                    ]
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated company benefit.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Company Benefit",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name",
                      "type": "string"
                    },
                    "benefitVendorId": {
                      "description": "Benefit vendor ID",
                      "type": "string"
                    },
                    "benefitType": {
                      "description": "Benefit type",
                      "type": "string",
                      "enum": [
                        "health",
                        "dental",
                        "vision",
                        "retirement",
                        "hsa",
                        "flex",
                        "life",
                        "disability",
                        "reimbursement",
                        "supplemental",
                        "other"
                      ]
                    },
                    "deductionTypeId": {
                      "description": "Deduction type ID",
                      "type": "integer"
                    },
                    "startDate": {
                      "description": "Benefit start date",
                      "type": "string",
                      "format": "date"
                    },
                    "endDate": {
                      "description": "Benefit end date",
                      "type": "string",
                      "format": "date"
                    },
                    "description": {
                      "description": "Description",
                      "type": "string"
                    },
                    "planUrl": {
                      "description": "Plan url",
                      "type": "string"
                    },
                    "ssoLoginUrl": {
                      "description": "SSO login url",
                      "type": "string"
                    },
                    "ssoLoginUrlLinkText": {
                      "description": "SSO login link text",
                      "type": "string"
                    },
                    "safeHarbor": {
                      "description": "Is a safe harbor",
                      "type": "string",
                      "enum": [
                        "yes",
                        "no",
                        null
                      ]
                    },
                    "meetAcaMin": {
                      "description": "Meets ACA minimum requirements",
                      "type": "string",
                      "enum": [
                        "yes",
                        "no",
                        null
                      ]
                    },
                    "reimbursementAmount": {
                      "description": "Reimbursement amount",
                      "type": "number"
                    },
                    "reimbursementFrequency": {
                      "description": "Reimbursement frequency",
                      "type": "string",
                      "enum": [
                        "pay period",
                        "month",
                        "quarter",
                        "year",
                        "one time",
                        null
                      ]
                    },
                    "minEssentialCoverage": {
                      "description": "Provides minimum essential coverage",
                      "type": "string",
                      "enum": [
                        "yes",
                        "no",
                        null
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "PUT",
              "uri": "/benefit/company_benefit/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "HE: Update a Company Benefit"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete a company benefit",
        "summary": "Delete a company benefit",
        "tags": [
          "Benefits"
        ],
        "operationId": "delete-company-benefit",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is the company benefit ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted company benefit."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "DELETE",
              "uri": "/benefit/company_benefit/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "HE: Delete a Company Benefit"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1_2/benefit/company_benefit/{id}": {
      "post": {
        "description": "Update a company benefit",
        "summary": "Update a company benefit",
        "tags": [
          "Benefits"
        ],
        "operationId": "update-company-benefit-properties",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is the company benefit ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Company Benefit Update Request",
                "type": "object",
                "properties": {
                  "properties": {
                    "description": "Property",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "enum": [
                            "endYmd",
                            "url",
                            "ssoLoginPrompt",
                            "ssoLoginUrl",
                            "externalId"
                          ]
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful update will return a 204 - No content response."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/benefit/company_benefit/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "HE: Update a Company Benefit"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/benefit/company_benefit/type": {
      "get": {
        "description": "Get a list of company benefit types",
        "summary": "Get a list of company benefit types",
        "tags": [
          "Benefits"
        ],
        "operationId": "get-company-benefit-types",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of company benefit types.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "title": "Company Benefit Type",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "The name of the company benefit plan.",
                        "type": "string"
                      },
                      "slug": {
                        "description": "The unique identifier for the company benefit plan.",
                        "type": "string"
                      },
                      "canBeAcaPlan": {
                        "description": "Can the company benefit plan be an ACA plan.",
                        "type": "boolean"
                      },
                      "canCoExistEnrollment": {
                        "description": "Can the company benefit plan co-exist with an enrollment plan.",
                        "type": "boolean"
                      },
                      "isReimbursementPlan": {
                        "description": "Is the company benefit plan a reimbursement plan.",
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/benefit/company_benefit/type",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "HE: Get a list of Company Benefit Types"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/benefit/employee_benefit": {
      "get": {
        "description": "Get a list of employee benefits",
        "summary": "Get a list of employee benefits",
        "tags": [
          "Benefits"
        ],
        "operationId": "get-employee-benefit",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Employee Benefit Filters",
                "type": "object",
                "properties": {
                  "filters": {
                    "type": "object",
                    "description": "At least one filter is required",
                    "properties": {
                      "employeeId": {
                        "description": "Employee Id",
                        "type": "integer"
                      },
                      "companyBenefitId": {
                        "description": "Company Benefit Id",
                        "type": "integer"
                      },
                      "enrollmentStatusEffectiveDate": {
                        "description": "Enrollment Status Effective Date",
                        "type": "string",
                        "format": "date"
                      }
                    }
                  }
                }
              }
            }
          },
          "description": "Employee Benefit Filters"
        },
        "responses": {
          "200": {
            "description": "List of employee benefits.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "title": "Employee Benefit",
                    "type": "object",
                    "properties": {
                      "employeeId": {
                        "description": "Employee ID",
                        "type": "integer"
                      },
                      "companyBenefitId": {
                        "description": "Company benefit ID",
                        "type": "integer"
                      },
                      "companyBenefitName": {
                        "description": "Company benefit name",
                        "type": "string"
                      },
                      "coverageLevel": {
                        "description": "Coverage level",
                        "type": "string"
                      },
                      "deductionEndDate": {
                        "description": "Deduction end date",
                        "type": "string",
                        "format": "date"
                      },
                      "deductionStartDate": {
                        "description": "Deduction start date",
                        "type": "string",
                        "format": "date"
                      },
                      "enrollmentStatus": {
                        "description": "Enrollment status",
                        "type": "string",
                        "enum": [
                          "Eligible",
                          "Enrolled",
                          "Waived",
                          "Withdrawn",
                          "Terminated",
                          "Ineligible"
                        ]
                      },
                      "effectiveDate": {
                        "description": "Enrollment status effective date",
                        "type": "string",
                        "format": "date"
                      },
                      "currencyCode": {
                        "description": "Currency code",
                        "type": "string"
                      },
                      "employeeAmount": {
                        "description": "Employee amount",
                        "type": "number"
                      },
                      "employeeAmountType": {
                        "description": "Employee amount type",
                        "type": "string"
                      },
                      "employeePercentBasedOn": {
                        "description": "Employee percent based on",
                        "type": "string"
                      },
                      "employeeCapAmount": {
                        "description": "Employee cap amount",
                        "type": "number"
                      },
                      "employeeCapAmountType": {
                        "description": "Employee cap amount type",
                        "type": "string"
                      },
                      "employeeAnnualMax": {
                        "description": "Employee annual max",
                        "type": "number"
                      },
                      "companyAmount": {
                        "description": "Company amount",
                        "type": "number"
                      },
                      "companyAmountType": {
                        "description": "Company amount type",
                        "type": "string"
                      },
                      "companyPercentBasedOn": {
                        "description": "Company percent based on",
                        "type": "string"
                      },
                      "companyCapAmount": {
                        "description": "Company cap amount",
                        "type": "number"
                      },
                      "companyCapAmountType": {
                        "description": "Company cap amount type",
                        "type": "string"
                      },
                      "companyAnnualMax": {
                        "description": "Company annual max",
                        "type": "number"
                      },
                      "benefitPlanCoverageId": {
                        "description": "Benefit Plan Coverage ID",
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/benefit/employee_benefit",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "HE: Get a list of Employee Benefits"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Add an employee benefit",
        "summary": "Add an employee benefit",
        "tags": [
          "Benefits"
        ],
        "operationId": "post-employee-benefit",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "title": "Employee Benefit",
                    "type": "object",
                    "properties": {
                      "employeeId": {
                        "description": "Employee ID",
                        "type": "integer"
                      },
                      "companyBenefitId": {
                        "description": "Company benefit ID",
                        "type": "integer"
                      },
                      "companyBenefitName": {
                        "description": "Company benefit name",
                        "type": "string"
                      },
                      "coverageLevel": {
                        "description": "Coverage level",
                        "type": "string"
                      },
                      "deductionEndDate": {
                        "description": "Deduction end date",
                        "type": "string",
                        "format": "date"
                      },
                      "deductionStartDate": {
                        "description": "Deduction start date",
                        "type": "string",
                        "format": "date"
                      },
                      "enrollmentStatus": {
                        "description": "Enrollment status",
                        "type": "string",
                        "enum": [
                          "Eligible",
                          "Enrolled",
                          "Waived",
                          "Withdrawn",
                          "Terminated",
                          "Ineligible"
                        ]
                      },
                      "effectiveDate": {
                        "description": "Enrollment status effective date",
                        "type": "string",
                        "format": "date"
                      },
                      "currencyCode": {
                        "description": "Currency code",
                        "type": "string"
                      },
                      "employeeAmount": {
                        "description": "Employee amount",
                        "type": "number"
                      },
                      "employeeAmountType": {
                        "description": "Employee amount type",
                        "type": "string"
                      },
                      "employeePercentBasedOn": {
                        "description": "Employee percent based on",
                        "type": "string"
                      },
                      "employeeCapAmount": {
                        "description": "Employee cap amount",
                        "type": "number"
                      },
                      "employeeCapAmountType": {
                        "description": "Employee cap amount type",
                        "type": "string"
                      },
                      "employeeAnnualMax": {
                        "description": "Employee annual max",
                        "type": "number"
                      },
                      "companyAmount": {
                        "description": "Company amount",
                        "type": "number"
                      },
                      "companyAmountType": {
                        "description": "Company amount type",
                        "type": "string"
                      },
                      "companyPercentBasedOn": {
                        "description": "Company percent based on",
                        "type": "string"
                      },
                      "companyCapAmount": {
                        "description": "Company cap amount",
                        "type": "number"
                      },
                      "companyCapAmountType": {
                        "description": "Company cap amount type",
                        "type": "string"
                      },
                      "companyAnnualMax": {
                        "description": "Company annual max",
                        "type": "number"
                      },
                      "benefitPlanCoverageId": {
                        "description": "Benefit Plan Coverage ID",
                        "type": "number"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "employeeId",
                      "companyBenefitId",
                      "enrollmentStatus",
                      "effectiveDate",
                      "companyBenefitName",
                      "startDate",
                      "benefitType"
                    ]
                  }
                ]
              }
            }
          },
          "description": "Employee Benefit",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Employee benefit created"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/benefit/employee_benefit",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "HE: Add an Employee Benefit"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/benefitcoverages": {
      "get": {
        "description": "Get benefit coverages",
        "summary": "Get benefit coverages",
        "tags": [
          "Benefits"
        ],
        "operationId": "get-benefit-coverages",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/benefitcoverages",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employeedependents/{id}": {
      "get": {
        "description": "Get employee dependent",
        "summary": "Get employee dependent",
        "tags": [
          "Benefits"
        ],
        "operationId": "get-employee-dependent",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is the employee dependent ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/employeedependents/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "This API allows you to change the information for a given dependent ID.",
        "summary": "Update an employee dependent",
        "tags": [
          "Benefits"
        ],
        "operationId": "update-employee-dependent",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is the employee dependent ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Employee Dependent",
                "type": "object",
                "properties": {
                  "employeeId": {
                    "description": "",
                    "type": "string"
                  },
                  "firstName": {
                    "description": "",
                    "type": "string"
                  },
                  "middleName": {
                    "description": "",
                    "type": "string"
                  },
                  "lastName": {
                    "description": "",
                    "type": "string"
                  },
                  "relationship": {
                    "description": "",
                    "type": "string"
                  },
                  "gender": {
                    "description": "",
                    "type": "string"
                  },
                  "ssn": {
                    "description": "",
                    "type": "string"
                  },
                  "dateOfBirth": {
                    "description": "",
                    "type": "string"
                  },
                  "addressLine1": {
                    "description": "",
                    "type": "string"
                  },
                  "addressLine2": {
                    "description": "",
                    "type": "string"
                  },
                  "city": {
                    "description": "",
                    "type": "string"
                  },
                  "state": {
                    "description": "",
                    "type": "string"
                  },
                  "zipCode": {
                    "description": "",
                    "type": "string"
                  },
                  "homePhone": {
                    "description": "",
                    "type": "string"
                  },
                  "country": {
                    "description": "",
                    "type": "string"
                  },
                  "isUsCitizen": {
                    "description": "",
                    "type": "string"
                  },
                  "isStudent": {
                    "description": "",
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Dependent updated"
          },
          "400": {
            "description": "if the posted JSON is invalid"
          },
          "403": {
            "description": "if the current user doesn't have access to change the dependent in this way."
          },
          "500": {
            "description": "Server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "PUT",
              "uri": "/employeedependents/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Content-Type": "application/json"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off: Add a Time Off Request",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employeedependents": {
      "get": {
        "description": "Get all employee dependents",
        "summary": "Get all employee dependents",
        "tags": [
          "Benefits"
        ],
        "operationId": "get-employee-dependents",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          },
          {
            "name": "employeeid",
            "in": "query",
            "required": true,
            "description": "{employeeid} is the employee ID. Supplying this ID limits the response to the specific employee.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/employeedependents",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Adds an employee dependent",
        "summary": "Add an employee dependent",
        "tags": [
          "Benefits"
        ],
        "operationId": "add-employee-dependent",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Employee Dependent",
                "type": "object",
                "properties": {
                  "employeeId": {
                    "description": "",
                    "type": "string"
                  },
                  "firstName": {
                    "description": "",
                    "type": "string"
                  },
                  "middleName": {
                    "description": "",
                    "type": "string"
                  },
                  "lastName": {
                    "description": "",
                    "type": "string"
                  },
                  "relationship": {
                    "description": "",
                    "type": "string"
                  },
                  "gender": {
                    "description": "",
                    "type": "string"
                  },
                  "ssn": {
                    "description": "",
                    "type": "string"
                  },
                  "dateOfBirth": {
                    "description": "",
                    "type": "string"
                  },
                  "addressLine1": {
                    "description": "",
                    "type": "string"
                  },
                  "addressLine2": {
                    "description": "",
                    "type": "string"
                  },
                  "city": {
                    "description": "",
                    "type": "string"
                  },
                  "state": {
                    "description": "",
                    "type": "string"
                  },
                  "zipCode": {
                    "description": "",
                    "type": "string"
                  },
                  "homePhone": {
                    "description": "",
                    "type": "string"
                  },
                  "country": {
                    "description": "",
                    "type": "string"
                  },
                  "isUsCitizen": {
                    "description": "",
                    "type": "string"
                  },
                  "isStudent": {
                    "description": "",
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Dependent added"
          },
          "400": {
            "description": "if the posted JSON is invalid"
          },
          "403": {
            "description": "if the current user doesn't have access to add the dependent."
          },
          "500": {
            "description": "Server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "PUT",
              "uri": "employeedependents",
              "headers": {
                "Authorization": "Basic {{apiKey}}",
                "Content-Type": "application/json"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off: Add a Time Off Request",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/benefitplans": {
      "get": {
        "description": "Get benefit plans",
        "summary": "Get benefit plans",
        "tags": [
          "Benefits"
        ],
        "operationId": "get-benefit-plans",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/benefitplans/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/benefitplancoverages": {
      "get": {
        "description": "Get benefit plan coverages",
        "summary": "Get benefit plan coverages",
        "tags": [
          "Benefits"
        ],
        "operationId": "get-benefit-plan-coverages",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/benefitplancoverages/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/benefitgroups": {
      "get": {
        "description": "Get benefit groups",
        "summary": "Get benefit groups",
        "tags": [
          "Benefits"
        ],
        "operationId": "get-benefit-groups",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/benefitgroups",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/benefitgroupemployees": {
      "get": {
        "description": "Get benefit group employees",
        "summary": "Get benefit group employees",
        "tags": [
          "Benefits"
        ],
        "operationId": "get-benefit-group-employees",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/benefitgroupemployees",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Add a benefit group employee",
        "summary": "Add a benefit group employee",
        "tags": [
          "Benefits"
        ],
        "operationId": "add-benefit-group-employee",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Benefit Group Employee",
                "type": "object",
                "properties": {
                  "benefitGroupId": {
                    "description": "",
                    "type": "string"
                  },
                  "employeeId": {
                    "description": "",
                    "type": "string"
                  },
                  "startDate": {
                    "description": "",
                    "type": "string"
                  },
                  "endDate": {
                    "description": "",
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Benefit group employee added"
          },
          "400": {
            "description": "if the posted JSON is invalid"
          },
          "403": {
            "description": "if the current user doesn't have access to add the benefit group employee."
          },
          "500": {
            "description": "Server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/benefitgroupemployees",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/benefitgroupplans": {
      "get": {
        "description": "Get benefit group plans",
        "summary": "Get benefit group plans",
        "tags": [
          "Benefits"
        ],
        "operationId": "get-benefit-group-plans",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/benefitgroupplans",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/benefitgroupplancosts": {
      "get": {
        "description": "Get benefit group plan costs",
        "summary": "Get benefit group plan costs",
        "tags": [
          "Benefits"
        ],
        "operationId": "get-benefit-group-plan-costs",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/benefitgroupplancosts",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employee/deductions/{id}": {
      "get": {
        "description": "Get employee deductions by benefit plan",
        "summary": "Get employee deductions by benefit plan",
        "tags": [
          "Benefits"
        ],
        "operationId": "get-employee-deductions-by-plan",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is the benefit plan ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/employee/deductions/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employee/plans/{id}": {
      "get": {
        "description": "Get benefit plan deductions by employee",
        "summary": "Get benefit plan deductions by employee",
        "tags": [
          "Benefits"
        ],
        "operationId": "get-plan-deductions-by-employee",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is the employee ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/employee/plans/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/payroll/deductions/{id}": {
      "get": {
        "description": "Get benefit deductions for employee",
        "summary": "Get benefit deductions for employee",
        "tags": [
          "Benefits"
        ],
        "operationId": "get-payroll-deductions-for-employee",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "This endpoint can produce either JSON or XML.",
            "schema": {
              "type": "string",
              "enum": [
                "application/xml",
                "application/json"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is the employee ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/payroll/deductions/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employee_withholding/{id}": {
      "get": {
        "description": "Get an employee's default withholdings",
        "summary": "Get an employee's default withholdings",
        "tags": [
          "Payroll"
        ],
        "operationId": "get-employee-withholdings",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is the employee.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response content will be a JSON document with the requested information."
          },
          "400": {
            "description": "Invalid employee ID is provided"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/employee_withholding/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Add an employee's default withholdings",
        "summary": "Add an employee's default withholdings",
        "tags": [
          "Payroll"
        ],
        "operationId": "add-employee-withholding",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is the employee id.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Employee Withholding",
                "type": "object",
                "properties": {
                  "fedWithholding": {
                    "description": "",
                    "type": "string"
                  },
                  "stateWithholding": {
                    "description": "",
                    "type": "string"
                  },
                  "localWithholding": {
                    "description": "",
                    "type": "string"
                  },
                  "additionalFed": {
                    "description": "",
                    "type": "string"
                  },
                  "additionalState": {
                    "description": "",
                    "type": "string"
                  },
                  "additionalLocal": {
                    "description": "",
                    "type": "string"
                  },
                  "taxState": {
                    "description": "",
                    "type": "string"
                  },
                  "taxLocal": {
                    "description": "",
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Withholding added"
          },
          "400": {
            "description": "if an invalid employee ID is provided, or the posted JSON is not valid."
          },
          "403": {
            "description": "if the current user doesn't have access to add employee withholdings information."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/employee_withholding/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Clear an employee's default withholdings",
        "summary": "Clear an employee's default withholdings",
        "tags": [
          "Payroll"
        ],
        "operationId": "clear-employee-withholding",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is the employee id.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response content will be a JSON success document."
          },
          "400": {
            "description": "Invalid employee ID is provided"
          },
          "403": {
            "description": "if the API user doesn't have access to edit the employee withholdings information."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "DELETE",
              "uri": "/employee_withholding/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employee_direct_deposit_accounts/{id}": {
      "get": {
        "description": "Get an employee's direct deposit information",
        "summary": "Get an employee's direct deposit information",
        "tags": [
          "Payroll"
        ],
        "operationId": "get-employee-deposit-accounts",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is the employee.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response content will be a JSON document with the requested information."
          },
          "400": {
            "description": "Invalid employee ID is provided"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/employee_direct_deposit_account/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Add an employee's direct deposit information",
        "summary": "Add an employee's direct deposit information",
        "tags": [
          "Payroll"
        ],
        "operationId": "add-employee-deposit",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is the employee id.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Employee Deposit",
                "type": "object",
                "properties": {
                  "accounts": {
                    "description": "",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "accountType": {
                          "type": "string"
                        },
                        "maskedAccountNumber": {
                          "type": "string"
                        },
                        "bankName": {
                          "type": "string"
                        },
                        "depositOrder": {
                          "type": "string"
                        },
                        "ruleType": {
                          "type": "string"
                        },
                        "ruleAmount": {
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The saved values for the employee's direct deposit declarations will be returned in JSON."
          },
          "400": {
            "description": "if an invalid employee ID is provided, or the posted JSON is not valid."
          },
          "403": {
            "description": "if the current user doesn't have access to update the employee's direct deposit declarations."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/employee_direct_deposit_account/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Clear an employee's direct deposit information",
        "summary": "Clear an employee's direct deposit information",
        "tags": [
          "Payroll"
        ],
        "operationId": "clear-employee-deposit",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is the employee ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response content will be a JSON success document."
          },
          "400": {
            "description": "Invalid employee ID is provided"
          },
          "403": {
            "description": "if the API user doesn't have access to edit the employee's direct deposit declarations."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "DELETE",
              "uri": "/employee_direct_deposit_account/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employee_unpaid_pay_stubs/{id}": {
      "get": {
        "description": "Get an employee's unpaid paystubs",
        "summary": "Get an employee's unpaid paystubs",
        "tags": [
          "Payroll"
        ],
        "operationId": "get-employee-unpaid-paystubs",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is the employee.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/employee_unpaid_pay_stubs/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Clear an employee's unpaid paystubs",
        "summary": "Clear an employee's unpaid paystubs",
        "tags": [
          "Payroll"
        ],
        "operationId": "clear-employee-unpaid-paystubs",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is the employee id.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unpaid paystub cleared"
          },
          "400": {
            "description": "Unauthorized",
            "headers": {
              "X-BambooHR-Message": {
                "description": "Human readable error to help when debugging, suitable for logging",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "X-BambooHR-Message": {
                "description": "Human readable error to help when debugging, suitable for logging",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "DELETE",
              "uri": "/employee_unpaid_pay_stubs/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employee_unpaid_pay_stubs": {
      "post": {
        "description": "Add an employee's unpaid paystubs",
        "summary": "Add an employee's unpaid paystubs",
        "tags": [
          "Payroll"
        ],
        "operationId": "add-employee-unpaid-paystubs",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Employee Unpaid Paystub",
                "type": "object",
                "properties": {
                  "employeeId": {
                    "description": "",
                    "type": "string"
                  },
                  "unpaidPeriods": {
                    "description": "",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "payDate": {
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Additionally, the saved values for the employee's unpaid pay stubs will be returned in JSON."
          },
          "400": {
            "description": "if an invalid employee ID is provided, or the posted JSON is not valid."
          },
          "403": {
            "description": "if the current user doesn't have access to add employee unpaid pay stub information."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/employee_unpaid_pay_stubs",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employee_pay_stub/{id}": {
      "get": {
        "description": "Get an employee's paystub",
        "summary": "Get an employee's paystub",
        "tags": [
          "Payroll"
        ],
        "operationId": "get-employee-paystub",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is the paystub (record) ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response content will be a JSON document with the requested information."
          },
          "400": {
            "description": "Invalid employee ID is provided"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/employee_pay_stub/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete an employee's paystub",
        "summary": "Delete an employee's paystub",
        "tags": [
          "Payroll"
        ],
        "operationId": "clear-employee-paystub",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is the paystub (record) ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response content will be a JSON success document."
          },
          "400": {
            "description": "Invalid employee ID is provided"
          },
          "403": {
            "description": "if the API user doesn't have access to edit the employee unpaid paystub information."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "DELETE",
              "uri": "/employee_pay_stub/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/employee_pay_stub": {
      "post": {
        "description": "Add an employee's paystub",
        "summary": "Add an employee's paystub",
        "tags": [
          "Payroll"
        ],
        "operationId": "add-employee-paystub",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Employee Paystub",
                "type": "object",
                "properties": {
                  "employeeId": {
                    "description": "",
                    "type": "string"
                  },
                  "externalRecordId": {
                    "description": "",
                    "type": "string"
                  },
                  "payPeriodFrom": {
                    "description": "",
                    "type": "string"
                  },
                  "payPeriodTo": {
                    "description": "",
                    "type": "string"
                  },
                  "payDate": {
                    "description": "",
                    "type": "string"
                  },
                  "payorName": {
                    "description": "",
                    "type": "string"
                  },
                  "payorAdd1": {
                    "description": "",
                    "type": "string"
                  },
                  "payorAdd2": {
                    "description": "",
                    "type": "string"
                  },
                  "payorCity": {
                    "description": "",
                    "type": "string"
                  },
                  "payorState": {
                    "description": "",
                    "type": "string"
                  },
                  "payorZip": {
                    "description": "",
                    "type": "string"
                  },
                  "payeeName": {
                    "description": "",
                    "type": "string"
                  },
                  "currencyCode": {
                    "description": "",
                    "type": "string"
                  },
                  "net": {
                    "description": "",
                    "type": "string"
                  },
                  "gross": {
                    "description": "",
                    "type": "string"
                  },
                  "totalTaxes": {
                    "description": "",
                    "type": "string"
                  },
                  "totalDeductions": {
                    "description": "",
                    "type": "string"
                  },
                  "ytdNet": {
                    "description": "",
                    "type": "string"
                  },
                  "ytdGross": {
                    "description": "",
                    "type": "string"
                  },
                  "ytdTaxes": {
                    "description": "",
                    "type": "string"
                  },
                  "ytdDeductions": {
                    "description": "",
                    "type": "string"
                  },
                  "fedWitholding": {
                    "description": "",
                    "type": "string"
                  },
                  "federalType": {
                    "description": "must be 2020_w4, pre_2020_w4, or null",
                    "type": "string",
                    "enum": [
                      "2020_w4",
                      "pre_2020_w4"
                    ]
                  },
                  "twoJobs": {
                    "description": "boolean value",
                    "type": "string"
                  },
                  "dependentsAmount": {
                    "description": "float value",
                    "type": "string"
                  },
                  "otherIncome": {
                    "description": "float value",
                    "type": "string"
                  },
                  "deductionsAmount": {
                    "description": "float value",
                    "type": "string"
                  },
                  "stateWithholding": {
                    "description": "",
                    "type": "string"
                  },
                  "localWithholding": {
                    "description": "",
                    "type": "string"
                  },
                  "additionalFed": {
                    "description": "",
                    "type": "string"
                  },
                  "additionalState": {
                    "description": "",
                    "type": "string"
                  },
                  "additionalLocal": {
                    "description": "",
                    "type": "string"
                  },
                  "taxState": {
                    "description": "",
                    "type": "string"
                  },
                  "taxLocal": {
                    "description": "",
                    "type": "string"
                  },
                  "wages": {
                    "description": "",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "externalWageId": {
                          "type": "string"
                        },
                        "wageDescription": {
                          "type": "string"
                        },
                        "wageAmount": {
                          "type": "string"
                        },
                        "ytdWageAmount": {
                          "type": "string"
                        },
                        "wageRate": {
                          "type": "string"
                        },
                        "hours": {
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "taxes": {
                    "description": "",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "externalTaxId": {
                          "type": "string"
                        },
                        "taxDescription": {
                          "type": "string"
                        },
                        "taxAmount": {
                          "type": "string"
                        },
                        "ytdTaxAmount": {
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "deductions": {
                    "description": "",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "externalDeductionId": {
                          "type": "string"
                        },
                        "deductionDescription": {
                          "type": "string"
                        },
                        "deductionAmount": {
                          "type": "string"
                        },
                        "ytdDeductionAmount": {
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "deposits": {
                    "description": "",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "depositOrder": {
                          "type": "string"
                        },
                        "depositAmount": {
                          "type": "string"
                        },
                        "maskedAccountNumber": {
                          "type": "string"
                        },
                        "accountType": {
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Additionally, the saved values for the employee's paystub record will be returned in JSON along with its record ID."
          },
          "400": {
            "description": "if an invalid employee ID is provided, or the posted JSON is not valid."
          },
          "403": {
            "description": "if the current user doesn't have access to add an employee pay stub."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/employee_pay_stub",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/timetracking/record/{id}": {
      "get": {
        "description": "Get an hour record",
        "summary": "Get an hour record",
        "tags": [
          "Hours"
        ],
        "operationId": "get-hour-record",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is the time tracking ID used to originally create the record.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response content will be a JSON document with the requested information."
          },
          "400": {
            "description": "Invalid or missing argument."
          },
          "500": {
            "description": "Server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/timetracking/record/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/timetracking/add": {
      "post": {
        "description": "Add an hour record",
        "summary": "Add an hour record",
        "tags": [
          "Hours"
        ],
        "operationId": "add-hour-record",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Time Tracking Record",
                "type": "object",
                "properties": {
                  "timeTrackingId": {
                    "description": "A unique identifier for the record. Use this ID to adjust or delete these hours. It can be any ID you use to track the record up to 36 characters in length. (i.e. UUID).",
                    "type": "string",
                    "maximum": 36
                  },
                  "employeeId": {
                    "description": "The ID of the employee.",
                    "type": "integer"
                  },
                  "divisionId": {
                    "description": "[Optional] The ID of the division for the employee.",
                    "type": "integer"
                  },
                  "departmentId": {
                    "description": "[Optional] The ID of the department for the employee.",
                    "type": "integer"
                  },
                  "jobTitleId": {
                    "description": "[Optional] The ID of the job title for the employee.",
                    "type": "integer"
                  },
                  "payCode": {
                    "description": "[Optional] Only necessary if the payroll provider requires a pay code",
                    "type": "string",
                    "maximum": 50
                  },
                  "dateHoursWorked": {
                    "description": "The date the hours were worked. Please use the ISO-8601 date format YYYY-MM-DD.",
                    "type": "string"
                  },
                  "payRate": {
                    "description": "[Optional] The rate of pay. e.g. $15.00/hour should use 15.00 here. Only necessary if the payroll provider requires a pay rate.",
                    "type": "number",
                    "format": "float"
                  },
                  "rateType": {
                    "description": "The type of hours - regular or overtime. Please use either \"REG\" or \"OT\" here.",
                    "type": "string"
                  },
                  "hoursWorked": {
                    "description": "The number of hours worked.",
                    "type": "number",
                    "format": "float"
                  },
                  "jobCode": {
                    "description": "[Optional] A job code.",
                    "type": "integer"
                  },
                  "jobData": {
                    "description": "[Optional] A list of up to four 20 characters max job numbers in comma delimited format with no spaces.",
                    "type": "string"
                  }
                },
                "required": [
                  "timeTrackingId",
                  "employeeId",
                  "dateHoursWorked",
                  "rateType",
                  "hoursWorked"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The time tracking ID will be returned in JSON."
          },
          "400": {
            "description": "If any required field is missing, any of the IDs are invalid, or the posted JSON is not valid."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/timetracking/add",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/timetracking/adjust": {
      "put": {
        "description": "Edit an hour record",
        "summary": "Edit an hour record",
        "tags": [
          "Hours"
        ],
        "operationId": "edit-hour-record",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "timeTrackingId": {
                    "type": "string",
                    "description": "The time tracking id is the id that was used to track the record up to 36 characters in length. (i.e. UUID)."
                  },
                  "hoursWorked": {
                    "type": "number",
                    "format": "float",
                    "description": "The updated number of hours worked. e.g. if Employee A worked 8.0 hours originally and decided they only worked 6.0, please send 6.0 here not -2.0."
                  }
                },
                "required": [
                  "timeTrackingId",
                  "hoursWorked"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The time tracking ID will be returned in JSON."
          },
          "400": {
            "description": "if any required field is missing, any of the IDs are invalid, or the posted JSON is not valid"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "PUT",
              "uri": "/timetracking/adjust",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/timetracking/delete/{id}": {
      "delete": {
        "description": "Delete an hour record",
        "summary": "Delete an hour record",
        "tags": [
          "Hours"
        ],
        "operationId": "delete-hour-record",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The time tracking id is the id that was used to track the record up to 36 characters in length. (i.e. UUID).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record removed."
          },
          "400": {
            "description": "If the time tracking ID cannot be found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "DELETE",
              "uri": "/timetracking/delete/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/timetracking/record": {
      "post": {
        "description": "Bulk add/edit hour records",
        "summary": "Bulk add/edit hour records",
        "tags": [
          "Hours"
        ],
        "operationId": "bulk-record-hours",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Time Tracking Record Bulk",
                "type": "array",
                "items": {
                  "title": "Time Tracking Record",
                  "type": "object",
                  "properties": {
                    "timeTrackingId": {
                      "description": "A unique identifier for the record. Use this ID to adjust or delete these hours. It can be any ID you use to track the record up to 36 characters in length. (i.e. UUID).",
                      "type": "string",
                      "maximum": 36
                    },
                    "employeeId": {
                      "description": "The ID of the employee.",
                      "type": "integer"
                    },
                    "divisionId": {
                      "description": "[Optional] The ID of the division for the employee.",
                      "type": "integer"
                    },
                    "departmentId": {
                      "description": "[Optional] The ID of the department for the employee.",
                      "type": "integer"
                    },
                    "jobTitleId": {
                      "description": "[Optional] The ID of the job title for the employee.",
                      "type": "integer"
                    },
                    "payCode": {
                      "description": "[Optional] Only necessary if the payroll provider requires a pay code",
                      "type": "string",
                      "maximum": 50
                    },
                    "dateHoursWorked": {
                      "description": "The date the hours were worked. Please use the ISO-8601 date format YYYY-MM-DD.",
                      "type": "string"
                    },
                    "payRate": {
                      "description": "[Optional] The rate of pay. e.g. $15.00/hour should use 15.00 here. Only necessary if the payroll provider requires a pay rate.",
                      "type": "number",
                      "format": "float"
                    },
                    "rateType": {
                      "description": "The type of hours - regular or overtime. Please use either \"REG\" or \"OT\" here.",
                      "type": "string"
                    },
                    "hoursWorked": {
                      "description": "The number of hours worked.",
                      "type": "number",
                      "format": "float"
                    },
                    "jobCode": {
                      "description": "[Optional] A job code.",
                      "type": "integer"
                    },
                    "jobData": {
                      "description": "[Optional] A list of up to four 20 characters max job numbers in comma delimited format with no spaces.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "timeTrackingId",
                    "employeeId",
                    "dateHoursWorked",
                    "rateType",
                    "hoursWorked"
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "An array of objects with success as true or false depending on the success of each time tracking object in the request along with the successful IDs or the reason of the error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/timetracking/record",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Off:  Get a list of Who's Out",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_tracking/timesheets/approve": {
      "post": {
        "description": "Approve employee timesheets",
        "summary": "Approve employee timesheets",
        "tags": [
          "Time Tracking"
        ],
        "operationId": "approve-employee-timesheets",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "lastChanged",
                  "timesheets"
                ],
                "properties": {
                  "lastChanged": {
                    "type": "integer",
                    "example": 1624485787,
                    "description": "UNIX timestamp for last change to timesheet"
                  },
                  "timesheets": {
                    "type": "array",
                    "description": "Array of timesheet objects that contain the timesheet id",
                    "items": {
                      "type": "object",
                      "properties": {
                        "timesheetId": {
                          "type": "integer",
                          "example": 100,
                          "description": "The id of the timesheet"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful approval will return a 204 - No content response."
          },
          "403": {
            "description": "Missing time tracking tool or permissions to approve."
          },
          "404": {
            "description": "Invalid timesheet id."
          },
          "409": {
            "description": "Stale data or employee clocked in."
          },
          "412": {
            "description": "Invalid company configuration or timezone."
          },
          "500": {
            "description": "Server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/time_tracking/timesheets/approve",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Tracking: Approve timesheets",
            "x-testDescription": "Approve timesheets"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_tracking/timesheets/clock_out_and_approve": {
      "post": {
        "description": "Approve timesheets for employees that are currently clocked in",
        "summary": "Approve timesheets for employees that are currently clocked in",
        "tags": [
          "Time Tracking"
        ],
        "operationId": "clock-out-and-approve-employee-timesheets",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "clockOuts": {
                    "type": "array",
                    "description": "Array of clock out information",
                    "items": {
                      "type": "object",
                      "required": [
                        "timesheetId",
                        "end",
                        "date"
                      ],
                      "properties": {
                        "timesheetId": {
                          "type": "integer",
                          "example": 100,
                          "description": "The id of the timesheet"
                        },
                        "end": {
                          "type": "string",
                          "example": "17:30",
                          "description": "24 hour format (hh:mm) for clock out time"
                        },
                        "date": {
                          "type": "string",
                          "example": "2021-04-23",
                          "description": "Date of the clock out. Date string format (YYYY-MM-DD)"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful approval will return a 204 - No content response."
          },
          "400": {
            "description": "Invalid or missing argument"
          },
          "403": {
            "description": "Missing time tracking tool or permissions to approve."
          },
          "404": {
            "description": "Invalid timesheet id."
          },
          "409": {
            "description": "Stale data or employee clocked in."
          },
          "412": {
            "description": "Invalid company configuration or timezone."
          },
          "500": {
            "description": "Server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/time_tracking/timesheets/clock_out_and_approve",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Tracking: Clock out and approve timesheets",
            "x-testDescription": "Clock out and approve timesheets"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_tracking/timesheets": {
      "get": {
        "description": "Get timesheets by ids",
        "summary": "Get timesheets by ids",
        "tags": [
          "Time Tracking"
        ],
        "operationId": "get-timesheets",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "timesheets"
                ],
                "properties": {
                  "timesheets": {
                    "type": "string",
                    "example": "10, 11, 12",
                    "description": "Comma separated list of timesheet ids"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response content will be JSON with the requested information."
          },
          "400": {
            "description": "No timesheet ids given."
          },
          "403": {
            "description": "Missing permissions to view all or some of the timesheets."
          },
          "404": {
            "description": "Timesheet not found."
          },
          "412": {
            "description": "Invalid company configuration or timezone."
          },
          "500": {
            "description": "Server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/time_tracking/timesheets",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Tracking: Get timesheets",
            "x-testDescription": "Get timesheets"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_tracking/clock_in/{employeeId}": {
      "post": {
        "description": "Clock in (employee id optional)",
        "summary": "Clock in (employee id optional)",
        "tags": [
          "Time Tracking"
        ],
        "operationId": "clock-in",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "{employeeId} is id of the employee clocking out",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "start": {
                    "type": "string",
                    "description": "The start time for the clock in. In 24 hour format HH:MM",
                    "example": "13:00"
                  },
                  "timezone": {
                    "type": "string",
                    "example": "America/Denver",
                    "description": "The timezone associated with the clock in."
                  },
                  "note": {
                    "type": "string",
                    "example": "Back from lunch.",
                    "description": "The note associated with the clock in"
                  },
                  "projectId": {
                    "type": "integer",
                    "example": "3",
                    "description": "The id of the project associated with the clock in"
                  },
                  "taskId": {
                    "type": "integer",
                    "example": "2",
                    "description": "The id of the task associated with the clock in"
                  },
                  "clockInLocation": {
                    "type": "object",
                    "properties": {
                      "latitude": {
                        "type": "number",
                        "format": "double",
                        "example": 40.332729
                      },
                      "longitude": {
                        "type": "number",
                        "format": "double",
                        "example": -111.729235
                      },
                      "accuracy": {
                        "type": "integer",
                        "example": 2,
                        "description": "Accuracy in meters of the clock in location"
                      },
                      "address": {
                        "type": "string",
                        "example": "123 Main"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The response content will be JSON with the clock in information."
          },
          "400": {
            "description": "Invalid information passed in."
          },
          "403": {
            "description": "Most likely because of missing permissions to clock in."
          },
          "404": {
            "description": "Id not found."
          },
          "409": {
            "description": "Employee already clocked in or invalid timesheet type."
          },
          "412": {
            "description": "Invalid company configuration or timezone."
          },
          "500": {
            "description": "Server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/time_tracking/clock_in/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Tracking: Clock in",
            "x-testDescription": "Clock in"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_tracking/clock_out/{employeeId}": {
      "post": {
        "description": "Clock out (employee id optional)",
        "summary": "Clock out (employee id optional)",
        "tags": [
          "Time Tracking"
        ],
        "operationId": "clock-out",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "{employeeId} is id of the employee clocking out",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "clockOutLocation": {
                    "type": "object",
                    "properties": {
                      "latitude": {
                        "type": "number",
                        "format": "double",
                        "example": 40.332729
                      },
                      "longitude": {
                        "type": "number",
                        "format": "double",
                        "example": -111.729235
                      },
                      "accuracy": {
                        "type": "integer",
                        "example": 2,
                        "description": "Accuracy in meters of the clock out location"
                      },
                      "address": {
                        "type": "string",
                        "example": "123 Main"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The response content will be JSON with the clock out information."
          },
          "400": {
            "description": "Invalid information passed in."
          },
          "403": {
            "description": "Most likely because of missing permissions to clock out."
          },
          "404": {
            "description": "Id not found."
          },
          "409": {
            "description": "Employee already clocked in or invalid timesheet type."
          },
          "412": {
            "description": "Invalid company configuration or timezone."
          },
          "500": {
            "description": "Server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/time_tracking/clock_out/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Tracking: Clock out",
            "x-testDescription": "Clock out"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_tracking/daily_entries": {
      "post": {
        "description": "Store daily entries",
        "summary": "Store daily entries",
        "tags": [
          "Time Tracking"
        ],
        "operationId": "store-daily-entries",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "entries": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "employeeId": {
                          "type": "integer",
                          "example": 40342,
                          "description": "employee id for the time entry"
                        },
                        "date": {
                          "type": "string",
                          "example": "2021-06-25",
                          "description": "date of the time entry"
                        },
                        "hours": {
                          "type": "number",
                          "example": 7.5,
                          "description": "The number of hours for the time entry.",
                          "format": "float"
                        },
                        "dailyEntryId": {
                          "type": "integer",
                          "example": 1,
                          "description": "The id of the daily entry if updating an existing entry"
                        },
                        "projectId": {
                          "type": "integer",
                          "example": 1,
                          "description": "The id of the project associated with the time entry"
                        },
                        "taskId": {
                          "type": "integer",
                          "example": 2,
                          "description": "The id of the task associated with the time entry"
                        },
                        "note": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The response content will be JSON with the daily entry information."
          },
          "400": {
            "description": "Invalid information passed in."
          },
          "403": {
            "description": "Missing permissions."
          },
          "404": {
            "description": "Id not found."
          },
          "409": {
            "description": "Invalid timesheet type."
          },
          "412": {
            "description": "Invalid company configuration or timezone."
          },
          "500": {
            "description": "Server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/time_tracking/daily_entries",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Tracking: Store daily entries",
            "x-testDescription": "Store daily entries"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_tracking/clock_entries": {
      "post": {
        "description": "Store clock entries",
        "summary": "Store clock entries",
        "tags": [
          "Time Tracking"
        ],
        "operationId": "store-clock-entries",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "entries": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "employeeId": {
                          "type": "integer",
                          "example": 40342,
                          "description": "employee id for the time entry"
                        },
                        "date": {
                          "type": "string",
                          "example": "2021-06-25",
                          "description": "date of the time entry"
                        },
                        "start": {
                          "type": "string",
                          "example": "13:00",
                          "description": "24 hour format (hh:mm) for start time"
                        },
                        "end": {
                          "type": "string",
                          "example": "17:00",
                          "description": "24 hour format (hh:mm) for end time"
                        },
                        "clockEntryId": {
                          "type": "integer",
                          "example": 101,
                          "description": "id of existing time entry. used when updating time entry"
                        },
                        "projectId": {
                          "type": "integer",
                          "example": 1,
                          "description": "The id of the project associated with the time entry"
                        },
                        "taskId": {
                          "type": "integer",
                          "example": 2,
                          "description": "The id of the task associated with the time entry"
                        },
                        "note": {
                          "type": "string",
                          "example": "Note for time entry"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The response content will be JSON with the daily entry information."
          },
          "400": {
            "description": "Invalid information passed in."
          },
          "403": {
            "description": "Missing permissions."
          },
          "404": {
            "description": "Id not found."
          },
          "409": {
            "description": "Invalid timesheet type or overlapping time entries."
          },
          "412": {
            "description": "Invalid company configuration or timezone."
          },
          "500": {
            "description": "Server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/time_tracking/clock_entries",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Tracking: Store clock entries",
            "x-testDescription": "Store clock entries"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete clock entries",
        "summary": "Delete clock entries",
        "tags": [
          "Time Tracking"
        ],
        "operationId": "delete-clock-entries",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "clockEntryIds": {
                    "type": "array",
                    "example": [
                      10,
                      11,
                      12
                    ],
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful deletion will return a 204 - No content response."
          },
          "400": {
            "description": "Invalid information passed in."
          },
          "403": {
            "description": "Missing permissions or timesheet already approved."
          },
          "404": {
            "description": "Id not found."
          },
          "409": {
            "description": "If clock timesheet, may still be clocked in. Have to clock out first."
          },
          "412": {
            "description": "Invalid company configuration or timezone."
          },
          "500": {
            "description": "Server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "DELETE",
              "uri": "/time_tracking/clock_entries",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Tracking: Delete clock entries",
            "x-testDescription": "Delete clock entries"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_tracking/employee/{employeeId}/timesheet/{timesheetId}": {
      "get": {
        "description": "Get a timesheet for an employee",
        "summary": "Get a timesheet for an employee",
        "tags": [
          "Time Tracking"
        ],
        "operationId": "get-employee-timesheet",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "id of employee to whom the timesheet belongs.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timesheetId",
            "in": "path",
            "required": true,
            "description": "timesheetId is the id to whom the timesheet belongs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response content will be JSON with the timesheet information."
          },
          "400": {
            "description": "Invalid information passed in."
          },
          "403": {
            "description": "Missing permissions."
          },
          "404": {
            "description": "Id not found."
          },
          "412": {
            "description": "Invalid company configuration or timezone."
          },
          "500": {
            "description": "Server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/time_tracking/employee/{employeeId}/timesheet/{timesheetId}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Tracking: Get employee timesheet",
            "x-testDescription": "Get employee timesheet"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_tracking/employee/{employeeId}/daily_entries/{id}": {
      "get": {
        "description": "Get a daily entry",
        "summary": "Get a daily entry",
        "tags": [
          "Time Tracking"
        ],
        "operationId": "get-daily-entry",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "id of employee to whom the daily entry belongs.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "the id to whom the daily entry belongs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response content will be JSON with the daily entry information."
          },
          "400": {
            "description": "Invalid information passed in."
          },
          "403": {
            "description": "Missing permissions."
          },
          "404": {
            "description": "Id not found."
          },
          "412": {
            "description": "Invalid company configuration or timezone."
          },
          "500": {
            "description": "Server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/time_tracking/employee/{employeeId}/daily_entries/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Tracking: Get a daily entry",
            "x-testDescription": "Get a daily entry"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_tracking/employee/{employeeId}/clock_entries/{id}": {
      "get": {
        "description": "Get a clock entry",
        "summary": "Get a clock entry",
        "tags": [
          "Time Tracking"
        ],
        "operationId": "get-clock-entry",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "id of employee to whom the clock entry belongs.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "the id to whom the clock entry belongs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response content will be JSON with the daily entry information."
          },
          "403": {
            "description": "Missing permissions."
          },
          "404": {
            "description": "Id not found."
          },
          "500": {
            "description": "Server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/time_tracking/employee/{employeeId}/clock_entries/{id}",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Tracking: Get a clock entry",
            "x-testDescription": "Get a clock entry"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_tracking/employee/{employeeId}/is_clocked_in": {
      "get": {
        "description": "Is employee clocked in?",
        "summary": "Is employee clocked in?",
        "tags": [
          "Time Tracking"
        ],
        "operationId": "is-employee-clocked-in",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "id of employee to whom the clock entry belongs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response content will be JSON with the daily entry information."
          },
          "403": {
            "description": "Missing permissions."
          },
          "500": {
            "description": "Server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/time_tracking/employee/{employeeId}/is_clocked_in",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Tracking: Is employee clocked in?",
            "x-testDescription": "Is employee clocked in?"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_tracking/employee/{employeeId}/clock_out/datetime": {
      "post": {
        "description": "Clock out an employee at a specific time",
        "summary": "Clock out an employee at a specific time",
        "tags": [
          "Time Tracking"
        ],
        "operationId": "clock-out-employee-at-specific-time",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "id of the employee to whom the projects belong.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "datetime": {
                    "type": "string",
                    "example": "2020-12-16T17:28:00-05:00",
                    "description": "Date time for clock out in atom format. "
                  },
                  "timezone": {
                    "type": "string",
                    "example": "America/Denver",
                    "description": "Timezone of the time entry"
                  },
                  "employeeId": {
                    "type": "integer",
                    "example": 40342,
                    "description": "The employeeId for the time entry."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The response content will be JSON with the daily entry information."
          },
          "400": {
            "description": "Invalid information passed in."
          },
          "403": {
            "description": "Missing permissions."
          },
          "404": {
            "description": "Id not found."
          },
          "412": {
            "description": "Invalid company configuration or timezone."
          },
          "500": {
            "description": "Server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/time_tracking/employee/{employeeId}/clock_out/datetime",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Tracking: Clock out employee at specific time",
            "x-testDescription": "Clock out employee at specific time"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_tracking/employee/{employeeId}/clock_in/data": {
      "post": {
        "description": "Edit information on the currently clocked in entry",
        "summary": "Edit information on the currently clocked in entry",
        "tags": [
          "Time Tracking"
        ],
        "operationId": "clock-in-data",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "id of the employee to whom the projects belong.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "start": {
                    "type": "string",
                    "description": "The start time for the clock in. In 24 hour format HH:MM",
                    "example": "13:00"
                  },
                  "timezone": {
                    "type": "string",
                    "example": "America/Denver",
                    "description": "The timezone associated with the clock in."
                  },
                  "note": {
                    "type": "string",
                    "example": "Back from lunch.",
                    "description": "The note associated with the clock in"
                  },
                  "projectId": {
                    "type": "integer",
                    "example": "3",
                    "description": "The id of the project associated with the clock in"
                  },
                  "taskId": {
                    "type": "integer",
                    "example": "2",
                    "description": "The id of the task associated with the clock in"
                  },
                  "clockInLocation": {
                    "type": "object",
                    "properties": {
                      "latitude": {
                        "type": "number",
                        "format": "double",
                        "example": 40.332729
                      },
                      "longitude": {
                        "type": "number",
                        "format": "double",
                        "example": -111.729235
                      },
                      "accuracy": {
                        "type": "integer",
                        "example": 2,
                        "description": "Accuracy in meters of the clock in location"
                      },
                      "address": {
                        "type": "string",
                        "example": "123 Main"
                      }
                    }
                  },
                  "clockOutLocation": {
                    "type": "object",
                    "properties": {
                      "latitude": {
                        "type": "number",
                        "format": "double",
                        "example": 40.332729
                      },
                      "longitude": {
                        "type": "number",
                        "format": "double",
                        "example": -111.729235
                      },
                      "accuracy": {
                        "type": "integer",
                        "example": 2,
                        "description": "Accuracy in meters of the clock in location"
                      },
                      "address": {
                        "type": "string",
                        "example": "123 Main"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The response content will be JSON with the daily entry information."
          },
          "400": {
            "description": "Invalid or missing argument."
          },
          "403": {
            "description": "Invalid permissions."
          },
          "404": {
            "description": "Not found."
          },
          "409": {
            "description": "Conflict found."
          },
          "412": {
            "description": "Precondition failed."
          },
          "500": {
            "description": "Server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/time_tracking/employee/{employeeId}/clock_in/data",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Tracking: Edit information on the currently clocked in entry",
            "x-testDescription": "Edit information on the currently clocked in entry"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_tracking/employee/{employeeId}/projects": {
      "get": {
        "description": "Get projects an employee can log time to",
        "summary": "Get projects an employee can log time to",
        "tags": [
          "Time Tracking"
        ],
        "operationId": "time-tracking-employee-projects",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "id of the employee to whom the projects belong.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response content will be JSON with the daily entry information."
          },
          "500": {
            "description": "Server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/time_tracking/employee/{employeeId}/projects",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Tracking:Get projects an employee can log time to",
            "x-testDescription": "Get projects an employee can log time to"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_tracking/employee/{employeeId}/projects/{projectId}/tasks": {
      "get": {
        "description": "Get tasks for a project",
        "summary": "Get tasks for a project",
        "tags": [
          "Time Tracking"
        ],
        "operationId": "time-tracking-project-tasks",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "id of the employee to whom the projects belong.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "id of the project to which the tasks belong.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response content will be JSON with the task information."
          },
          "403": {
            "description": "Invalid permissions."
          },
          "500": {
            "description": "Server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/time_tracking/employee/{employeeId}/projects/{projectId}/tasks",
              "headers": {
                "Authorization": "Basic {{apiKey}}"
              }
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Time Tracking:Get tasks for a project",
            "x-testDescription": "Get tasks for a project"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_tracking/timesheet_entries": {
      "get": {
        "description": "Get all timesheet entries for a given period of time.",
        "summary": "Get Timesheet Entries",
        "tags": [
          "Time Tracking - Public Beta"
        ],
        "operationId": "get-timesheet-entries",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "description": "YYYY-MM-DD. Only show timesheet entries on/after the specified start date. Must be within the last 365 days.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "description": "YYYY-MM-DD. Only show timesheet entries on/before the specified end date. Must be within the last 365 days.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeIds",
            "description": "A comma separated list of employee IDs. When specified, only entries that match these employee IDs are returned.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "title": "Timesheet Entry",
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "ID of the entry.",
                        "type": "integer"
                      },
                      "employeeId": {
                        "description": "ID of the employee associated with the entry.",
                        "type": "integer"
                      },
                      "type": {
                        "description": "type of the entry.",
                        "enum": [
                          "hour",
                          "clock"
                        ],
                        "type": "string"
                      },
                      "start": {
                        "description": "Timestamp, in UTC, of when the employee clocked in. ISO 8601 format. Property can be null.",
                        "type": "string"
                      },
                      "end": {
                        "description": "Timestamp, in UTC, of when the employee clocked out. ISO 8601 format. Property can be null.",
                        "type": "string"
                      },
                      "timezone": {
                        "description": "The timezone the clock entry was recorded in. Property can be null.",
                        "type": "string"
                      },
                      "hours": {
                        "description": "The number of hours for the entry. This value has a maximum scale of 4. Property can be null.",
                        "type": "number"
                      },
                      "note": {
                        "description": "The note associated with the entry. Property can be null.",
                        "type": "string"
                      },
                      "projectInfo": {
                        "title": "Time Tracking Project Info",
                        "type": "object",
                        "properties": {
                          "project": {
                            "title": "Time Tracking Project",
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "ID of the project.",
                                "type": "integer"
                              },
                              "name": {
                                "description": "Name of the project.",
                                "type": "string"
                              }
                            }
                          },
                          "task": {
                            "title": "Time Tracking Task",
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "ID of the task.",
                                "type": "integer"
                              },
                              "name": {
                                "description": "Name of the task.",
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "approved": {
                        "description": "Approval status of the timesheet for the entry.",
                        "type": "boolean"
                      },
                      "approvedAt": {
                        "description": "Timestamp, in UTC, of when the timesheet for the entry was approved. Property can be null.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request parameters."
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Insufficient user permissions or API access is not turned on."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_tracking/clock_entries/store": {
      "post": {
        "description": "Add or edit timesheet clock entries.",
        "summary": "Add/Edit Timesheet Clock Entries",
        "tags": [
          "Time Tracking - Public Beta"
        ],
        "operationId": "store-timesheet-clock-entries",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "entries"
                ],
                "properties": {
                  "entries": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "employeeId",
                        "date",
                        "start",
                        "end"
                      ],
                      "properties": {
                        "employeeId": {
                          "type": "integer",
                          "description": "Unique identifier for the employee."
                        },
                        "date": {
                          "type": "string",
                          "description": "Date for the timesheet entry. Must be in YYYY-MM-DD format.",
                          "example": "2024-01-31"
                        },
                        "start": {
                          "type": "string",
                          "description": "Start time for the timesheet entry. Local time for the employee. Must be in hh:mm 24 hour format.",
                          "example": "09:00"
                        },
                        "end": {
                          "type": "string",
                          "description": "End time for the timesheet entry. Local time for the employee. Must be in hh:mm 24 hour format.",
                          "example": "17:00"
                        },
                        "id": {
                          "type": "integer",
                          "description": "The ID of an existing timesheet entry. This can be specified to edit an existing entry."
                        },
                        "projectId": {
                          "type": "integer",
                          "description": "The ID of the project to associate with the timesheet entry."
                        },
                        "taskId": {
                          "type": "integer",
                          "description": "The ID of the task to associate with the timesheet entry."
                        },
                        "note": {
                          "type": "string",
                          "description": "Optional note to associate with the timesheet entry."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "title": "Timesheet Entry",
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "ID of the entry.",
                        "type": "integer"
                      },
                      "employeeId": {
                        "description": "ID of the employee associated with the entry.",
                        "type": "integer"
                      },
                      "type": {
                        "description": "type of the entry.",
                        "enum": [
                          "hour",
                          "clock"
                        ],
                        "type": "string"
                      },
                      "start": {
                        "description": "Timestamp, in UTC, of when the employee clocked in. ISO 8601 format. Property can be null.",
                        "type": "string"
                      },
                      "end": {
                        "description": "Timestamp, in UTC, of when the employee clocked out. ISO 8601 format. Property can be null.",
                        "type": "string"
                      },
                      "timezone": {
                        "description": "The timezone the clock entry was recorded in. Property can be null.",
                        "type": "string"
                      },
                      "hours": {
                        "description": "The number of hours for the entry. This value has a maximum scale of 4. Property can be null.",
                        "type": "number"
                      },
                      "note": {
                        "description": "The note associated with the entry. Property can be null.",
                        "type": "string"
                      },
                      "projectInfo": {
                        "title": "Time Tracking Project Info",
                        "type": "object",
                        "properties": {
                          "project": {
                            "title": "Time Tracking Project",
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "ID of the project.",
                                "type": "integer"
                              },
                              "name": {
                                "description": "Name of the project.",
                                "type": "string"
                              }
                            }
                          },
                          "task": {
                            "title": "Time Tracking Task",
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "ID of the task.",
                                "type": "integer"
                              },
                              "name": {
                                "description": "Name of the task.",
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "approved": {
                        "description": "Approval status of the timesheet for the entry.",
                        "type": "boolean"
                      },
                      "approvedAt": {
                        "description": "Timestamp, in UTC, of when the timesheet for the entry was approved. Property can be null.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request parameters."
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Forbidden. Insufficient user permissions or API access is not turned on."
          },
          "406": {
            "description": "Request not acceptable."
          },
          "409": {
            "description": "There was a conflict with the request."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_tracking/clock_entries/delete": {
      "post": {
        "description": "Delete timesheet clock entries.",
        "summary": "Delete Timesheet Clock Entries",
        "tags": [
          "Time Tracking - Public Beta"
        ],
        "operationId": "delete-timesheet-clock-entries",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "clockEntryIds"
                ],
                "properties": {
                  "clockEntryIds": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success. No content returned."
          },
          "400": {
            "description": "Bad request parameters."
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Forbidden. Insufficient user permissions or API access is not turned on."
          },
          "406": {
            "description": "Request not acceptable."
          },
          "409": {
            "description": "There was a conflict with the request."
          },
          "412": {
            "description": "Invalid time tracking configuration or timezone."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_tracking/hour_entries/store": {
      "post": {
        "description": "Add or edit timesheet hour entries.",
        "summary": "Add/Edit Timesheet Hour Entries",
        "tags": [
          "Time Tracking - Public Beta"
        ],
        "operationId": "store-timesheet-hour-entries",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "hours"
                ],
                "properties": {
                  "hours": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "employeeId",
                        "date",
                        "hours"
                      ],
                      "properties": {
                        "employeeId": {
                          "type": "integer",
                          "description": "Unique identifier for the employee."
                        },
                        "date": {
                          "type": "string",
                          "description": "Date for the timesheet entry. Must be in YYYY-MM-DD format.",
                          "example": "2024-01-31"
                        },
                        "hours": {
                          "type": "number",
                          "description": "Hours worked for this timesheet entry.",
                          "example": 3.5
                        },
                        "id": {
                          "type": "integer",
                          "description": "The ID of an existing timesheet entry. This can be specified to edit an existing entry."
                        },
                        "projectId": {
                          "type": "integer",
                          "description": "The ID of the project to associate with the timesheet entry."
                        },
                        "taskId": {
                          "type": "integer",
                          "description": "The ID of the task to associate with the timesheet entry."
                        },
                        "note": {
                          "type": "string",
                          "description": "Optional note to associate with the timesheet entry."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "title": "Timesheet Entry",
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "ID of the entry.",
                        "type": "integer"
                      },
                      "employeeId": {
                        "description": "ID of the employee associated with the entry.",
                        "type": "integer"
                      },
                      "type": {
                        "description": "type of the entry.",
                        "enum": [
                          "hour",
                          "clock"
                        ],
                        "type": "string"
                      },
                      "start": {
                        "description": "Timestamp, in UTC, of when the employee clocked in. ISO 8601 format. Property can be null.",
                        "type": "string"
                      },
                      "end": {
                        "description": "Timestamp, in UTC, of when the employee clocked out. ISO 8601 format. Property can be null.",
                        "type": "string"
                      },
                      "timezone": {
                        "description": "The timezone the clock entry was recorded in. Property can be null.",
                        "type": "string"
                      },
                      "hours": {
                        "description": "The number of hours for the entry. This value has a maximum scale of 4. Property can be null.",
                        "type": "number"
                      },
                      "note": {
                        "description": "The note associated with the entry. Property can be null.",
                        "type": "string"
                      },
                      "projectInfo": {
                        "title": "Time Tracking Project Info",
                        "type": "object",
                        "properties": {
                          "project": {
                            "title": "Time Tracking Project",
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "ID of the project.",
                                "type": "integer"
                              },
                              "name": {
                                "description": "Name of the project.",
                                "type": "string"
                              }
                            }
                          },
                          "task": {
                            "title": "Time Tracking Task",
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "ID of the task.",
                                "type": "integer"
                              },
                              "name": {
                                "description": "Name of the task.",
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "approved": {
                        "description": "Approval status of the timesheet for the entry.",
                        "type": "boolean"
                      },
                      "approvedAt": {
                        "description": "Timestamp, in UTC, of when the timesheet for the entry was approved. Property can be null.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request parameters."
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Forbidden. Insufficient user permissions or API access is not turned on."
          },
          "406": {
            "description": "Request not acceptable."
          },
          "409": {
            "description": "There was a conflict with the request."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_tracking/hour_entries/delete": {
      "post": {
        "description": "Delete timesheet hour entries.",
        "summary": "Delete Timesheet Hour Entries",
        "tags": [
          "Time Tracking - Public Beta"
        ],
        "operationId": "delete-timesheet-hour-entries",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "hourEntryIds"
                ],
                "properties": {
                  "hourEntryIds": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success. No content returned."
          },
          "400": {
            "description": "Bad request parameters."
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Forbidden. Insufficient user permissions or API access is not turned on."
          },
          "406": {
            "description": "Request not acceptable."
          },
          "409": {
            "description": "There was a conflict with the request."
          },
          "412": {
            "description": "Invalid time tracking configuration or timezone."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_tracking/employees/{employeeId}/clock_in": {
      "post": {
        "description": "Clock in an employee.",
        "summary": "Add Timesheet Clock-In Entry",
        "tags": [
          "Time Tracking - Public Beta"
        ],
        "operationId": "clock-in-employee",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "id of the employee to clock in.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projectId": {
                    "type": "integer",
                    "description": "id of the time tracking project that should be associated with the timesheet entry. Required if taskId is specified.",
                    "example": "10"
                  },
                  "taskId": {
                    "type": "integer",
                    "example": "25",
                    "description": "id of the time tracking task that should be associated with the timesheet entry."
                  },
                  "note": {
                    "type": "string",
                    "example": "Back from lunch.",
                    "description": "The note that should be associated with the timesheet entry"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Timesheet Entry",
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "ID of the entry.",
                      "type": "integer"
                    },
                    "employeeId": {
                      "description": "ID of the employee associated with the entry.",
                      "type": "integer"
                    },
                    "type": {
                      "description": "type of the entry.",
                      "enum": [
                        "hour",
                        "clock"
                      ],
                      "type": "string"
                    },
                    "start": {
                      "description": "Timestamp, in UTC, of when the employee clocked in. ISO 8601 format. Property can be null.",
                      "type": "string"
                    },
                    "end": {
                      "description": "Timestamp, in UTC, of when the employee clocked out. ISO 8601 format. Property can be null.",
                      "type": "string"
                    },
                    "timezone": {
                      "description": "The timezone the clock entry was recorded in. Property can be null.",
                      "type": "string"
                    },
                    "hours": {
                      "description": "The number of hours for the entry. This value has a maximum scale of 4. Property can be null.",
                      "type": "number"
                    },
                    "note": {
                      "description": "The note associated with the entry. Property can be null.",
                      "type": "string"
                    },
                    "projectInfo": {
                      "title": "Time Tracking Project Info",
                      "type": "object",
                      "properties": {
                        "project": {
                          "title": "Time Tracking Project",
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "ID of the project.",
                              "type": "integer"
                            },
                            "name": {
                              "description": "Name of the project.",
                              "type": "string"
                            }
                          }
                        },
                        "task": {
                          "title": "Time Tracking Task",
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "ID of the task.",
                              "type": "integer"
                            },
                            "name": {
                              "description": "Name of the task.",
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "approved": {
                      "description": "Approval status of the timesheet for the entry.",
                      "type": "boolean"
                    },
                    "approvedAt": {
                      "description": "Timestamp, in UTC, of when the timesheet for the entry was approved. Property can be null.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request parameters."
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Forbidden. Insufficient user permissions or API access is not turned on."
          },
          "406": {
            "description": "Request not acceptable."
          },
          "409": {
            "description": "There was a conflict with the request."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_tracking/employees/{employeeId}/clock_out": {
      "post": {
        "description": "Clock out an employee.",
        "summary": "Add Timesheet Clock-Out Entry",
        "tags": [
          "Time Tracking - Public Beta"
        ],
        "operationId": "clock-out-employee",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "id of the employee to clock out.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Timesheet Entry",
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "ID of the entry.",
                      "type": "integer"
                    },
                    "employeeId": {
                      "description": "ID of the employee associated with the entry.",
                      "type": "integer"
                    },
                    "type": {
                      "description": "type of the entry.",
                      "enum": [
                        "hour",
                        "clock"
                      ],
                      "type": "string"
                    },
                    "start": {
                      "description": "Timestamp, in UTC, of when the employee clocked in. ISO 8601 format. Property can be null.",
                      "type": "string"
                    },
                    "end": {
                      "description": "Timestamp, in UTC, of when the employee clocked out. ISO 8601 format. Property can be null.",
                      "type": "string"
                    },
                    "timezone": {
                      "description": "The timezone the clock entry was recorded in. Property can be null.",
                      "type": "string"
                    },
                    "hours": {
                      "description": "The number of hours for the entry. This value has a maximum scale of 4. Property can be null.",
                      "type": "number"
                    },
                    "note": {
                      "description": "The note associated with the entry. Property can be null.",
                      "type": "string"
                    },
                    "projectInfo": {
                      "title": "Time Tracking Project Info",
                      "type": "object",
                      "properties": {
                        "project": {
                          "title": "Time Tracking Project",
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "ID of the project.",
                              "type": "integer"
                            },
                            "name": {
                              "description": "Name of the project.",
                              "type": "string"
                            }
                          }
                        },
                        "task": {
                          "title": "Time Tracking Task",
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "ID of the task.",
                              "type": "integer"
                            },
                            "name": {
                              "description": "Name of the task.",
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "approved": {
                      "description": "Approval status of the timesheet for the entry.",
                      "type": "boolean"
                    },
                    "approvedAt": {
                      "description": "Timestamp, in UTC, of when the timesheet for the entry was approved. Property can be null.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request parameters."
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Forbidden. Insufficient user permissions or API access is not turned on."
          },
          "406": {
            "description": "Request not acceptable."
          },
          "409": {
            "description": "There was a conflict with the request."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_tracking/employees/{employeeId}/projects": {
      "get": {
        "description": "Get the projects an employee can track time for.",
        "summary": "Get Employee Projects",
        "tags": [
          "Time Tracking - Public Beta"
        ],
        "operationId": "get-employee-projects",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "id of the employee to retrieve projects for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "title": "List of time tracking projects with tasks.",
                    "type": "array",
                    "items": {
                      "title": "Time tracking project with tasks.",
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "ID of the project.",
                          "type": "integer"
                        },
                        "name": {
                          "description": "Name of the project.",
                          "type": "string"
                        },
                        "tasks": {
                          "description": "A list of time tracking tasks for the project.",
                          "type": "array",
                          "items": {
                            "title": "Time Tracking Task",
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "ID of the task.",
                                "type": "integer"
                              },
                              "name": {
                                "description": "Name of the task.",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request parameters."
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Insufficient user permissions or API access is not turned on."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/time_tracking/projects": {
      "post": {
        "description": "Create a time tracking project with optional tasks.",
        "summary": "Create a Time Tracking Project",
        "tags": [
          "Time Tracking - Public Beta"
        ],
        "operationId": "create-time-tracking-project",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the project.",
                    "example": "Project A"
                  },
                  "billable": {
                    "type": "boolean",
                    "description": "Indicates if the project is billable. Defaults to true if not provided."
                  },
                  "allowAllEmployees": {
                    "type": "boolean",
                    "description": "Indicates if all employees can log time for this project. Defaults to true if not provided."
                  },
                  "employeeIds": {
                    "type": "array",
                    "description": "A list of employee IDs that can log time for this project.",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "hasTasks": {
                    "type": "boolean",
                    "description": "Indicates if the project has tasks. Defaults to false if not provided."
                  },
                  "tasks": {
                    "type": "array",
                    "description": "List of tasks to create and associate with the project.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the task."
                        },
                        "billable": {
                          "type": "boolean",
                          "description": "Indicates if the tasks is billable. Defaults to true if not provided."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Time tracking project with tasks and list of employee IDs.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "ID of the project.",
                      "type": "integer"
                    },
                    "name": {
                      "description": "Name of the project.",
                      "type": "string"
                    },
                    "tasks": {
                      "description": "A list of time tracking tasks for the project.",
                      "type": "array",
                      "items": {
                        "title": "Time Tracking Task",
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "ID of the task.",
                            "type": "integer"
                          },
                          "name": {
                            "description": "Name of the task.",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "employeeIds": {
                      "description": "A list of employee IDs that can log time for this project. If not present, all employees can log time for the project.",
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request parameters."
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Forbidden. Insufficient user permissions or API access is not turned on."
          },
          "406": {
            "description": "Request not acceptable."
          },
          "409": {
            "description": "There was a conflict with the request."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/performance/employees/{employeeId}/goals/aggregate": {
      "get": {
        "description": "Provides a list of all goals, type counts, goal comment counts, and employees shared with goals for the given employee. This version of the endpoint will not return any goals with milestones. Milestone functionality for this endpoint begins in version 1.2.",
        "summary": "Get All Aggregate Goal Info",
        "tags": [
          "Goals"
        ],
        "operationId": "get-goals-aggregate-v1",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "employeeId is the employee ID used to generate the aggregate information.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response content will be an JSON document with the requested information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "canAlign": {
                      "description": "The selected user can align goals with other users.",
                      "example": "false",
                      "type": "boolean"
                    },
                    "canCreateGoals": {
                      "description": "The selected user can create a goal.",
                      "type": "boolean",
                      "example": "true"
                    },
                    "filters": {
                      "type": "array",
                      "description": "All the goals of the user seperated by filter.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Id of the filter.",
                            "example": "status-inProgress"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the filter.",
                            "example": "In Progress"
                          },
                          "count": {
                            "type": "integer",
                            "description": "Count of the goals with that filter.",
                            "example": "3"
                          }
                        }
                      }
                    },
                    "selectedFilter": {
                      "type": "string",
                      "description": "The id of the current selected filter.",
                      "example": "status-inProgress"
                    },
                    "goals": {
                      "type": "array",
                      "description": "All goals in selected filter.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "The id of the goal.",
                            "example": "4"
                          },
                          "title": {
                            "type": "string",
                            "description": "Title of the goal.",
                            "example": "Complete Documentation Epic"
                          },
                          "description": {
                            "type": "string",
                            "description": "A description of the goal.",
                            "example": "Document every endpoint for the goals API."
                          },
                          "percentComplete": {
                            "type": "integer",
                            "description": "A percentage (1-100) that denotes how complete the goal is.",
                            "example": "100"
                          },
                          "alignsWithOptionId": {
                            "type": "integer"
                          },
                          "sharedWithEmployeeIds": {
                            "type": "array",
                            "description": "Ids of the employees that have access to this goal.",
                            "items": {
                              "type": "integer",
                              "example": "89"
                            }
                          },
                          "dueDate": {
                            "type": "string",
                            "format": "date",
                            "description": "The due date of the goal.",
                            "example": "2021-12-17"
                          },
                          "completionDate": {
                            "type": "string",
                            "format": "date",
                            "description": "The date the goal was completed.",
                            "example": "2021-12-16"
                          },
                          "status": {
                            "type": "string",
                            "description": "The status of the goal.",
                            "example": "in_progress"
                          }
                        }
                      }
                    },
                    "persons": {
                      "type": "array",
                      "description": "A list of people with access to the goal.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "employeeId": {
                            "type": "integer",
                            "description": "The id of this employee.",
                            "example": "4353"
                          },
                          "userId": {
                            "type": "integer",
                            "description": "The user id of the person if applicable.",
                            "example": "45"
                          },
                          "displayFirstName": {
                            "type": "string",
                            "description": "First name of the person.",
                            "example": "Tim"
                          },
                          "lastName": {
                            "type": "string",
                            "description": "Last name of the person.",
                            "example": "Johnson"
                          },
                          "photoUrl": {
                            "type": "string",
                            "description": "url of the user profile image.",
                            "example": "https://tim.johnson.jpg"
                          }
                        }
                      }
                    },
                    "comments": {
                      "type": "array",
                      "description": "A list of how many comments belong to each goal.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "goalId": {
                            "type": "integer",
                            "description": "The goalId that the comments are linked to.",
                            "example": "25"
                          },
                          "commentCount": {
                            "type": "integer",
                            "description": "How many comments are linked to the goal",
                            "example": "2"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1_1/performance/employees/{employeeId}/goals/aggregate": {
      "get": {
        "description": "Provides a list of all goals, type counts, filter actions, goal comment counts, and employees shared with goals for the given employee. Difference from Version 1: Returns goals in the closed filter and provides filter actions for each filter. This version of the endpoint will not return any goals with milestones. Milestone functionality for this endpoint begins in version 1.2.",
        "summary": "Get All Aggregate Goal Info, Version 1.1",
        "tags": [
          "Goals"
        ],
        "operationId": "get-goals-aggregate-v1.1",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "employeeId is the employee ID used to generate the aggregate information.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response content will be an JSON document with the requested information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "canAlign": {
                      "description": "The selected user can align goals with other users.",
                      "example": "false",
                      "type": "boolean"
                    },
                    "canCreateGoals": {
                      "description": "The selected user can create a goal.",
                      "type": "boolean",
                      "example": "true"
                    },
                    "filters": {
                      "type": "array",
                      "description": "All the goals of the user seperated by filter.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Id of the filter.",
                            "example": "status-inProgress"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the filter.",
                            "example": "In Progress"
                          },
                          "count": {
                            "type": "integer",
                            "description": "Count of the goals with that filter.",
                            "example": "3"
                          },
                          "actions": {
                            "type": "object",
                            "description": "What actions a user can preform on this kind of goal.",
                            "properties": {
                              "canCloseGoal": {
                                "type": "boolean",
                                "description": "Can a goal be closed in this state.",
                                "example": "true"
                              },
                              "canEditGoal": {
                                "type": "boolean",
                                "description": "Can a goal be edited in this state.",
                                "example": "true"
                              },
                              "canEditGoalProgressBar": {
                                "type": "boolean",
                                "description": "Can a goal progress bar be edited in this state.",
                                "example": "true"
                              },
                              "canReopenGoal": {
                                "type": "boolean",
                                "description": "Can a goal be reopened in this state.",
                                "example": "true"
                              },
                              "canShareGoal": {
                                "type": "boolean",
                                "description": "Can a goal be shared in this state.",
                                "example": "true"
                              }
                            }
                          }
                        }
                      }
                    },
                    "selectedFilter": {
                      "type": "string",
                      "description": "The id of the current selected filter.",
                      "example": "status-inProgress"
                    },
                    "goals": {
                      "type": "array",
                      "description": "All goals in selected filter.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "The id of the goal.",
                            "example": "4"
                          },
                          "title": {
                            "type": "string",
                            "description": "Title of the goal.",
                            "example": "Complete Documentation Epic"
                          },
                          "description": {
                            "type": "string",
                            "description": "A description of the goal.",
                            "example": "Document every endpoint for the goals API."
                          },
                          "percentComplete": {
                            "type": "integer",
                            "description": "A percentage (1-100) that denotes how complete the goal is.",
                            "example": "100"
                          },
                          "alignsWithOptionId": {
                            "type": "integer"
                          },
                          "sharedWithEmployeeIds": {
                            "type": "array",
                            "description": "Ids of the employees that have access to this goal.",
                            "items": {
                              "type": "integer",
                              "example": "89"
                            }
                          },
                          "dueDate": {
                            "type": "string",
                            "format": "date",
                            "description": "The due date of the goal.",
                            "example": "2021-12-17"
                          },
                          "completionDate": {
                            "type": "string",
                            "format": "date",
                            "description": "The date the goal was completed.",
                            "example": "2021-12-16"
                          },
                          "status": {
                            "type": "string",
                            "description": "The status of the goal.",
                            "example": "in_progress"
                          }
                        }
                      }
                    },
                    "persons": {
                      "type": "array",
                      "description": "A list of people with access to the goal.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "employeeId": {
                            "type": "integer",
                            "description": "The id of this employee.",
                            "example": "4353"
                          },
                          "userId": {
                            "type": "integer",
                            "description": "The user id of the person if applicable.",
                            "example": "45"
                          },
                          "displayFirstName": {
                            "type": "string",
                            "description": "First name of the person.",
                            "example": "Tim"
                          },
                          "lastName": {
                            "type": "string",
                            "description": "Last name of the person.",
                            "example": "Johnson"
                          },
                          "photoUrl": {
                            "type": "string",
                            "description": "url of the user profile image.",
                            "example": "https://tim.johnson.jpg"
                          }
                        }
                      }
                    },
                    "comments": {
                      "type": "array",
                      "description": "A list of how many comments belong to each goal.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "goalId": {
                            "type": "integer",
                            "description": "The goalId that the comments are linked to.",
                            "example": "25"
                          },
                          "commentCount": {
                            "type": "integer",
                            "description": "How many comments are linked to the goal",
                            "example": "2"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1_2/performance/employees/{employeeId}/goals/aggregate": {
      "get": {
        "description": "Provides a list of all goals, type counts, filter actions, goal comment counts, and employees shared with goals for the given employee. Difference from Version 1.1: Returns all goals, including goals that contain milestones.",
        "summary": "Get All Aggregate Goal Info, Version 1.2",
        "tags": [
          "Goals"
        ],
        "operationId": "get-goals-aggregate-v1.2",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "employeeId is the employee ID used to generate the aggregate information.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response content will be an JSON document with the requested information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "canAlign": {
                      "description": "The selected user can align goals with other users.",
                      "example": "false",
                      "type": "boolean"
                    },
                    "canCreateGoals": {
                      "description": "The selected user can create a goal.",
                      "type": "boolean",
                      "example": "true"
                    },
                    "filters": {
                      "type": "array",
                      "description": "All the goals of the user seperated by filter.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Id of the filter.",
                            "example": "status-inProgress"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the filter.",
                            "example": "In Progress"
                          },
                          "count": {
                            "type": "integer",
                            "description": "Count of the goals with that filter.",
                            "example": "3"
                          },
                          "actions": {
                            "type": "object",
                            "description": "What actions a user can preform on this kind of goal.",
                            "properties": {
                              "canCloseGoal": {
                                "type": "boolean",
                                "description": "Can a goal be closed in this state.",
                                "example": "true"
                              },
                              "canEditGoal": {
                                "type": "boolean",
                                "description": "Can a goal be edited in this state.",
                                "example": "true"
                              },
                              "canEditGoalProgressBar": {
                                "type": "boolean",
                                "description": "Can a goal progress bar be edited in this state.",
                                "example": "true"
                              },
                              "canReopenGoal": {
                                "type": "boolean",
                                "description": "Can a goal be reopened in this state.",
                                "example": "true"
                              },
                              "canShareGoal": {
                                "type": "boolean",
                                "description": "Can a goal be shared in this state.",
                                "example": "true"
                              }
                            }
                          }
                        }
                      }
                    },
                    "selectedFilter": {
                      "type": "string",
                      "description": "The id of the current selected filter.",
                      "example": "status-inProgress"
                    },
                    "goals": {
                      "type": "array",
                      "description": "All goals in selected filter.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "The id of the goal.",
                            "example": "4"
                          },
                          "title": {
                            "type": "string",
                            "description": "Title of the goal.",
                            "example": "Complete Documentation Epic"
                          },
                          "description": {
                            "type": "string",
                            "description": "A description of the goal.",
                            "example": "Document every endpoint for the goals API."
                          },
                          "percentComplete": {
                            "type": "integer",
                            "description": "A percentage (1-100) that denotes how complete the goal is.",
                            "example": "100"
                          },
                          "alignsWithOptionId": {
                            "type": "integer"
                          },
                          "sharedWithEmployeeIds": {
                            "type": "array",
                            "description": "Ids of the employees that have access to this goal.",
                            "items": {
                              "type": "integer",
                              "example": "89"
                            }
                          },
                          "dueDate": {
                            "type": "string",
                            "format": "date",
                            "description": "The due date of the goal.",
                            "example": "2021-12-17"
                          },
                          "completionDate": {
                            "type": "string",
                            "format": "date",
                            "description": "The date the goal was completed.",
                            "example": "2021-12-16"
                          },
                          "status": {
                            "type": "string",
                            "description": "The status of the goal.",
                            "example": "in_progress"
                          },
                          "milestones": {
                            "type": "array",
                            "description": "All milestones for the individual goal. This array will not exist if milestones are not selected for this goal.",
                            "items": {
                              "type": "object",
                              "description": "An individual milestone.",
                              "properties": {
                                "id": {
                                  "type": "integer",
                                  "description": "The id of the milestone.",
                                  "example": "2"
                                },
                                "employeeGoalId": {
                                  "type": "integer",
                                  "description": "The id of the goal which encompasses this milestone.",
                                  "example": "12"
                                },
                                "title": {
                                  "type": "string",
                                  "description": "The title of the milestone.",
                                  "example": "Sell 15 Doohickeys"
                                },
                                "currentValue": {
                                  "type": "number",
                                  "description": "The current value for a numeric milestone. This number will be rounded to the nearest hundreds. On the creation of a numeric milestone this value will automatically be set to the start value of the milestone. If the milestone is a simple checkbox milestone, this value will always be null.",
                                  "example": "7"
                                },
                                "startValue": {
                                  "type": "number",
                                  "description": "The starting value for a numeric milestone. This number will be rounded to the nearest hundreds. If the milestone is a simple checkbox milestone, this value will always be null.",
                                  "example": "0"
                                },
                                "endValue": {
                                  "type": "number",
                                  "description": "The end goal for a numeric milestone. This number will be rounded to the nearest hundreds. If the milestone is a simple checkbox milestone, this value will always be null.",
                                  "example": "15"
                                },
                                "completedDateTime": {
                                  "type": "string",
                                  "format": "Date-Time",
                                  "description": "The date and time in which the goal has been completed. If the goal is not completed the value will be null.",
                                  "example": "2024-07-12T14:50:46Z"
                                },
                                "lastUpdateDateDateTime": {
                                  "type": "string",
                                  "format": "Date-Time",
                                  "description": "The date and time in which the goal was last updated.",
                                  "example": "2023-07-12T14:50:46Z"
                                },
                                "lastUpdateUserId": {
                                  "type": "integer",
                                  "description": "The ID of the user who last updated this milestone.",
                                  "example": "24"
                                }
                              }
                            }
                          },
                          "actions": {
                            "type": "object",
                            "description": "Actions that are available to a goal with milestones enabled. This object will not appear on a goal without milestones.",
                            "properties": {
                              "canEditGoalProgressBar": {
                                "type": "boolean",
                                "description": "Can the user edit the progress bar of this goal.",
                                "example": "false"
                              },
                              "canEditGoalMilestoneProgressBar": {
                                "type": "boolean",
                                "description": "can the user edit the progress of a milestone in this goal.",
                                "example": "true"
                              }
                            }
                          }
                        }
                      }
                    },
                    "persons": {
                      "type": "array",
                      "description": "A list of people with access to the goal.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "employeeId": {
                            "type": "integer",
                            "description": "The id of this employee.",
                            "example": "4353"
                          },
                          "userId": {
                            "type": "integer",
                            "description": "The user id of the person if applicable.",
                            "example": "45"
                          },
                          "displayFirstName": {
                            "type": "string",
                            "description": "First name of the person.",
                            "example": "Tim"
                          },
                          "lastName": {
                            "type": "string",
                            "description": "Last name of the person.",
                            "example": "Johnson"
                          },
                          "photoUrl": {
                            "type": "string",
                            "description": "url of the user profile image.",
                            "example": "https://tim.johnson.jpg"
                          }
                        }
                      }
                    },
                    "comments": {
                      "type": "array",
                      "description": "A list of how many comments belong to each goal.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "goalId": {
                            "type": "integer",
                            "description": "The goalId that the comments are linked to.",
                            "example": "25"
                          },
                          "commentCount": {
                            "type": "integer",
                            "description": "How many comments are linked to the goal",
                            "example": "2"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/aggregate": {
      "get": {
        "description": "Provides goal information, goal comments, and employees shared with goals or who have commented on the given goal.",
        "summary": "Get Aggregate Goal Info",
        "tags": [
          "Goals"
        ],
        "operationId": "get-goal-aggregate",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "employeeId is the employee ID with whom the goal is associated.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "goalId",
            "in": "path",
            "required": true,
            "description": "goalId is the Goal ID used to generate the aggregate information.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response content will be an JSON document with the requested information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "goal": {
                      "type": "object",
                      "description": "The selected goal object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "The id of the goal.",
                          "example": "4"
                        },
                        "title": {
                          "type": "string",
                          "description": "Title of the goal.",
                          "example": "Complete Documentation Epic"
                        },
                        "description": {
                          "type": "string",
                          "description": "A description of the goal.",
                          "example": "Document every endpoint for the goals API."
                        },
                        "percentComplete": {
                          "type": "integer",
                          "description": "A percentage (1-100) that denotes how complete the goal is.",
                          "example": "100"
                        },
                        "alignsWithOptionId": {
                          "type": "integer"
                        },
                        "sharedWithEmployeeIds": {
                          "type": "array",
                          "description": "Ids of the employees that have access to this goal.",
                          "items": {
                            "type": "integer",
                            "example": "89"
                          }
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "date",
                          "description": "The due date of the goal.",
                          "example": "2021-12-17"
                        },
                        "completionDate": {
                          "type": "string",
                          "format": "date",
                          "description": "The date the goal was completed.",
                          "example": "2021-12-16"
                        },
                        "status": {
                          "type": "string",
                          "description": "The status of the goal.",
                          "example": "in_progress"
                        },
                        "milestones": {
                          "type": "array",
                          "description": "All milestones for the individual goal. This array will not exist if milestones are not selected for this goal.",
                          "items": {
                            "type": "object",
                            "description": "An individual milestone.",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "The id of the milestone.",
                                "example": "2"
                              },
                              "employeeGoalId": {
                                "type": "integer",
                                "description": "The id of the goal which encompasses this milestone.",
                                "example": "12"
                              },
                              "title": {
                                "type": "string",
                                "description": "The title of the milestone.",
                                "example": "Sell 15 Doohickeys"
                              },
                              "currentValue": {
                                "type": "number",
                                "description": "The current value for a numeric milestone. This number will be rounded to the nearest hundreds. On the creation of a numeric milestone this value will automatically be set to the start value of the milestone. If the milestone is a simple checkbox milestone, this value will always be null.",
                                "example": "7"
                              },
                              "startValue": {
                                "type": "number",
                                "description": "The starting value for a numeric milestone. This number will be rounded to the nearest hundreds. If the milestone is a simple checkbox milestone, this value will always be null.",
                                "example": "0"
                              },
                              "endValue": {
                                "type": "number",
                                "description": "The end goal for a numeric milestone. This number will be rounded to the nearest hundreds. If the milestone is a simple checkbox milestone, this value will always be null.",
                                "example": "15"
                              },
                              "completedDateTime": {
                                "type": "string",
                                "format": "Date-Time",
                                "description": "The date and time in which the goal has been completed. If the goal is not completed the value will be null.",
                                "example": "2024-07-12T14:50:46Z"
                              },
                              "lastUpdateDateDateTime": {
                                "type": "string",
                                "format": "Date-Time",
                                "description": "The date and time in which the goal was last updated.",
                                "example": "2023-07-12T14:50:46Z"
                              },
                              "lastUpdateUserId": {
                                "type": "integer",
                                "description": "The ID of the user who last updated this milestone.",
                                "example": "24"
                              }
                            }
                          }
                        },
                        "actions": {
                          "type": "object",
                          "description": "Actions that are available to a goal with milestones enabled. This object will not appear on a goal without milestones.",
                          "properties": {
                            "canEditGoalProgressBar": {
                              "type": "boolean",
                              "description": "Can the user edit the progress bar of this goal.",
                              "example": "false"
                            },
                            "canEditGoalMilestoneProgressBar": {
                              "type": "boolean",
                              "description": "can the user edit the progress of a milestone in this goal.",
                              "example": "true"
                            }
                          }
                        }
                      }
                    },
                    "canAlign": {
                      "type": "boolean",
                      "description": "The selected user can align goals with other users.",
                      "example": "false"
                    },
                    "canCreateGoals": {
                      "type": "boolean",
                      "description": "The selected user can create a goal.",
                      "example": "true"
                    },
                    "alignsWithOptions": {
                      "type": "array",
                      "description": "All possible goals that this goal could be aligned with.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "Id of the goal that the selected goal could be aligned with.",
                            "example": "8"
                          },
                          "title": {
                            "type": "string",
                            "description": "Title of the goal that the selected goal could be aligned with.",
                            "example": "Get all team goals for January complete."
                          }
                        }
                      }
                    },
                    "comments": {
                      "type": "array",
                      "description": "Comments linked to selected goal.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "Id of the comment.",
                            "example": "2"
                          },
                          "authorUserId": {
                            "type": "integer",
                            "description": "Id of the author of the comment.",
                            "example": "1534"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The date and time that the comment was created.",
                            "example": "2022-05-23T17:32:42Z"
                          },
                          "text": {
                            "type": "string",
                            "description": "The actual text of the comment.",
                            "example": "This goal is taking longer than I thought."
                          },
                          "canEdit": {
                            "type": "boolean",
                            "description": "Can the comment be edited.",
                            "example": "ture"
                          },
                          "canDelete": {
                            "type": "boolean",
                            "description": "Can the comment be deleted.",
                            "example": "ture"
                          }
                        }
                      }
                    },
                    "persons": {
                      "type": "array",
                      "description": "A list of people with access to the goal.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "employeeId": {
                            "type": "integer",
                            "description": "The id of this employee.",
                            "example": "4353"
                          },
                          "userId": {
                            "type": "integer",
                            "description": "The user id of the person if applicable.",
                            "example": "45"
                          },
                          "displayFirstName": {
                            "type": "string",
                            "description": "First name of the person.",
                            "example": "Tim"
                          },
                          "lastName": {
                            "type": "string",
                            "description": "Last name of the person.",
                            "example": "Johnson"
                          },
                          "photoUrl": {
                            "type": "string",
                            "description": "url of the user profile image.",
                            "example": "https://tim.johnson.jpg"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/sharedWith": {
      "put": {
        "description": "Updates which employees this goal is shared with.",
        "summary": "Update Goal Sharing",
        "tags": [
          "Goals"
        ],
        "operationId": "put-goal-shared-with",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "employeeId is the employee ID with whom the goal is associated.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "goalId",
            "in": "path",
            "required": true,
            "description": "goalId is the goal ID for the specified employee.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sharedWithEmployeeIds": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "description": "Employee IDs of employees with whom the goal is shared. All goal owners are considered \"shared with\".",
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response indicates that all the requested changes were made. The content of the response will be the goal response object for the specified goalId.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "goal": {
                      "type": "object",
                      "description": "The selected goal object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "The id of the goal.",
                          "example": "4"
                        },
                        "title": {
                          "type": "string",
                          "description": "Title of the goal.",
                          "example": "Complete Documentation Epic"
                        },
                        "description": {
                          "type": "string",
                          "description": "A description of the goal.",
                          "example": "Document every endpoint for the goals API."
                        },
                        "percentComplete": {
                          "type": "integer",
                          "description": "A percentage (1-100) that denotes how complete the goal is.",
                          "example": "100"
                        },
                        "alignsWithOptionId": {
                          "type": "integer"
                        },
                        "sharedWithEmployeeIds": {
                          "type": "array",
                          "description": "Ids of the employees that have access to this goal.",
                          "items": {
                            "type": "integer",
                            "example": "89"
                          }
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "date",
                          "description": "The due date of the goal.",
                          "example": "2021-12-17"
                        },
                        "completionDate": {
                          "type": "string",
                          "format": "date",
                          "description": "The date the goal was completed.",
                          "example": "2021-12-16"
                        },
                        "status": {
                          "type": "string",
                          "description": "The status of the goal.",
                          "example": "in_progress"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The posted JSON is invalid."
          },
          "403": {
            "description": "Goal is not editable or insufficient permissions."
          },
          "404": {
            "description": "No goal found for the given goalId."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/progress": {
      "put": {
        "summary": "Update Goal Progress",
        "tags": [
          "Goals"
        ],
        "operationId": "put-goal-progress",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "employeeId is the employee ID with whom the goal is associated.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "goalId",
            "in": "path",
            "required": true,
            "description": "goalId is the goal ID for the specified employee.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "integer"
              }
            }
          },
          "description": "Employee IDs of employees with whom the goal is shared. All goal owners are considered \"shared with\".",
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response indicates that all the requested changes were made. The content of the response will be the goal response object for the specified goalId.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "goal": {
                      "type": "object",
                      "description": "The selected goal object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "The id of the goal.",
                          "example": "4"
                        },
                        "title": {
                          "type": "string",
                          "description": "Title of the goal.",
                          "example": "Complete Documentation Epic"
                        },
                        "description": {
                          "type": "string",
                          "description": "A description of the goal.",
                          "example": "Document every endpoint for the goals API."
                        },
                        "percentComplete": {
                          "type": "integer",
                          "description": "A percentage (1-100) that denotes how complete the goal is.",
                          "example": "100"
                        },
                        "alignsWithOptionId": {
                          "type": "integer"
                        },
                        "sharedWithEmployeeIds": {
                          "type": "array",
                          "description": "Ids of the employees that have access to this goal.",
                          "items": {
                            "type": "integer",
                            "example": "89"
                          }
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "date",
                          "description": "The due date of the goal.",
                          "example": "2021-12-17"
                        },
                        "completionDate": {
                          "type": "string",
                          "format": "date",
                          "description": "The date the goal was completed.",
                          "example": "2021-12-16"
                        },
                        "status": {
                          "type": "string",
                          "description": "The status of the goal.",
                          "example": "in_progress"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The posted JSON is invalid."
          },
          "403": {
            "description": "Goal is not editable or insufficient permissions."
          },
          "404": {
            "description": "No goal found for the given goalId."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/performance/employees/{employeeId}/goals/filters": {
      "get": {
        "description": "Get the number of goals per status for an employee.",
        "summary": "Get Goal Status Counts",
        "tags": [
          "Goals"
        ],
        "operationId": "get-goals-filters-v1",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "employeeId is the employee ID to whom the goals are assigned.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response content will be a JSON document with the requested information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "filters": {
                      "type": "array",
                      "description": "All the goals of the user seperated by filter.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Id of the filter.",
                            "example": "status-inProgress"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the filter.",
                            "example": "In Progress"
                          },
                          "count": {
                            "type": "integer",
                            "description": "Count of the goals with that filter.",
                            "example": "3"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1_1/performance/employees/{employeeId}/goals/filters": {
      "get": {
        "description": "Get the number of goals per status for an employee. Difference from Version 1: Returns goals in the closed filter and provides filter actions for each filter.",
        "summary": "Get Goal Status Counts, Version 1.1",
        "tags": [
          "Goals"
        ],
        "operationId": "get-goals-filters-v1.1",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "employeeId is the employee ID to whom the goals are assigned.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response content will be a JSON document with the requested information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "filters": {
                      "type": "array",
                      "description": "All the goals of the user seperated by filter.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Id of the filter.",
                            "example": "status-inProgress"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the filter.",
                            "example": "In Progress"
                          },
                          "count": {
                            "type": "integer",
                            "description": "Count of the goals with that filter.",
                            "example": "3"
                          },
                          "actions": {
                            "type": "object",
                            "description": "What actions a user can preform on this kind of goal.",
                            "properties": {
                              "canCloseGoal": {
                                "type": "boolean",
                                "description": "Can a goal be closed in this state.",
                                "example": "true"
                              },
                              "canEditGoal": {
                                "type": "boolean",
                                "description": "Can a goal be edited in this state.",
                                "example": "true"
                              },
                              "canEditGoalProgressBar": {
                                "type": "boolean",
                                "description": "Can a goal progress bar be edited in this state.",
                                "example": "true"
                              },
                              "canReopenGoal": {
                                "type": "boolean",
                                "description": "Can a goal be reopened in this state.",
                                "example": "true"
                              },
                              "canShareGoal": {
                                "type": "boolean",
                                "description": "Can a goal be shared in this state.",
                                "example": "true"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/performance/employees/{employeeId}/goals/canCreateGoals": {
      "get": {
        "description": "Determine if the API user has permission to create a goal for this employee.",
        "summary": "Can Create a Goal",
        "tags": [
          "Goals"
        ],
        "operationId": "get-can-create-goal",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "employeeId is the employee ID with whom the goal is associated.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response content will be a JSON document with the requested information."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/performance/employees/{employeeId}/goals": {
      "get": {
        "description": "Get goals for an employee.",
        "summary": "Get Goals",
        "tags": [
          "Goals"
        ],
        "operationId": "get-goals",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "employeeId is the employee ID to whom the goals are assigned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "description": "A filter that can be applied to only show the goals that are in a certain state.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response content will be a JSON document with the requested information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "goals": {
                      "type": "array",
                      "description": "All goals of the selected employee",
                      "items": {
                        "type": "object",
                        "description": "An individual goal",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "The id of the goal.",
                            "example": "4"
                          },
                          "title": {
                            "type": "string",
                            "description": "Title of the goal.",
                            "example": "Complete Documentation Epic"
                          },
                          "description": {
                            "type": "string",
                            "description": "A description of the goal.",
                            "example": "Document every endpoint for the goals API."
                          },
                          "percentComplete": {
                            "type": "integer",
                            "description": "A percentage (1-100) that denotes how complete the goal is.",
                            "example": "100"
                          },
                          "alignsWithOptionId": {
                            "type": "integer"
                          },
                          "sharedWithEmployeeIds": {
                            "type": "array",
                            "description": "Ids of the employees that have access to this goal.",
                            "items": {
                              "type": "integer",
                              "example": "89"
                            }
                          },
                          "dueDate": {
                            "type": "string",
                            "format": "date",
                            "description": "The due date of the goal.",
                            "example": "2021-12-17"
                          },
                          "completionDate": {
                            "type": "string",
                            "format": "date",
                            "description": "The date the goal was completed.",
                            "example": "2021-12-16"
                          },
                          "status": {
                            "type": "string",
                            "description": "The status of the goal.",
                            "example": "in_progress"
                          },
                          "milestones": {
                            "type": "array",
                            "description": "All milestones for the individual goal. This array will not exist if milestones are not selected for this goal.",
                            "items": {
                              "type": "object",
                              "description": "An individual milestone.",
                              "properties": {
                                "id": {
                                  "type": "integer",
                                  "description": "The id of the milestone.",
                                  "example": "2"
                                },
                                "employeeGoalId": {
                                  "type": "integer",
                                  "description": "The id of the goal which encompasses this milestone.",
                                  "example": "12"
                                },
                                "title": {
                                  "type": "string",
                                  "description": "The title of the milestone.",
                                  "example": "Sell 15 Doohickeys"
                                },
                                "currentValue": {
                                  "type": "number",
                                  "description": "The current value for a numeric milestone. This number will be rounded to the nearest hundreds. On the creation of a numeric milestone this value will automatically be set to the start value of the milestone. If the milestone is a simple checkbox milestone, this value will always be null.",
                                  "example": "7"
                                },
                                "startValue": {
                                  "type": "number",
                                  "description": "The starting value for a numeric milestone. This number will be rounded to the nearest hundreds. If the milestone is a simple checkbox milestone, this value will always be null.",
                                  "example": "0"
                                },
                                "endValue": {
                                  "type": "number",
                                  "description": "The end goal for a numeric milestone. This number will be rounded to the nearest hundreds. If the milestone is a simple checkbox milestone, this value will always be null.",
                                  "example": "15"
                                },
                                "completedDateTime": {
                                  "type": "string",
                                  "format": "Date-Time",
                                  "description": "The date and time in which the goal has been completed. If the goal is not completed the value will be null.",
                                  "example": "2024-07-12T14:50:46Z"
                                },
                                "lastUpdateDateDateTime": {
                                  "type": "string",
                                  "format": "Date-Time",
                                  "description": "The date and time in which the goal was last updated.",
                                  "example": "2023-07-12T14:50:46Z"
                                },
                                "lastUpdateUserId": {
                                  "type": "integer",
                                  "description": "The ID of the user who last updated this milestone.",
                                  "example": "24"
                                }
                              }
                            }
                          },
                          "actions": {
                            "type": "object",
                            "description": "Actions that are available to a goal with milestones enabled. This object will not appear on a goal without milestones.",
                            "properties": {
                              "canEditGoalProgressBar": {
                                "type": "boolean",
                                "description": "Can the user edit the progress bar of this goal.",
                                "example": "false"
                              },
                              "canEditGoalMilestoneProgressBar": {
                                "type": "boolean",
                                "description": "can the user edit the progress of a milestone in this goal.",
                                "example": "true"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Create a new goal for an employee.",
        "summary": "Create Goal",
        "tags": [
          "Goals"
        ],
        "operationId": "post-goal",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "employeeId is the employee ID with whom the goal is associated.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Add Employee Goal",
                "type": "object",
                "properties": {
                  "title": {
                    "description": "[Required] The goal title.",
                    "type": "string",
                    "maxLength": 1024
                  },
                  "description": {
                    "description": "[Optional] The goal description.",
                    "type": "string",
                    "maxLength": 65535
                  },
                  "percentComplete": {
                    "description": "[Optional] The goal completion percentage (0 - 100). If completionDate is set, this value must be 100.",
                    "type": "integer"
                  },
                  "alignsWithOptionId": {
                    "description": "[Optional] The option ID that aligns with this goal.",
                    "type": "string"
                  },
                  "sharedWithEmployeeIds": {
                    "description": "[Required] Employee IDs of employees with whom the goal is shared. All goal owners are considered \"shared with\". This must include the employee for whom the goal is created.",
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "maximum": 50
                  },
                  "dueDate": {
                    "description": "[Required] The goal due date in YYYY-mm-dd format.",
                    "type": "string"
                  },
                  "completionDate": {
                    "description": "[Optional] The date the goal was completed. If date is set, and no milestones are contained within this goal, percentComplete must be set to 100. If this goal does contain milestones, completion date cannot be set.",
                    "type": "number",
                    "format": "float"
                  },
                  "milestones": {
                    "description": "[Optional] Milestones for the goal.",
                    "type": "array",
                    "items": {
                      "title": "Goal Milestone",
                      "type": "object",
                      "properties": {
                        "title": {
                          "description": "[Required] The title of the milestone.",
                          "type": "string"
                        },
                        "startValue": {
                          "description": "[Optional] Initial value of the milestone. Rounded to the nearest hundredth. If this value is set, endValue must also be set.",
                          "type": "number",
                          "format": "float"
                        },
                        "endValue": {
                          "description": "[Optional] End goal value for the milestone. Rounded to the nearest hundredth. If this value is set, startValue must also be set.",
                          "type": "number",
                          "format": "float"
                        }
                      },
                      "required": [
                        "title"
                      ]
                    }
                  }
                },
                "required": [
                  "title",
                  "dueDate",
                  "sharedWithEmployeeIds"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A goal object that includes the new goal ID.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "goal": {
                      "type": "object",
                      "description": "An individual goal",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "The id of the goal.",
                          "example": "4"
                        },
                        "title": {
                          "type": "string",
                          "description": "Title of the goal.",
                          "example": "Complete Documentation Epic"
                        },
                        "description": {
                          "type": "string",
                          "description": "A description of the goal.",
                          "example": "Document every endpoint for the goals API."
                        },
                        "percentComplete": {
                          "type": "integer",
                          "description": "A percentage (1-100) that denotes how complete the goal is.",
                          "example": "100"
                        },
                        "alignsWithOptionId": {
                          "type": "integer"
                        },
                        "sharedWithEmployeeIds": {
                          "type": "array",
                          "description": "Ids of the employees that have access to this goal.",
                          "items": {
                            "type": "integer",
                            "example": "89"
                          }
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "date",
                          "description": "The due date of the goal.",
                          "example": "2021-12-17"
                        },
                        "completionDate": {
                          "type": "string",
                          "format": "date",
                          "description": "The date the goal was completed.",
                          "example": "2021-12-16"
                        },
                        "status": {
                          "type": "string",
                          "description": "The status of the goal.",
                          "example": "in_progress"
                        },
                        "milestones": {
                          "type": "array",
                          "description": "All milestones for the individual goal. This array will not exist if milestones are not selected for this goal.",
                          "items": {
                            "type": "object",
                            "description": "An individual milestone.",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "The id of the milestone.",
                                "example": "2"
                              },
                              "employeeGoalId": {
                                "type": "integer",
                                "description": "The id of the goal which encompasses this milestone.",
                                "example": "12"
                              },
                              "title": {
                                "type": "string",
                                "description": "The title of the milestone.",
                                "example": "Sell 15 Doohickeys"
                              },
                              "currentValue": {
                                "type": "number",
                                "description": "The current value for a numeric milestone. This number will be rounded to the nearest hundreds. On the creation of a numeric milestone this value will automatically be set to the start value of the milestone. If the milestone is a simple checkbox milestone, this value will always be null.",
                                "example": "7"
                              },
                              "startValue": {
                                "type": "number",
                                "description": "The starting value for a numeric milestone. This number will be rounded to the nearest hundreds. If the milestone is a simple checkbox milestone, this value will always be null.",
                                "example": "0"
                              },
                              "endValue": {
                                "type": "number",
                                "description": "The end goal for a numeric milestone. This number will be rounded to the nearest hundreds. If the milestone is a simple checkbox milestone, this value will always be null.",
                                "example": "15"
                              },
                              "completedDateTime": {
                                "type": "string",
                                "format": "Date-Time",
                                "description": "The date and time in which the goal has been completed. If the goal is not completed the value will be null.",
                                "example": "2024-07-12T14:50:46Z"
                              },
                              "lastUpdateDateDateTime": {
                                "type": "string",
                                "format": "Date-Time",
                                "description": "The date and time in which the goal was last updated.",
                                "example": "2023-07-12T14:50:46Z"
                              },
                              "lastUpdateUserId": {
                                "type": "integer",
                                "description": "The ID of the user who last updated this milestone.",
                                "example": "24"
                              }
                            }
                          }
                        },
                        "actions": {
                          "type": "object",
                          "description": "Actions that are available to a goal with milestones enabled. This object will not appear on a goal without milestones.",
                          "properties": {
                            "canEditGoalProgressBar": {
                              "type": "boolean",
                              "description": "Can the user edit the progress bar of this goal.",
                              "example": "false"
                            },
                            "canEditGoalMilestoneProgressBar": {
                              "type": "boolean",
                              "description": "can the user edit the progress of a milestone in this goal.",
                              "example": "true"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the posted XML or JSON is invalid or the minimum fields are not provided."
          },
          "403": {
            "description": "If the API user does not have permission to create a goal for this employee."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}": {
      "put": {
        "description": "Update a goal. This version will not update a goal to contain milestones, that functionality is added in version 1.1",
        "summary": "Update Goal",
        "tags": [
          "Goals"
        ],
        "operationId": "put-goal-v1",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "employeeId is the employee ID with whom the goal is associated.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "goalId",
            "in": "path",
            "required": true,
            "description": "goalId is the goal ID for the specified employee.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Employee Goal",
                "type": "object",
                "properties": {
                  "id": {
                    "description": "A unique identifier for the record. Use this ID to reference this goal.",
                    "type": "integer"
                  },
                  "title": {
                    "description": "The goal title.",
                    "type": "string",
                    "maxLength": 1024
                  },
                  "description": {
                    "description": "The goal description.",
                    "type": "string",
                    "maxLength": 65535
                  },
                  "percentComplete": {
                    "description": "The goal completion percentage (0 - 100).",
                    "type": "integer"
                  },
                  "alignsWithOptionId": {
                    "description": "The option ID that aligns with this goal.",
                    "type": "string"
                  },
                  "sharedWithEmployeeIds": {
                    "description": "Employee IDs of employees with whom the goal is shared. All goal owners are considered \"shared with\".",
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "maximum": 50
                  },
                  "dueDate": {
                    "description": "The goal due date in YYYY-mm-dd format.",
                    "type": "string"
                  },
                  "completionDate": {
                    "description": "The date the goal was completed.",
                    "type": "number",
                    "format": "float"
                  }
                },
                "required": [
                  "id",
                  "title"
                ]
              }
            }
          },
          "description": "Required fields: title, sharedWithEmployeeIds, dueDate. Any non-required field not provided will overwrite existing data with a NULL value.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response indicates that all the requested changes were made. The content of the response will be the goal response object for the specified goalId.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "goal": {
                      "type": "object",
                      "description": "An individual goal",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "The id of the goal.",
                          "example": "4"
                        },
                        "title": {
                          "type": "string",
                          "description": "Title of the goal.",
                          "example": "Complete Documentation Epic"
                        },
                        "description": {
                          "type": "string",
                          "description": "A description of the goal.",
                          "example": "Document every endpoint for the goals API."
                        },
                        "percentComplete": {
                          "type": "integer",
                          "description": "A percentage (1-100) that denotes how complete the goal is.",
                          "example": "100"
                        },
                        "alignsWithOptionId": {
                          "type": "integer"
                        },
                        "sharedWithEmployeeIds": {
                          "type": "array",
                          "description": "Ids of the employees that have access to this goal.",
                          "items": {
                            "type": "integer",
                            "example": "89"
                          }
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "date",
                          "description": "The due date of the goal.",
                          "example": "2021-12-17"
                        },
                        "completionDate": {
                          "type": "string",
                          "format": "date",
                          "description": "The date the goal was completed.",
                          "example": "2021-12-16"
                        },
                        "status": {
                          "type": "string",
                          "description": "The status of the goal.",
                          "example": "in_progress"
                        },
                        "milestones": {
                          "type": "array",
                          "description": "All milestones for the individual goal. This array will not exist if milestones are not selected for this goal.",
                          "items": {
                            "type": "object",
                            "description": "An individual milestone.",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "The id of the milestone.",
                                "example": "2"
                              },
                              "employeeGoalId": {
                                "type": "integer",
                                "description": "The id of the goal which encompasses this milestone.",
                                "example": "12"
                              },
                              "title": {
                                "type": "string",
                                "description": "The title of the milestone.",
                                "example": "Sell 15 Doohickeys"
                              },
                              "currentValue": {
                                "type": "number",
                                "description": "The current value for a numeric milestone. This number will be rounded to the nearest hundreds. On the creation of a numeric milestone this value will automatically be set to the start value of the milestone. If the milestone is a simple checkbox milestone, this value will always be null.",
                                "example": "7"
                              },
                              "startValue": {
                                "type": "number",
                                "description": "The starting value for a numeric milestone. This number will be rounded to the nearest hundreds. If the milestone is a simple checkbox milestone, this value will always be null.",
                                "example": "0"
                              },
                              "endValue": {
                                "type": "number",
                                "description": "The end goal for a numeric milestone. This number will be rounded to the nearest hundreds. If the milestone is a simple checkbox milestone, this value will always be null.",
                                "example": "15"
                              },
                              "completedDateTime": {
                                "type": "string",
                                "format": "Date-Time",
                                "description": "The date and time in which the goal has been completed. If the goal is not completed the value will be null.",
                                "example": "2024-07-12T14:50:46Z"
                              },
                              "lastUpdateDateDateTime": {
                                "type": "string",
                                "format": "Date-Time",
                                "description": "The date and time in which the goal was last updated.",
                                "example": "2023-07-12T14:50:46Z"
                              },
                              "lastUpdateUserId": {
                                "type": "integer",
                                "description": "The ID of the user who last updated this milestone.",
                                "example": "24"
                              }
                            }
                          }
                        },
                        "actions": {
                          "type": "object",
                          "description": "Actions that are available to a goal with milestones enabled. This object will not appear on a goal without milestones.",
                          "properties": {
                            "canEditGoalProgressBar": {
                              "type": "boolean",
                              "description": "Can the user edit the progress bar of this goal.",
                              "example": "false"
                            },
                            "canEditGoalMilestoneProgressBar": {
                              "type": "boolean",
                              "description": "can the user edit the progress of a milestone in this goal.",
                              "example": "true"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The posted JSON is invalid."
          },
          "403": {
            "description": "Goal is not editable or insufficient permissions."
          },
          "404": {
            "description": "The goal specified by the given goalId was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete a goal.",
        "summary": "Delete Goal",
        "tags": [
          "Goals"
        ],
        "operationId": "delete-goal",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "employeeId is the employee ID with whom the goal is associated.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "goalId",
            "in": "path",
            "required": true,
            "description": "goalId is the goal ID for the specified employee.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful deletion will return a 204 - No content response."
          },
          "400": {
            "description": "The posted JSON is invalid."
          },
          "403": {
            "description": "Goal is not editable or insufficient permissions."
          },
          "404": {
            "description": "The goal specified by the given goalId was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1_1/performance/employees/{employeeId}/goals/{goalId}": {
      "put": {
        "description": "Update a goal. Version 1.1 allows the updating of the milestones contained within the goal, unlike Version 1.",
        "summary": "Update Goal, V1.1",
        "tags": [
          "Goals"
        ],
        "operationId": "put-goal-v1.1",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "employeeId is the employee ID with whom the goal is associated.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "goalId",
            "in": "path",
            "required": true,
            "description": "goalId is the goal ID for the specified employee.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Update Employee Goal With Milestones",
                "type": "object",
                "properties": {
                  "title": {
                    "description": "[Required] The goal title.",
                    "type": "string",
                    "maxLength": 1024
                  },
                  "description": {
                    "description": "[Optional] The goal description.",
                    "type": "string",
                    "maxLength": 65535
                  },
                  "alignsWithOptionId": {
                    "description": "[Optional] The option ID that aligns with this goal.",
                    "type": "string"
                  },
                  "sharedWithEmployeeIds": {
                    "description": "[Required] Employee IDs of employees with whom the goal is shared. All goal owners are considered \"shared with\". This must include the employee for whom the goal is created.",
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "maximum": 50
                  },
                  "dueDate": {
                    "description": "[Required] The goal due date in YYYY-mm-dd format.",
                    "type": "string"
                  },
                  "milestonesEnabled": {
                    "description": "[Optional] A flag indicating whether or not milestones are enabled for this goal. Setting this flag to false will delete all existing milestones for this goal.",
                    "type": "boolean"
                  },
                  "deletedMilestoneIds": {
                    "description": "[Optional] Ids of all the milestones to be deleted with the update.",
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "milestones": {
                    "description": "[Optional] All milestones to be added to the goal with this update.",
                    "type": "array",
                    "items": {
                      "title": "Goal Milestone",
                      "type": "object",
                      "properties": {
                        "title": {
                          "description": "[Required] The title of the milestone.",
                          "type": "string"
                        },
                        "startValue": {
                          "description": "[Optional] Initial value of the milestone. Rounded to the nearest hundredth. If this value is set, endValue must also be set.",
                          "type": "number",
                          "format": "float"
                        },
                        "endValue": {
                          "description": "[Optional] End goal value for the milestone. Rounded to the nearest hundredth. If this value is set, startValue must also be set.",
                          "type": "number",
                          "format": "float"
                        }
                      },
                      "required": [
                        "title"
                      ]
                    }
                  }
                },
                "required": [
                  "title",
                  "dueDate",
                  "sharedWithEmployeeIds"
                ]
              }
            }
          },
          "description": "Required fields: title, sharedWithEmployeeIds, dueDate. Any non-required field not provided will overwrite existing data with a NULL value.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response indicates that all the requested changes were made. The content of the response will be the goal response object for the specified goalId.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "goal": {
                      "type": "object",
                      "description": "An individual goal",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "The id of the goal.",
                          "example": "4"
                        },
                        "title": {
                          "type": "string",
                          "description": "Title of the goal.",
                          "example": "Complete Documentation Epic"
                        },
                        "description": {
                          "type": "string",
                          "description": "A description of the goal.",
                          "example": "Document every endpoint for the goals API."
                        },
                        "percentComplete": {
                          "type": "integer",
                          "description": "A percentage (1-100) that denotes how complete the goal is.",
                          "example": "100"
                        },
                        "alignsWithOptionId": {
                          "type": "integer"
                        },
                        "sharedWithEmployeeIds": {
                          "type": "array",
                          "description": "Ids of the employees that have access to this goal.",
                          "items": {
                            "type": "integer",
                            "example": "89"
                          }
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "date",
                          "description": "The due date of the goal.",
                          "example": "2021-12-17"
                        },
                        "completionDate": {
                          "type": "string",
                          "format": "date",
                          "description": "The date the goal was completed.",
                          "example": "2021-12-16"
                        },
                        "status": {
                          "type": "string",
                          "description": "The status of the goal.",
                          "example": "in_progress"
                        },
                        "milestones": {
                          "type": "array",
                          "description": "All milestones for the individual goal. This array will not exist if milestones are not selected for this goal.",
                          "items": {
                            "type": "object",
                            "description": "An individual milestone.",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "The id of the milestone.",
                                "example": "2"
                              },
                              "employeeGoalId": {
                                "type": "integer",
                                "description": "The id of the goal which encompasses this milestone.",
                                "example": "12"
                              },
                              "title": {
                                "type": "string",
                                "description": "The title of the milestone.",
                                "example": "Sell 15 Doohickeys"
                              },
                              "currentValue": {
                                "type": "number",
                                "description": "The current value for a numeric milestone. This number will be rounded to the nearest hundreds. On the creation of a numeric milestone this value will automatically be set to the start value of the milestone. If the milestone is a simple checkbox milestone, this value will always be null.",
                                "example": "7"
                              },
                              "startValue": {
                                "type": "number",
                                "description": "The starting value for a numeric milestone. This number will be rounded to the nearest hundreds. If the milestone is a simple checkbox milestone, this value will always be null.",
                                "example": "0"
                              },
                              "endValue": {
                                "type": "number",
                                "description": "The end goal for a numeric milestone. This number will be rounded to the nearest hundreds. If the milestone is a simple checkbox milestone, this value will always be null.",
                                "example": "15"
                              },
                              "completedDateTime": {
                                "type": "string",
                                "format": "Date-Time",
                                "description": "The date and time in which the goal has been completed. If the goal is not completed the value will be null.",
                                "example": "2024-07-12T14:50:46Z"
                              },
                              "lastUpdateDateDateTime": {
                                "type": "string",
                                "format": "Date-Time",
                                "description": "The date and time in which the goal was last updated.",
                                "example": "2023-07-12T14:50:46Z"
                              },
                              "lastUpdateUserId": {
                                "type": "integer",
                                "description": "The ID of the user who last updated this milestone.",
                                "example": "24"
                              }
                            }
                          }
                        },
                        "actions": {
                          "type": "object",
                          "description": "Actions that are available to a goal with milestones enabled. This object will not appear on a goal without milestones.",
                          "properties": {
                            "canEditGoalProgressBar": {
                              "type": "boolean",
                              "description": "Can the user edit the progress bar of this goal.",
                              "example": "false"
                            },
                            "canEditGoalMilestoneProgressBar": {
                              "type": "boolean",
                              "description": "can the user edit the progress of a milestone in this goal.",
                              "example": "true"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The posted JSON is invalid."
          },
          "403": {
            "description": "Goal is not editable or insufficient permissions."
          },
          "404": {
            "description": "The goal specified by the given goalId was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/close": {
      "post": {
        "description": "Close a goal.",
        "summary": "Close Goal",
        "tags": [
          "Goals"
        ],
        "operationId": "post-close-goal",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "employeeId is the employee ID with whom the goal is associated.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "goalId",
            "in": "path",
            "required": true,
            "description": "goalId is the goal ID for the specified employee.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "Comment field is optional."
        },
        "responses": {
          "201": {
            "description": "A successful response indicates that all the goal was closed. The content of the response will be the goal response object for the specified goalId.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "goal": {
                      "type": "object",
                      "description": "An individual goal",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "The id of the goal.",
                          "example": "4"
                        },
                        "title": {
                          "type": "string",
                          "description": "Title of the goal.",
                          "example": "Complete Documentation Epic"
                        },
                        "description": {
                          "type": "string",
                          "description": "A description of the goal.",
                          "example": "Document every endpoint for the goals API."
                        },
                        "percentComplete": {
                          "type": "integer",
                          "description": "A percentage (1-100) that denotes how complete the goal is.",
                          "example": "100"
                        },
                        "alignsWithOptionId": {
                          "type": "integer"
                        },
                        "sharedWithEmployeeIds": {
                          "type": "array",
                          "description": "Ids of the employees that have access to this goal.",
                          "items": {
                            "type": "integer",
                            "example": "89"
                          }
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "date",
                          "description": "The due date of the goal.",
                          "example": "2021-12-17"
                        },
                        "completionDate": {
                          "type": "string",
                          "format": "date",
                          "description": "The date the goal was completed.",
                          "example": "2021-12-16"
                        },
                        "status": {
                          "type": "string",
                          "description": "The status of the goal.",
                          "example": "in_progress"
                        },
                        "milestones": {
                          "type": "array",
                          "description": "All milestones for the individual goal. This array will not exist if milestones are not selected for this goal.",
                          "items": {
                            "type": "object",
                            "description": "An individual milestone.",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "The id of the milestone.",
                                "example": "2"
                              },
                              "employeeGoalId": {
                                "type": "integer",
                                "description": "The id of the goal which encompasses this milestone.",
                                "example": "12"
                              },
                              "title": {
                                "type": "string",
                                "description": "The title of the milestone.",
                                "example": "Sell 15 Doohickeys"
                              },
                              "currentValue": {
                                "type": "number",
                                "description": "The current value for a numeric milestone. This number will be rounded to the nearest hundreds. On the creation of a numeric milestone this value will automatically be set to the start value of the milestone. If the milestone is a simple checkbox milestone, this value will always be null.",
                                "example": "7"
                              },
                              "startValue": {
                                "type": "number",
                                "description": "The starting value for a numeric milestone. This number will be rounded to the nearest hundreds. If the milestone is a simple checkbox milestone, this value will always be null.",
                                "example": "0"
                              },
                              "endValue": {
                                "type": "number",
                                "description": "The end goal for a numeric milestone. This number will be rounded to the nearest hundreds. If the milestone is a simple checkbox milestone, this value will always be null.",
                                "example": "15"
                              },
                              "completedDateTime": {
                                "type": "string",
                                "format": "Date-Time",
                                "description": "The date and time in which the goal has been completed. If the goal is not completed the value will be null.",
                                "example": "2024-07-12T14:50:46Z"
                              },
                              "lastUpdateDateDateTime": {
                                "type": "string",
                                "format": "Date-Time",
                                "description": "The date and time in which the goal was last updated.",
                                "example": "2023-07-12T14:50:46Z"
                              },
                              "lastUpdateUserId": {
                                "type": "integer",
                                "description": "The ID of the user who last updated this milestone.",
                                "example": "24"
                              }
                            }
                          }
                        },
                        "actions": {
                          "type": "object",
                          "description": "Actions that are available to a goal with milestones enabled. This object will not appear on a goal without milestones.",
                          "properties": {
                            "canEditGoalProgressBar": {
                              "type": "boolean",
                              "description": "Can the user edit the progress bar of this goal.",
                              "example": "false"
                            },
                            "canEditGoalMilestoneProgressBar": {
                              "type": "boolean",
                              "description": "can the user edit the progress of a milestone in this goal.",
                              "example": "true"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The posted JSON is invalid."
          },
          "403": {
            "description": "Goal is not editable or insufficient permissions."
          },
          "404": {
            "description": "The goal specified by the given goalId was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/reopen": {
      "post": {
        "description": "Reopen a goal.",
        "summary": "Reopen a Goal",
        "tags": [
          "Goals"
        ],
        "operationId": "post-reopen-goal",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "employeeId is the employee ID with whom the goal is associated.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "goalId",
            "in": "path",
            "required": true,
            "description": "goalId is the goal ID for the specified employee.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response indicates that all the goal was reopened. The content of the response will be the goal response object for the specified goalId.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "goal": {
                      "type": "object",
                      "description": "An individual goal",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "The id of the goal.",
                          "example": "4"
                        },
                        "title": {
                          "type": "string",
                          "description": "Title of the goal.",
                          "example": "Complete Documentation Epic"
                        },
                        "description": {
                          "type": "string",
                          "description": "A description of the goal.",
                          "example": "Document every endpoint for the goals API."
                        },
                        "percentComplete": {
                          "type": "integer",
                          "description": "A percentage (1-100) that denotes how complete the goal is.",
                          "example": "100"
                        },
                        "alignsWithOptionId": {
                          "type": "integer"
                        },
                        "sharedWithEmployeeIds": {
                          "type": "array",
                          "description": "Ids of the employees that have access to this goal.",
                          "items": {
                            "type": "integer",
                            "example": "89"
                          }
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "date",
                          "description": "The due date of the goal.",
                          "example": "2021-12-17"
                        },
                        "completionDate": {
                          "type": "string",
                          "format": "date",
                          "description": "The date the goal was completed.",
                          "example": "2021-12-16"
                        },
                        "status": {
                          "type": "string",
                          "description": "The status of the goal.",
                          "example": "in_progress"
                        },
                        "milestones": {
                          "type": "array",
                          "description": "All milestones for the individual goal. This array will not exist if milestones are not selected for this goal.",
                          "items": {
                            "type": "object",
                            "description": "An individual milestone.",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "The id of the milestone.",
                                "example": "2"
                              },
                              "employeeGoalId": {
                                "type": "integer",
                                "description": "The id of the goal which encompasses this milestone.",
                                "example": "12"
                              },
                              "title": {
                                "type": "string",
                                "description": "The title of the milestone.",
                                "example": "Sell 15 Doohickeys"
                              },
                              "currentValue": {
                                "type": "number",
                                "description": "The current value for a numeric milestone. This number will be rounded to the nearest hundreds. On the creation of a numeric milestone this value will automatically be set to the start value of the milestone. If the milestone is a simple checkbox milestone, this value will always be null.",
                                "example": "7"
                              },
                              "startValue": {
                                "type": "number",
                                "description": "The starting value for a numeric milestone. This number will be rounded to the nearest hundreds. If the milestone is a simple checkbox milestone, this value will always be null.",
                                "example": "0"
                              },
                              "endValue": {
                                "type": "number",
                                "description": "The end goal for a numeric milestone. This number will be rounded to the nearest hundreds. If the milestone is a simple checkbox milestone, this value will always be null.",
                                "example": "15"
                              },
                              "completedDateTime": {
                                "type": "string",
                                "format": "Date-Time",
                                "description": "The date and time in which the goal has been completed. If the goal is not completed the value will be null.",
                                "example": "2024-07-12T14:50:46Z"
                              },
                              "lastUpdateDateDateTime": {
                                "type": "string",
                                "format": "Date-Time",
                                "description": "The date and time in which the goal was last updated.",
                                "example": "2023-07-12T14:50:46Z"
                              },
                              "lastUpdateUserId": {
                                "type": "integer",
                                "description": "The ID of the user who last updated this milestone.",
                                "example": "24"
                              }
                            }
                          }
                        },
                        "actions": {
                          "type": "object",
                          "description": "Actions that are available to a goal with milestones enabled. This object will not appear on a goal without milestones.",
                          "properties": {
                            "canEditGoalProgressBar": {
                              "type": "boolean",
                              "description": "Can the user edit the progress bar of this goal.",
                              "example": "false"
                            },
                            "canEditGoalMilestoneProgressBar": {
                              "type": "boolean",
                              "description": "can the user edit the progress of a milestone in this goal.",
                              "example": "true"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The posted JSON is invalid."
          },
          "403": {
            "description": "Goal is not editable or insufficient permissions."
          },
          "404": {
            "description": "The goal specified by the given goalId was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/performance/employees/{employeeId}/goals/shareOptions": {
      "get": {
        "description": "Provides a list of employees with whom the specified employee's goals may be shared.",
        "summary": "Available Goal Sharing Options",
        "tags": [
          "Goals"
        ],
        "operationId": "get-goals-share-options",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "employeeId is the employee ID to get sharing options for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "description": "The search term used to filter employees returned. Will search name, employee ID and email.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Limit will restrict results to specified number.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response content will be a JSON document with a list of available employees with whom the goals can be shared."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/performance/employees/{employeeId}/goals/alignmentOptions": {
      "get": {
        "description": "Get alignable goal options for an employee.",
        "summary": "Alignable Goal Options",
        "tags": [
          "Goals"
        ],
        "operationId": "get-goals-alignment-options",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "employeeId is the employee ID to get alignable goal options for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "Get alignment options including the option currently aligned with this goal (if applicable). If omitted, response will be alignment options belonging to the API user."
        },
        "responses": {
          "200": {
            "description": "The response content will be a JSON document with a list of goals that are available alignment options."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/comments": {
      "get": {
        "description": "Get comments for a goal.",
        "summary": "Get Goal Comments",
        "tags": [
          "Goals"
        ],
        "operationId": "get-goal-comments",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "employeeId is the employee ID with whom the goal is associated.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "goalId",
            "in": "path",
            "required": true,
            "description": "goalId is the goal ID for the specified employee.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response content will be a JSON document with a list of comments for the specified goal."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Create a new goal comment.",
        "summary": "Create Goal Comment",
        "tags": [
          "Goals"
        ],
        "operationId": "post-goal-comment",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "employeeId is the employee ID with whom the goal is associated.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "goalId",
            "in": "path",
            "required": true,
            "description": "goalId is the goal ID for the specified employee.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A goal comment object with the new goal comment ID."
          },
          "400": {
            "description": "If the posted XML or JSON is invalid or the minimum fields are not provided."
          },
          "403": {
            "description": "If the API user does not have permission to add a comment to the specified goal."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/comments/{commentId}": {
      "put": {
        "description": "Update a goal comment.",
        "summary": "Update Goal Comment",
        "tags": [
          "Goals"
        ],
        "operationId": "put-goal-comment",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "employeeId is the employee ID with whom the goal is associated.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "goalId",
            "in": "path",
            "required": true,
            "description": "goalId is the goal ID for the specified employee.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "description": "commentId is the comment ID for the specified goal.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response indicates that all the requested changes were made. The content of the response will be the goal comment response object for the specified commentId."
          },
          "400": {
            "description": "The posted JSON is invalid."
          },
          "403": {
            "description": "Goal is not editable or insufficient permissions."
          },
          "404": {
            "description": "The goal specified by the given goalId was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete a goal comment.",
        "summary": "Delete Goal Comment",
        "tags": [
          "Goals"
        ],
        "operationId": "delete-goal-comment",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "employeeId is the employee ID with whom the goal is associated.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "goalId",
            "in": "path",
            "required": true,
            "description": "goalId is the goal ID for the specified employee.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "description": "commentId is the ID of a specific comment for the specified goal.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful deletion will return a 204 - No content response."
          },
          "400": {
            "description": "The posted JSON is invalid."
          },
          "403": {
            "description": "Goal is not editable or insufficient permissions."
          },
          "404": {
            "description": "The goal specified by the given goalId was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/applicant_tracking/jobs": {
      "get": {
        "description": "Get a list of job summaries. The owner of the API key used must have access to ATS settings. Combine as many different optional parameter filters as you like.",
        "summary": "Get Job Summaries",
        "tags": [
          "Applicant Tracking"
        ],
        "operationId": "get-job-summaries",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statusGroups",
            "in": "query",
            "description": "A list of status groups to filter positions by.",
            "schema": {
              "type": "string",
              "enum": [
                "ALL",
                "DRAFT_AND_OPEN",
                "Open",
                "Filled",
                "Draft",
                "Deleted",
                "On Hold",
                "Canceled"
              ]
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "A specific field to sort the results by.",
            "schema": {
              "type": "string",
              "enum": [
                "count",
                "title",
                "lead",
                "created",
                "status"
              ]
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Order by which to sort results.",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": [
                      {
                        "postedDate": "2017-11-30 16:59:40",
                        "location": {
                          "id": 5094,
                          "label": "St. Louis",
                          "address": {
                            "name": null,
                            "description": null,
                            "addressLine1": null,
                            "addressLine2": null,
                            "city": "Lehi",
                            "state": "Utah",
                            "zipcode": "84043",
                            "country": "United States",
                            "phoneNumber": null
                          }
                        },
                        "department": {
                          "id": 367,
                          "label": "Engineering"
                        },
                        "status": {
                          "id": 1,
                          "label": "Open"
                        },
                        "newApplicantsCount": 1,
                        "activeApplicantsCount": 3,
                        "totalApplicantsCount": 4,
                        "id": 2,
                        "title": {
                          "id": 7153,
                          "label": "Draftsperson"
                        },
                        "postingUrl": "string"
                      },
                      {
                        "postedDate": "2017-12-08 15:29:44",
                        "location": {
                          "id": 5094,
                          "label": "St. Louis",
                          "address": {
                            "name": null,
                            "description": null,
                            "addressLine1": null,
                            "addressLine2": null,
                            "city": "Lehi",
                            "state": "Utah",
                            "zipcode": "84043",
                            "country": "United States",
                            "phoneNumber": null
                          }
                        },
                        "department": {
                          "id": 17813,
                          "label": "HR"
                        },
                        "status": {
                          "id": 1,
                          "label": "Open"
                        },
                        "newApplicantsCount": 5,
                        "activeApplicantsCount": 5,
                        "totalApplicantsCount": 5,
                        "id": 3,
                        "title": {
                          "id": 16222,
                          "label": "HR Specialist"
                        },
                        "postingUrl": "string"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request parameters."
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Insufficient user permissions or API access is not turned on."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/applicant_tracking/applications": {
      "get": {
        "description": "Get a list of applications. The owner of the API key used must have access to ATS settings. Combine as many different optional parameter filters as you like.",
        "summary": "Get Applications",
        "tags": [
          "Applicant Tracking"
        ],
        "operationId": "get-applications",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "jobId",
            "in": "query",
            "description": "A Job Id to limit results to",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "applicationStatusId",
            "in": "query",
            "description": "Application status id to filter by.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "applicationStatus",
            "in": "query",
            "description": "A list of application status groups to filter by.",
            "schema": {
              "type": "string",
              "enum": [
                "ALL",
                "ALL_ACTIVE",
                "NEW",
                "ACTIVE",
                "INACTIVE",
                "HIRED"
              ]
            }
          },
          {
            "name": "jobStatusGroups",
            "in": "query",
            "description": "A list of position status groups to filter by.",
            "schema": {
              "type": "string",
              "enum": [
                "ALL",
                "DRAFT_AND_OPEN",
                "Open",
                "Filled",
                "Draft",
                "Deleted",
                "On Hold",
                "Canceled"
              ]
            }
          },
          {
            "name": "searchString",
            "in": "query",
            "description": "A general search criteria by which to find applications.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "A specific field to sort the results by.",
            "schema": {
              "type": "string",
              "enum": [
                "first_name",
                "job_title",
                "rating",
                "phone",
                "status",
                "last_updated",
                "created_date"
              ]
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Order by which to sort results.",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "name": "newSince",
            "in": "query",
            "description": "Only get applications newer than a given UTC timestamp, for example 2024-01-01 13:00:00",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "paginationComplete": true,
                      "applications": [
                        {
                          "id": 0,
                          "appliedDate": "string",
                          "status": {
                            "id": 0,
                            "label": "string"
                          },
                          "rating": 0,
                          "applicant": {
                            "id": 0,
                            "firstName": "string",
                            "lastName": "string",
                            "avatar": "string"
                          },
                          "job": {
                            "id": 0,
                            "title": {
                              "id": 0,
                              "label": "string"
                            }
                          }
                        }
                      ],
                      "nextPageUrl": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request parameters."
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Insufficient user permissions or API access is not turned on."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/applicant_tracking/applications/{applicationId}": {
      "get": {
        "description": "Get the details of an application. The owner of the API key used must have access to ATS settings.",
        "summary": "Get Application Details",
        "tags": [
          "Applicant Tracking"
        ],
        "operationId": "get-application-details",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "description": "The ID of the application to look up details.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "id": 4,
                      "appliedDate": "2018-02-09 19:43:31",
                      "status": {
                        "id": 19,
                        "label": "Moved",
                        "changedByUser": {
                          "id": 2292,
                          "firstName": "Jim",
                          "lastName": "Gang",
                          "avatar": null
                        }
                      },
                      "rating": 5,
                      "resumeFileId": 10,
                      "coverLetterFileId": 5,
                      "movedTo": {
                        "applicationId": 5,
                        "job": {
                          "id": 16222,
                          "title": {
                            "id": 254,
                            "label": "HR Specialist"
                          }
                        }
                      },
                      "movedFrom": null,
                      "alsoAppliedToCount": 2,
                      "duplicateApplicationCount": 1,
                      "referredBy": null,
                      "desiredSalary": "80000",
                      "commentCount": 1,
                      "emailCount": 0,
                      "questionsAndAnswers": [
                        {
                          "question": {
                            "id": 1,
                            "label": "What's your favorite color"
                          },
                          "answer": {
                            "id": 22,
                            "label": "blue"
                          }
                        }
                      ],
                      "applicant": {
                        "email": "test@bamboohr.com",
                        "phoneNumber": "8019942392",
                        "address": {
                          "addressLine1": "12 w 12 s",
                          "addressLine2": null,
                          "city": "Lehi",
                          "state": "UT",
                          "zipcode": "84005",
                          "country": "United States"
                        },
                        "linkedinUrl": null,
                        "websiteUrl": null,
                        "availableStartDate": null,
                        "education": {
                          "institution": "Arizona University",
                          "level": {
                            "id": 10,
                            "label": "Master of Science"
                          }
                        },
                        "id": 35,
                        "firstName": "Jimmy",
                        "lastName": "Jackson",
                        "avatar": null
                      },
                      "job": {
                        "hiringLead": {
                          "employeeId": 40340,
                          "firstName": "Josh",
                          "lastName": "Smith",
                          "avatar": null,
                          "jobTitle": {
                            "id": 205,
                            "label": "Head Engineer"
                          }
                        },
                        "id": 1,
                        "title": {
                          "id": 6477,
                          "label": "CEO"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Insufficient user permissions or API access is not turned on."
          },
          "404": {
            "description": "Bad request url."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/applicant_tracking/applications/{applicationId}/comments": {
      "post": {
        "description": "Add a comment to an application. The owner of the API key used must have access to ATS settings.",
        "summary": "Add Application Comment",
        "tags": [
          "Applicant Tracking"
        ],
        "operationId": "post-application-comment",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "description": "The ID of the application to add a comment to.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "comment"
                ],
                "properties": {
                  "type": {
                    "description": "Always the value \"comment\".",
                    "type": "string",
                    "default": "comment",
                    "pattern": "^comment$"
                  },
                  "comment": {
                    "description": "The comment being posted.",
                    "type": "string"
                  }
                },
                "example": {
                  "type": "comment",
                  "comment": "I really like this applicant"
                }
              }
            }
          },
          "description": "Comment object to post",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success."
          },
          "400": {
            "description": "Bad request parameters."
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Insufficient user permissions or API access is not turned on."
          },
          "404": {
            "description": "Bad request url."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/applicant_tracking/statuses": {
      "get": {
        "description": "Get a list of statuses for a company. The owner of the API key used must have access to ATS settings.",
        "summary": "Get Statuses",
        "tags": [
          "Applicant Tracking"
        ],
        "operationId": "get-statuses",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": [
                      {
                        "code": "PHONE",
                        "description": null,
                        "enabled": true,
                        "id": "2",
                        "manageable": true,
                        "name": "Phone Screened",
                        "translatedName": "Phone Screened"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Insufficient user permissions or API access is not turned on."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/applicant_tracking/applications/{applicationId}/status": {
      "post": {
        "description": "Change applicant's status. The owner of the API key used must have access to ATS settings.",
        "summary": "Change Applicant's Status",
        "tags": [
          "Applicant Tracking"
        ],
        "operationId": "post-applicant-status",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "description": "The ID of the application to add a comment to.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "description": "Associates a status id with an application.",
                    "type": "integer"
                  }
                },
                "example": {
                  "status": "2"
                }
              }
            }
          },
          "description": "Sample Post Data.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request parameters."
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Insufficient user permissions or API access is not turned on."
          },
          "404": {
            "description": "Bad request url."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/applicant_tracking/locations": {
      "get": {
        "description": "Get company locations for use in creating a new job opening. The owner of the API key used must have access to ATS settings.",
        "summary": "Get Company Locations",
        "tags": [
          "Applicant Tracking"
        ],
        "operationId": "get-company-locations",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "location": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "The ID of the location",
                            "type": "integer"
                          },
                          "name": {
                            "description": "Name of the location",
                            "type": "string"
                          },
                          "description": {
                            "description": "Description of the location",
                            "type": "string"
                          },
                          "city": {
                            "description": "City of the location",
                            "type": "string"
                          },
                          "state": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "The ID of the state",
                                "type": "integer"
                              },
                              "name": {
                                "description": "The name of the state",
                                "type": "string"
                              },
                              "abbrev": {
                                "description": "The abbreviation of the state",
                                "type": "string"
                              },
                              "iso_code": {
                                "description": "The ISO standard code of the state",
                                "type": "string"
                              }
                            }
                          },
                          "country": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "The ID of the country",
                                "type": "integer"
                              },
                              "name": {
                                "description": "The name of the country",
                                "type": "string"
                              },
                              "iso_code": {
                                "description": "The ISO standard code of the country",
                                "type": "string"
                              }
                            }
                          },
                          "zipcode": {
                            "description": "The ZIP or postal code of the location",
                            "type": "string"
                          },
                          "addressLine1": {
                            "description": "The first address line of the location",
                            "type": "string"
                          },
                          "addressLine2": {
                            "description": "The second address line of the location",
                            "type": "string"
                          },
                          "phone": {
                            "description": "The phone number of the location",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Insufficient user permissions or API access is not turned on."
          },
          "404": {
            "description": "Bad request url."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/applicant_tracking/hiring_leads": {
      "get": {
        "description": "Get potential hiring leads for use in creating a new job opening. The owner of the API key used must have access to ATS settings.",
        "summary": "Get Hiring Leads",
        "tags": [
          "Applicant Tracking"
        ],
        "operationId": "get-hiring-leads",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "hiringLead": {
                        "type": "object",
                        "properties": {
                          "employeeId": {
                            "description": "The employeeId of the potential hiring lead",
                            "type": "integer"
                          },
                          "preferredFullName": {
                            "description": "The preferred full name of the potential hiring lead",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Insufficient user permissions or API access is not turned on."
          },
          "404": {
            "description": "Bad request url."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/applicant_tracking/application": {
      "post": {
        "description": "Add a new candidate application to a job opening. The owner of the API key used must have access to ATS settings.",
        "summary": "Add New Candidate",
        "tags": [
          "Applicant Tracking"
        ],
        "operationId": "add-new-candidate",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "description": "The first name of the candidate.",
                    "type": "string"
                  },
                  "lastName": {
                    "description": "The last name of the candidate.",
                    "type": "string"
                  },
                  "email": {
                    "description": "The email address of the candidate.",
                    "type": "string"
                  },
                  "phoneNumber": {
                    "description": "The phone number of the candidate.",
                    "type": "string"
                  },
                  "source": {
                    "description": "The source of the candidate application, e.g. LinkedIn, Indeed, etc.",
                    "type": "string"
                  },
                  "jobId": {
                    "description": "The id of the job opening for the candidate application.",
                    "type": "integer"
                  },
                  "address": {
                    "description": "The street address of the candidate.",
                    "type": "string"
                  },
                  "city": {
                    "description": "The city of the candidate.",
                    "type": "string"
                  },
                  "state": {
                    "description": "The state or province of the candidate. Accepts state name, abbreviation, or ISO code.",
                    "type": "string"
                  },
                  "zip": {
                    "description": "The zip code or postal code of the candidate.",
                    "type": "string"
                  },
                  "country": {
                    "description": "The country of the candidate. Accepts country name or ISO code.",
                    "type": "string"
                  },
                  "linkedinUrl": {
                    "description": "The LinkedIn profile url of the candidate.",
                    "type": "string"
                  },
                  "dateAvailable": {
                    "description": "The available start date of the candidate with the format YYYY-MM-DD.",
                    "type": "string"
                  },
                  "desiredSalary": {
                    "description": "The desired salary of the candidate.",
                    "type": "string"
                  },
                  "referredBy": {
                    "description": "The person or entity that referred the candidate.",
                    "type": "string"
                  },
                  "websiteUrl": {
                    "description": "The personal website, blog, or online portfolio of the candidate.",
                    "type": "string"
                  },
                  "highestEducation": {
                    "description": "The highest completed education level of the candidate.",
                    "type": "string",
                    "enum": [
                      "GED or Equivalent",
                      "High School",
                      "Some College",
                      "College - Associates",
                      "College - Bachelor of Arts",
                      "College - Bachelor of Fine Arts",
                      "College - Bachelor of Science",
                      "College - Master of Arts",
                      "College - Master of Fine Arts",
                      "College - Master of Science",
                      "College - Master of Business Administration",
                      "College - Doctorate",
                      "Medical Doctor",
                      "Other"
                    ]
                  },
                  "collegeName": {
                    "description": "The college or university of the candidate.",
                    "type": "string"
                  },
                  "references": {
                    "description": "A list of references supplied by the candidate.",
                    "type": "string"
                  },
                  "resume": {
                    "description": "Resume of the candidate.",
                    "type": "string",
                    "format": "binary"
                  },
                  "coverLetter": {
                    "description": "Cover letter of the candidate.",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "firstName",
                  "lastName",
                  "jobId"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": [
                      {
                        "result": "success",
                        "candidateId": 42
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Insufficient user permissions or API access is not turned on."
          },
          "404": {
            "description": "Bad request url."
          },
          "422": {
            "description": "Unprocessable entity. One or more parameters failed validation."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/applicant_tracking/job_opening": {
      "post": {
        "description": "Add a new job opening. The owner of the API key used must have access to ATS settings.",
        "summary": "Add New Job Opening",
        "tags": [
          "Applicant Tracking"
        ],
        "operationId": "add-new-job-opening",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "postingTitle": {
                    "description": "The posting title of the job opening.",
                    "type": "string"
                  },
                  "jobStatus": {
                    "description": "The status of the job opening.",
                    "type": "string",
                    "enum": [
                      "Draft",
                      "Open",
                      "On Hold",
                      "Filled",
                      "Canceled"
                    ]
                  },
                  "hiringLead": {
                    "description": "The employee id (from the v1/applicant_tracking/hiring_leads endpoint) of the hiring lead for the job opening.",
                    "type": "integer"
                  },
                  "department": {
                    "description": "The department of the job opening.",
                    "type": "string"
                  },
                  "employmentType": {
                    "description": "The type of employment offered in the job opening, e.g. Full-Time, Part-Time, Contractor, etc.",
                    "type": "string"
                  },
                  "minimumExperience": {
                    "description": "The minimum experience level that qualifies a candidate for the job opening.",
                    "type": "string",
                    "enum": [
                      "Entry-level",
                      "Mid-level",
                      "Experienced",
                      "Manager/Supervisor",
                      "Senior Manager/Supervisor'",
                      "Executive",
                      "Senior Executive"
                    ]
                  },
                  "compensation": {
                    "description": "The pay rate or compensation for the job opening.",
                    "type": "string"
                  },
                  "jobLocation": {
                    "description": "The location id (from the v1/applicant_tracking/locations endpoint) of the job opening. Omit this parameter for a remote job location.",
                    "type": "integer"
                  },
                  "jobDescription": {
                    "description": "The long-form text description of the job opening.",
                    "type": "string"
                  },
                  "applicationQuestionResume": {
                    "description": "Whether the job opening application has a standard question for resume (true) or not (false) or if uploading a resume is mandatory (required).",
                    "type": "string",
                    "enum": [
                      true,
                      false,
                      "Required"
                    ]
                  },
                  "applicationQuestionAddress": {
                    "description": "Whether the job opening application has a standard question for address (true) or not (false) or if entering an address is mandatory (required).",
                    "type": "string",
                    "enum": [
                      true,
                      false,
                      "Required"
                    ]
                  },
                  "applicationQuestionLinkedinUrl": {
                    "description": "Whether the job opening application has a standard question for LinkedIn profile url (true) or not (false) or if entering a LinkedIn profile url is mandatory (required).",
                    "type": "string",
                    "enum": [
                      true,
                      false,
                      "Required"
                    ]
                  },
                  "applicationQuestionDateAvailable": {
                    "description": "Whether the job opening application has a standard question for availability date (true) or not (false) or if entering an availability date is mandatory (required).",
                    "type": "string",
                    "enum": [
                      true,
                      false,
                      "Required"
                    ]
                  },
                  "applicationQuestionDesiredSalary": {
                    "description": "Whether the job opening application has a standard question for desired salary (true) or not (false) or if entering a desired salary is mandatory (required).",
                    "type": "string",
                    "enum": [
                      true,
                      false,
                      "Required"
                    ]
                  },
                  "applicationQuestionCoverLetter": {
                    "description": "Whether the job opening application has a standard question for cover letter (true) or not (false) or if uploading a cover letter is mandatory (required).",
                    "type": "string",
                    "enum": [
                      true,
                      false,
                      "Required"
                    ]
                  },
                  "applicationQuestionReferredBy": {
                    "description": "Whether the job opening application has a standard question for referred by (true) or not (false) or if entering referred by is mandatory (required).",
                    "type": "string",
                    "enum": [
                      true,
                      false,
                      "Required"
                    ]
                  },
                  "applicationQuestionWebsiteUrl": {
                    "description": "Whether the job opening application has a standard question for website url (true) or not (false) or if entering a website url is mandatory (required).",
                    "type": "string",
                    "enum": [
                      true,
                      false,
                      "Required"
                    ]
                  },
                  "applicationQuestionHighestEducation": {
                    "description": "Whether the job opening application has a standard question for highest education (true) or not (false) or if entering highest education is mandatory (required).",
                    "type": "string",
                    "enum": [
                      true,
                      false,
                      "Required"
                    ]
                  },
                  "applicationQuestionCollege": {
                    "description": "Whether the job opening application has a standard question for college (true) or not (false) or if entering a college is mandatory (required).",
                    "type": "string",
                    "enum": [
                      true,
                      false,
                      "Required"
                    ]
                  },
                  "applicationQuestionReferences": {
                    "description": "Whether the job opening application has a standard question for references (true) or not (false) or if entering references is mandatory (required).",
                    "type": "string",
                    "enum": [
                      true,
                      false,
                      "Required"
                    ]
                  },
                  "internalJobCode": {
                    "description": "The internal job code for the job opening.",
                    "type": "string"
                  }
                },
                "required": [
                  "postingTitle",
                  "jobStatus",
                  "hiringLead",
                  "employmentType",
                  "jobDescription"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": [
                      {
                        "result": "success",
                        "jobOpeningId": 11
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Insufficient user permissions or API access is not turned on."
          },
          "404": {
            "description": "Bad request url."
          },
          "422": {
            "description": "Unprocessable entity. One or more parameters failed validation."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/training/type": {
      "get": {
        "description": "Get a list of training types. The owner of the API key used must have access to training settings.",
        "summary": "List Training Types",
        "tags": [
          "Training"
        ],
        "operationId": "list-training-types",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "trainingId": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "The ID of the training",
                            "type": "integer"
                          },
                          "name": {
                            "description": "Name of the training type.",
                            "type": "string"
                          },
                          "renewable": {
                            "description": "If true, training will be renewed based off of frequency.",
                            "type": "boolean"
                          },
                          "frequency": {
                            "description": "The frequency is the (optional) amount of months between renewing trainings. Not valid if training are not renewable.",
                            "type": "integer"
                          },
                          "dueFromHireDate": {
                            "description": "Number of days before the training is due for new hires. Not valid if training is not required.",
                            "type": "integer"
                          },
                          "required": {
                            "description": "Is this a required training?",
                            "type": "integer"
                          },
                          "category": {
                            "description": "The category ID and name",
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer"
                              },
                              "name": {
                                "type": "string"
                              }
                            }
                          },
                          "linkUrl": {
                            "description": "Optional URL that can be included with a training.",
                            "type": "string"
                          },
                          "description": {
                            "description": "Description for the training.",
                            "type": "string"
                          },
                          "allowEmployeesToMarkComplete": {
                            "description": "Allows all employees who can view the training to be able to mark it complete.",
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "1": {
                        "id": "1",
                        "name": "Emergency Preparedness",
                        "renewable": false,
                        "frequency": 0,
                        "dueFromHireDate": [],
                        "required": false,
                        "category": [],
                        "linkUrl": "https://example.com/",
                        "description": null,
                        "allowEmployeesToMarkComplete": true
                      },
                      "2": {
                        "id": "2",
                        "name": "CPR Certification",
                        "renewable": true,
                        "frequency": "12",
                        "dueFromHireDate": {
                          "unit": "day",
                          "amount": "1"
                        },
                        "required": true,
                        "category": {
                          "id": "18001",
                          "name": "First Aid Trainings"
                        },
                        "linkUrl": null,
                        "description": "Very important.",
                        "allowEmployeesToMarkComplete": false
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request parameters."
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Insufficient user permissions or API access is not turned on."
          },
          "404": {
            "description": "Bad request url."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Add a training type. The owner of the API key used must have access to training settings.",
        "summary": "Add Training Type",
        "tags": [
          "Training"
        ],
        "operationId": "add-training-type",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "required"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the new training type.",
                    "type": "string"
                  },
                  "frequency": {
                    "description": "The frequency is the (optional) amount of months between renewing trainings. Not valid if training are not renewable.",
                    "type": "integer",
                    "default": "12"
                  },
                  "renewable": {
                    "description": "Renewable is optional but if you are setting it to true you must pass a frequency which is the months between renewals.",
                    "type": "boolean"
                  },
                  "category": {
                    "type": "object",
                    "description": "The category is optional and you can pass either a category id or a category name.",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "example": 3,
                        "description": "Category ID"
                      },
                      "name": {
                        "type": "string",
                        "example": "First Aid Trainings",
                        "description": "Category Name"
                      },
                      "accuracy": {
                        "type": "integer",
                        "example": 2,
                        "description": "Accuracy in meters of the clock in location"
                      },
                      "address": {
                        "type": "string",
                        "example": "123 Main",
                        "description": "Address..."
                      }
                    }
                  },
                  "required": {
                    "description": "Is this a required training?",
                    "type": "boolean"
                  },
                  "dueFromHireDate": {
                    "description": "Number of days before the training is due for new hires. Not valid unless training is required.",
                    "type": "integer",
                    "default": "30"
                  },
                  "linkUrl": {
                    "description": "Optional URL that can be included with a training.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description for the training.",
                    "type": "string"
                  },
                  "allowEmployeesToMarkComplete": {
                    "description": "Allows all employees who can view the training to be able to mark it complete.",
                    "type": "boolean",
                    "default": false
                  }
                },
                "example": {
                  "name": "My New Training",
                  "frequency": "12",
                  "renewable": true,
                  "category": {
                    "id": 3,
                    "name": "CustomApiCategoryName2"
                  },
                  "required": false,
                  "dueFromHireDate": {
                    "unit": "day",
                    "amount": "30"
                  }
                }
              }
            }
          },
          "description": "Training object to post",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the training",
                      "type": "integer"
                    },
                    "name": {
                      "description": "Name of the training type.",
                      "type": "string"
                    },
                    "renewable": {
                      "description": "If true, training will be renewed based off of frequency.",
                      "type": "boolean"
                    },
                    "frequency": {
                      "description": "The frequency is the (optional) amount of months between renewing trainings. Not valid if training are not renewable.",
                      "type": "integer"
                    },
                    "dueFromHireDate": {
                      "description": "Number of days before the training is due for new hires. Not valid if training is not required.",
                      "type": "integer"
                    },
                    "required": {
                      "description": "Is this a required training?",
                      "type": "integer"
                    },
                    "category": {
                      "description": "The category ID and name",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        }
                      }
                    },
                    "linkUrl": {
                      "description": "Optional URL that can be included with a training.",
                      "type": "string"
                    },
                    "description": {
                      "description": "Description for the training.",
                      "type": "string"
                    },
                    "allowEmployeesToMarkComplete": {
                      "description": "Allows all employees who can view the training to be able to mark it complete.",
                      "type": "boolean"
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the training",
                      "type": "integer"
                    },
                    "name": {
                      "description": "Name of the training type.",
                      "type": "string"
                    },
                    "renewable": {
                      "description": "If true, training will be renewed based off of frequency.",
                      "type": "boolean"
                    },
                    "frequency": {
                      "description": "The frequency is the (optional) amount of months between renewing trainings. Not valid if training are not renewable.",
                      "type": "integer"
                    },
                    "dueFromHireDate": {
                      "description": "Number of days before the training is due for new hires. Not valid if training is not required.",
                      "type": "integer"
                    },
                    "required": {
                      "description": "Is this a required training?",
                      "type": "integer"
                    },
                    "category": {
                      "description": "The category ID and name",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        }
                      }
                    },
                    "linkUrl": {
                      "description": "Optional URL that can be included with a training.",
                      "type": "string"
                    },
                    "description": {
                      "description": "Description for the training.",
                      "type": "string"
                    },
                    "allowEmployeesToMarkComplete": {
                      "description": "Allows all employees who can view the training to be able to mark it complete.",
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request parameters."
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Insufficient user permissions or API access is not turned on."
          },
          "404": {
            "description": "Bad request url."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/training/type/{trainingTypeId}": {
      "put": {
        "description": "Update an existing training type. The owner of the API key used must have access to training settings.",
        "summary": "Update Training Type",
        "tags": [
          "Training"
        ],
        "operationId": "update-training-type",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trainingTypeId",
            "in": "path",
            "required": true,
            "description": "The ID of the training type to update.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "required"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the training type.",
                    "type": "string"
                  },
                  "frequency": {
                    "description": "The frequency is the (optional) amount of months between renewing trainings. Not valid if training are not renewable.",
                    "type": "integer",
                    "default": "12"
                  },
                  "renewable": {
                    "description": "Renewable is optional but if you are setting it to true you must pass a frequency.",
                    "type": "boolean"
                  },
                  "category": {
                    "type": "object",
                    "description": "Category is optional and passing an empty value will remove the category from the training type. Passing a name will assign the training type to the new training category.",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "example": 3,
                        "description": "Category ID"
                      },
                      "name": {
                        "type": "string",
                        "example": "CustomApiCategoryName2",
                        "description": "Category Name"
                      },
                      "accuracy": {
                        "type": "integer",
                        "example": 2,
                        "description": "Accuracy in meters of the clock in location"
                      },
                      "address": {
                        "type": "string",
                        "example": "123 Main",
                        "description": "Address..."
                      }
                    }
                  },
                  "required": {
                    "description": "Is this a required training?",
                    "type": "boolean"
                  },
                  "dueFromHireDate": {
                    "description": "Number of days before the training is due for new hires. Not valid unless training is required.",
                    "type": "integer",
                    "default": "30"
                  },
                  "linkUrl": {
                    "description": "Optional URL that can be included with a training.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description for the training.",
                    "type": "string"
                  },
                  "allowEmployeesToMarkComplete": {
                    "description": "Allows all employees who can view the training to be able to mark it complete.",
                    "type": "boolean",
                    "default": false
                  }
                },
                "example": {
                  "name": "My Edited Training",
                  "frequency": "12",
                  "renewable": true,
                  "category": {
                    "name": "Existing or new training category"
                  },
                  "required": false,
                  "dueFromHireDate": {
                    "unit": "day",
                    "amount": "30"
                  }
                }
              }
            }
          },
          "description": "Training type object to update to",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the training",
                      "type": "integer"
                    },
                    "name": {
                      "description": "Name of the training type.",
                      "type": "string"
                    },
                    "renewable": {
                      "description": "If true, training will be renewed based off of frequency.",
                      "type": "boolean"
                    },
                    "frequency": {
                      "description": "The frequency is the (optional) amount of months between renewing trainings. Not valid if training are not renewable.",
                      "type": "integer"
                    },
                    "dueFromHireDate": {
                      "description": "Number of days before the training is due for new hires. Not valid if training is not required.",
                      "type": "integer"
                    },
                    "required": {
                      "description": "Is this a required training?",
                      "type": "integer"
                    },
                    "category": {
                      "description": "The category ID and name",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        }
                      }
                    },
                    "linkUrl": {
                      "description": "Optional URL that can be included with a training.",
                      "type": "string"
                    },
                    "description": {
                      "description": "Description for the training.",
                      "type": "string"
                    },
                    "allowEmployeesToMarkComplete": {
                      "description": "Allows all employees who can view the training to be able to mark it complete.",
                      "type": "boolean"
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the training",
                      "type": "integer"
                    },
                    "name": {
                      "description": "Name of the training type.",
                      "type": "string"
                    },
                    "renewable": {
                      "description": "If true, training will be renewed based off of frequency.",
                      "type": "boolean"
                    },
                    "frequency": {
                      "description": "The frequency is the (optional) amount of months between renewing trainings. Not valid if training are not renewable.",
                      "type": "integer"
                    },
                    "dueFromHireDate": {
                      "description": "Number of days before the training is due for new hires. Not valid if training is not required.",
                      "type": "integer"
                    },
                    "required": {
                      "description": "Is this a required training?",
                      "type": "integer"
                    },
                    "category": {
                      "description": "The category ID and name",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        }
                      }
                    },
                    "linkUrl": {
                      "description": "Optional URL that can be included with a training.",
                      "type": "string"
                    },
                    "description": {
                      "description": "Description for the training.",
                      "type": "string"
                    },
                    "allowEmployeesToMarkComplete": {
                      "description": "Allows all employees who can view the training to be able to mark it complete.",
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request parameters."
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Insufficient user permissions or API access is not turned on."
          },
          "404": {
            "description": "Bad request url."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete an existing training type. The owner of the API key used must have access to training settings. Deleting a training type will only be successful if all employee trainings for this type have been removed prior to this request.",
        "summary": "Delete Training Type",
        "tags": [
          "Training"
        ],
        "operationId": "delete-training-type",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trainingTypeId",
            "in": "path",
            "required": true,
            "description": "The ID of the training type to delete.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request parameters."
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Insufficient user permissions or API access is not turned on."
          },
          "404": {
            "description": "Bad request url or training type does not exist."
          },
          "405": {
            "description": "Training type was unable to be deleted."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/training/category": {
      "get": {
        "description": "Get a list of training categories. The owner of the API key used must have access to training settings.",
        "summary": "List Training Categories",
        "tags": [
          "Training"
        ],
        "operationId": "list-training-categories",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "categoryId": {
                        "description": "The category ID and name",
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "18047": {
                        "id": "18001",
                        "name": "First Aid Trainings"
                      },
                      "18048": {
                        "id": "18002",
                        "name": "Management Training"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request parameters."
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Insufficient user permissions or API access is not turned on."
          },
          "404": {
            "description": "Bad request url."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Add a training category. The owner of the API key used must have access to training settings.",
        "summary": "Add Training Category",
        "tags": [
          "Training"
        ],
        "operationId": "add-training-category",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the new training category.",
                    "type": "string"
                  }
                },
                "example": {
                  "name": "My New Training Category"
                }
              }
            }
          },
          "description": "Training category to post",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "The category ID and name",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "description": "The category ID and name",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request parameters."
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Insufficient user permissions or API access is not turned on."
          },
          "404": {
            "description": "Bad request url."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/training/category/{trainingCategoryId}": {
      "put": {
        "description": "Update an existing training category. The owner of the API key used must have access to training settings.",
        "summary": "Update Training Category",
        "tags": [
          "Training"
        ],
        "operationId": "update-training-category",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trainingCategoryId",
            "in": "path",
            "required": true,
            "description": "The ID of the training category to update.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Name of the training category.",
                    "type": "string"
                  }
                },
                "example": {
                  "name": "My Training Category"
                }
              }
            }
          },
          "description": "Training category to update",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "The category ID and name",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "description": "The category ID and name",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request parameters."
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Insufficient user permissions or API access is not turned on."
          },
          "404": {
            "description": "Bad request url."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete an existing training category. The owner of the API key used must have access to training settings.",
        "summary": "Delete Training Category",
        "tags": [
          "Training"
        ],
        "operationId": "delete-training-category",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trainingCategoryId",
            "in": "path",
            "required": true,
            "description": "The ID of the training category to delete.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Insufficient user permissions or API access is not turned on."
          },
          "404": {
            "description": "Bad request url or training category does not exist."
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/training/record/employee/{employeeId}": {
      "get": {
        "description": "Get all employee training records. The owner of the API key used must have access to view the employee. The API will only return trainings for the employee that the owner of the API key has permission to see. Included with each employee training is the training information that has been selected for tracking in settings.",
        "summary": "List Employee Trainings",
        "tags": [
          "Training"
        ],
        "operationId": "list-employee-trainings",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "The ID of the employee to get a list of trainings for.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "trainingTypeId",
            "in": "query",
            "required": false,
            "description": "The training type id is optional. Not supplying a training type id will return the collection of all training records for the employee.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "trainingId": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "The ID of the training record.",
                            "type": "integer"
                          },
                          "employeeId": {
                            "description": "The ID of the employee associated with the training.",
                            "type": "integer"
                          },
                          "completed": {
                            "description": "Completed is a date in the format yyyy-mm-dd.",
                            "type": "string"
                          },
                          "notes": {
                            "description": "Notes left on the training record.",
                            "type": "string"
                          },
                          "instructor": {
                            "description": "Name of the instructor.",
                            "type": "string"
                          },
                          "credits": {
                            "description": "What was credited for the training record.",
                            "type": "number"
                          },
                          "hours": {
                            "description": "Hours associated with the training record.",
                            "type": "number"
                          },
                          "cost": {
                            "description": "The currency and cost for the training record.",
                            "type": "string"
                          },
                          "type": {
                            "description": "The training type ID.",
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "13": {
                        "id": "13",
                        "employeeId": "40468",
                        "trainingTypeId": "4",
                        "completed": "2015-11-20",
                        "notes": null,
                        "credits": null,
                        "cost": null
                      },
                      "14": {
                        "id": "14",
                        "employeeId": "40468",
                        "trainingTypeId": "4",
                        "completed": "2015-05-21",
                        "notes": null,
                        "credits": null,
                        "cost": null
                      },
                      "15": {
                        "id": "15",
                        "employeeId": "40468",
                        "trainingTypeId": "4",
                        "completed": "2016-07-01",
                        "notes": "55",
                        "credits": "55",
                        "cost": "55.00 USD"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request parameters."
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Insufficient user permissions or API access is not turned on."
          },
          "404": {
            "description": "Bad request url."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Add a new employee training record. The owner of the API key used must have permission to add trainings for the selected employee.",
        "summary": "Add New Employee Training Record",
        "tags": [
          "Training"
        ],
        "operationId": "add-new-employee-training-record",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "description": "The ID of the employee to add a training record to.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "completed",
                  "type"
                ],
                "properties": {
                  "completed": {
                    "description": "Completed is a required field and must be in yyyy-mm-dd format.",
                    "type": "string",
                    "format": "date",
                    "pattern": "([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))"
                  },
                  "cost": {
                    "properties": {
                      "currency": {
                        "type": "string"
                      },
                      "cost": {
                        "type": "number"
                      }
                    }
                  },
                  "instructor": {
                    "type": "string"
                  },
                  "hours": {
                    "type": "number"
                  },
                  "credits": {
                    "type": "number"
                  },
                  "notes": {
                    "type": "string"
                  },
                  "type": {
                    "description": "This must be an existing training type id.",
                    "type": "integer",
                    "default": 0
                  }
                },
                "example": {
                  "completed": "2016-05-25",
                  "cost": {
                    "currency": "USD",
                    "amount": "100.00"
                  },
                  "instructor": "Bob Jones",
                  "hours": "16",
                  "credits": "4",
                  "notes": "sample note",
                  "type": "4"
                }
              }
            }
          },
          "description": "Training object to post",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the training record.",
                      "type": "integer"
                    },
                    "employeeId": {
                      "description": "The ID of the employee associated with the training.",
                      "type": "integer"
                    },
                    "completed": {
                      "description": "Completed is a date in the format yyyy-mm-dd.",
                      "type": "string"
                    },
                    "notes": {
                      "description": "Notes left on the training record.",
                      "type": "string"
                    },
                    "instructor": {
                      "description": "Name of the instructor.",
                      "type": "string"
                    },
                    "credits": {
                      "description": "What was credited for the training record.",
                      "type": "number"
                    },
                    "hours": {
                      "description": "Hours associated with the training record.",
                      "type": "number"
                    },
                    "cost": {
                      "description": "The currency and cost for the training record.",
                      "type": "string"
                    },
                    "type": {
                      "description": "The training type ID.",
                      "type": "integer"
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the training record.",
                      "type": "integer"
                    },
                    "employeeId": {
                      "description": "The ID of the employee associated with the training.",
                      "type": "integer"
                    },
                    "completed": {
                      "description": "Completed is a date in the format yyyy-mm-dd.",
                      "type": "string"
                    },
                    "notes": {
                      "description": "Notes left on the training record.",
                      "type": "string"
                    },
                    "instructor": {
                      "description": "Name of the instructor.",
                      "type": "string"
                    },
                    "credits": {
                      "description": "What was credited for the training record.",
                      "type": "number"
                    },
                    "hours": {
                      "description": "Hours associated with the training record.",
                      "type": "number"
                    },
                    "cost": {
                      "description": "The currency and cost for the training record.",
                      "type": "string"
                    },
                    "type": {
                      "description": "The training type ID.",
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request parameters."
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Insufficient user permissions or API access is not turned on."
          },
          "404": {
            "description": "Bad request url."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/training/record/{employeeTrainingRecordId}": {
      "put": {
        "description": "Update an existing exmployee training record. The owner of the API key used must have permission to add trainings for the selected employee",
        "summary": "Update Employee Training Record",
        "tags": [
          "Training"
        ],
        "operationId": "update-employee-training-record",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeTrainingRecordId",
            "in": "path",
            "required": true,
            "description": "The ID of the training record to update.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "completed"
                ],
                "properties": {
                  "completed": {
                    "description": "Completed is the only required field and must be in yyyy-mm-dd format. The other parameters are optional.",
                    "type": "string",
                    "pattern": "([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))"
                  },
                  "cost": {
                    "properties": {
                      "currency": {
                        "type": "string"
                      },
                      "cost": {
                        "type": "number"
                      }
                    }
                  },
                  "instructor": {
                    "type": "string"
                  },
                  "hours": {
                    "type": "number"
                  },
                  "credits": {
                    "type": "number"
                  },
                  "notes": {
                    "type": "number"
                  }
                },
                "example": {
                  "completed": "2016-05-25",
                  "cost": {
                    "currency": "USD",
                    "amount": "100.00"
                  },
                  "instructor": "Bob Jones",
                  "hours": "16",
                  "credits": "4",
                  "notes": "sample note"
                }
              }
            }
          },
          "description": "Training object to update",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the training record.",
                      "type": "integer"
                    },
                    "employeeId": {
                      "description": "The ID of the employee associated with the training.",
                      "type": "integer"
                    },
                    "completed": {
                      "description": "Completed is a date in the format yyyy-mm-dd.",
                      "type": "string"
                    },
                    "notes": {
                      "description": "Notes left on the training record.",
                      "type": "string"
                    },
                    "instructor": {
                      "description": "Name of the instructor.",
                      "type": "string"
                    },
                    "credits": {
                      "description": "What was credited for the training record.",
                      "type": "number"
                    },
                    "hours": {
                      "description": "Hours associated with the training record.",
                      "type": "number"
                    },
                    "cost": {
                      "description": "The currency and cost for the training record.",
                      "type": "string"
                    },
                    "type": {
                      "description": "The training type ID.",
                      "type": "integer"
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the training record.",
                      "type": "integer"
                    },
                    "employeeId": {
                      "description": "The ID of the employee associated with the training.",
                      "type": "integer"
                    },
                    "completed": {
                      "description": "Completed is a date in the format yyyy-mm-dd.",
                      "type": "string"
                    },
                    "notes": {
                      "description": "Notes left on the training record.",
                      "type": "string"
                    },
                    "instructor": {
                      "description": "Name of the instructor.",
                      "type": "string"
                    },
                    "credits": {
                      "description": "What was credited for the training record.",
                      "type": "number"
                    },
                    "hours": {
                      "description": "Hours associated with the training record.",
                      "type": "number"
                    },
                    "cost": {
                      "description": "The currency and cost for the training record.",
                      "type": "string"
                    },
                    "type": {
                      "description": "The training type ID.",
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request parameters."
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Insufficient user permissions or API access is not turned on."
          },
          "404": {
            "description": "Bad request url."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete an existing employee training record. The owner of the API key used must have permission to view and edit the employee and training type.",
        "summary": "Delete Employee Training Record",
        "tags": [
          "Training"
        ],
        "operationId": "delete-employee-training-record",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeTrainingRecordId",
            "in": "path",
            "required": true,
            "description": "The ID of the training record to delete.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized. Invalid API credentials."
          },
          "403": {
            "description": "Insufficient user permissions or API access is not turned on."
          },
          "404": {
            "description": "Bad request url or training record does not exist."
          },
          "405": {
            "description": "Unable to delete training record."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/webhooks/": {
      "post": {
        "description": "Add a new Webhook. For more details or instructions you can refer to the [webhooks API tutorial](https://documentation.bamboohr.com/docs/webhooks-api-permission-based).",
        "summary": "Add Webhook",
        "tags": [
          "Webhooks"
        ],
        "operationId": "post-webhook",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Add Webhook",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the webhook.",
                    "example": "My new webhook",
                    "type": "string",
                    "maxLength": 1024
                  },
                  "monitorFields": {
                    "description": "A list of fields to monitor.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "firstName",
                      "lastName"
                    ]
                  },
                  "postFields": {
                    "description": "A list of fields to post to the webhook url. Field ID or alias: external name",
                    "type": "object",
                    "additionalProperties": {
                      "description": "External name to post field to",
                      "type": "string"
                    },
                    "example": {
                      "firstName": "Name",
                      "lastName": "Surname",
                      "dateOfBirth": "DOB"
                    }
                  },
                  "url": {
                    "description": "The url the webhook should send data to (must begin with https://).",
                    "pattern": "^http://",
                    "type": "string"
                  },
                  "format": {
                    "description": "The format the webhook should use (json - default, form-encoded).",
                    "enum": [
                      "json",
                      "form-encoded"
                    ],
                    "type": "string"
                  },
                  "frequency": {
                    "description": "How often the webhook could fire.",
                    "type": "object",
                    "properties": {
                      "hour": {
                        "description": "The hour to potentially fire (0-23, null to potentially fire every hour)",
                        "minimum": 0,
                        "maximum": 23,
                        "type": "integer"
                      },
                      "minute": {
                        "description": "The minute to potentially fire (0-59, null to potentially fire every minute)",
                        "minimum": 0,
                        "maximum": 59,
                        "type": "integer"
                      },
                      "day": {
                        "description": "The day to potentially fire (1-31, null to potentially fire every day)",
                        "minimum": 1,
                        "maximum": 31,
                        "type": "integer"
                      },
                      "month": {
                        "description": "The month to potentially fire (1-12, null to potentially fire every month)",
                        "minimum": 1,
                        "maximum": 12,
                        "type": "integer"
                      }
                    }
                  },
                  "limit": {
                    "description": "To limit how often to potentially fire a webhook, and maximum amount of records to send",
                    "type": "object",
                    "properties": {
                      "times": {
                        "description": "The amount of records to send",
                        "type": "integer"
                      },
                      "seconds": {
                        "description": "The minimum amount of seconds between requests",
                        "type": "integer"
                      }
                    }
                  },
                  "includeCompanyDomain": {
                    "description": "If set to true, the company domain will be added to the header.",
                    "type": "boolean",
                    "example": true
                  }
                },
                "required": [
                  "name",
                  "monitorFields",
                  "postFields",
                  "url"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Webhook created, JSON output of webhook follows. Private key is included in the create webhook only!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The id of the webhook.",
                      "example": "4",
                      "type": "integer"
                    },
                    "name": {
                      "description": "The name of the webhook.",
                      "type": "string",
                      "example": "Example Webhook",
                      "maxLength": 1024
                    },
                    "created": {
                      "description": "timestamp of creation",
                      "example": "2021-09-20 22:58:01",
                      "type": "string"
                    },
                    "lastSent": {
                      "description": "timestamp of last webhook sent",
                      "example": "2021-09-20 22:58:01",
                      "type": "string"
                    },
                    "monitorFields": {
                      "description": "A list of fields to monitor.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "firstName",
                        "lastName"
                      ]
                    },
                    "postFields": {
                      "description": "A list of fields to post to the webhook url. Field ID or alias: external name",
                      "type": "object",
                      "additionalProperties": {
                        "description": "External name to post field to",
                        "type": "string"
                      },
                      "example": {
                        "firstName": "Name",
                        "lastName": "Surname",
                        "dateOfBirth": "DOB"
                      }
                    },
                    "url": {
                      "description": "The url the webhook should send data to.",
                      "example": "https://www.example.com",
                      "type": "string"
                    },
                    "format": {
                      "description": "The format the webhook should use (json, form-encoded).",
                      "example": "json",
                      "type": "string"
                    },
                    "frequency": {
                      "description": "How often the webhook could fire.",
                      "type": "object",
                      "properties": {
                        "hour": {
                          "description": "The hour to potentially fire.",
                          "example": 12,
                          "type": "integer"
                        },
                        "minute": {
                          "description": "The minute to potentially fire",
                          "example": 56,
                          "type": "integer"
                        },
                        "day": {
                          "description": "The day to potentially fire",
                          "example": 24,
                          "type": "integer"
                        },
                        "month": {
                          "example": 7,
                          "description": "The month to potentially fire"
                        }
                      }
                    },
                    "limit": {
                      "description": "To limit how often to potentially fire a webhook, and maximum amount of records to send",
                      "type": "object",
                      "properties": {
                        "times": {
                          "description": "The amount of records to send",
                          "example": 15,
                          "type": "integer"
                        },
                        "seconds": {
                          "description": "The minimum amount of seconds between requests",
                          "example": 500,
                          "type": "integer"
                        }
                      }
                    },
                    "privateKey": {
                      "description": "The private key which can be used to verify that the webhook is secure (uses HMAC-SHA256)",
                      "type": "string"
                    },
                    "includeCompanyDomain": {
                      "description": "If set to true, the company domain will be added to the header.",
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided JSON is bad, missing required fields, or mulitple access levels.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Webhook 403 error",
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "errors": [
                      {
                        "error": "Invalid request body",
                        "issues": [
                          "problem one",
                          "problem two",
                          "…"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "The user API key is invalid."
          },
          "403": {
            "description": "Permission violations in the fields selected.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "errors": [
                      {
                        "error": "Permission denied to the following fields",
                        "monitorFields": [
                          {
                            "id": "123",
                            "name": "alias or id"
                          }
                        ],
                        "postFields": [
                          {
                            "id": "123",
                            "name": "alias or id"
                          }
                        ],
                        "unknownFields": [
                          {
                            "id": "123",
                            "name": "alias or id"
                          }
                        ],
                        "duplicatePostString": [
                          "fieldName"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Webhook 500 error",
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "errors": [
                      {
                        "error": "Sorry for the inconvenience, please try again later or contact BambooHR."
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "get": {
        "description": "Gets as list of webhooks for the user API key.",
        "summary": "Gets as list of webhooks for the user API key.",
        "tags": [
          "Webhooks"
        ],
        "operationId": "get-webhook-list",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of webhooks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "webhooks": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID of the webhook.",
                            "example": "1"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the webhook."
                          },
                          "created": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The creation date of the webhook.",
                            "example": "2021-09-20 22:58:01"
                          },
                          "lastSent": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The date the webhook was last sent.",
                            "example": "2021-09-21 12:00:00"
                          },
                          "url": {
                            "type": "string",
                            "description": "The url of the webhook."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The user API key is invalid."
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Webhook 500 error",
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "errors": [
                      {
                        "error": "Sorry for the inconvenience, please try again later or contact BambooHR."
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/webhooks/{id}/": {
      "get": {
        "description": "Get webhook data that is tied to a specific user API Key.",
        "summary": "Get Webhook",
        "tags": [
          "Webhooks"
        ],
        "operationId": "get-webhook",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The webhook ID to display details about.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A Webhook",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Add Webhook Response",
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The id of the webhook.",
                      "example": "4",
                      "type": "integer"
                    },
                    "name": {
                      "description": "The name of the webhook.",
                      "type": "string",
                      "example": "Example Webhook",
                      "maxLength": 1024
                    },
                    "created": {
                      "description": "timestamp of creation",
                      "example": "2021-09-20 22:58:01",
                      "type": "string"
                    },
                    "lastSent": {
                      "description": "timestamp of last webhook sent",
                      "example": "2021-09-20 22:58:01",
                      "type": "string"
                    },
                    "monitorFields": {
                      "description": "A list of fields to monitor.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "firstName",
                        "lastName"
                      ]
                    },
                    "postFields": {
                      "description": "A list of fields to post to the webhook url. Field ID or alias: external name",
                      "type": "object",
                      "additionalProperties": {
                        "description": "External name to post field to",
                        "type": "string"
                      },
                      "example": {
                        "firstName": "Name",
                        "lastName": "Surname",
                        "dateOfBirth": "DOB"
                      }
                    },
                    "url": {
                      "description": "The url the webhook should send data to.",
                      "example": "https://www.example.com",
                      "type": "string"
                    },
                    "format": {
                      "description": "The format the webhook should use (json, form-encoded).",
                      "example": "json",
                      "type": "string"
                    },
                    "frequency": {
                      "description": "How often the webhook could fire.",
                      "type": "object",
                      "properties": {
                        "hour": {
                          "description": "The hour to potentially fire.",
                          "example": 12,
                          "type": "integer"
                        },
                        "minute": {
                          "description": "The minute to potentially fire",
                          "example": 56,
                          "type": "integer"
                        },
                        "day": {
                          "description": "The day to potentially fire",
                          "example": 24,
                          "type": "integer"
                        },
                        "month": {
                          "example": 7,
                          "description": "The month to potentially fire"
                        }
                      }
                    },
                    "limit": {
                      "description": "To limit how often to potentially fire a webhook, and maximum amount of records to send",
                      "type": "object",
                      "properties": {
                        "times": {
                          "description": "The amount of records to send",
                          "example": 15,
                          "type": "integer"
                        },
                        "seconds": {
                          "description": "The minimum amount of seconds between requests",
                          "example": 500,
                          "type": "integer"
                        }
                      }
                    },
                    "includeCompanyDomain": {
                      "description": "If set to true, the company domain will be added to the header.",
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The user API key is invalid."
          },
          "403": {
            "description": "The API user key does not have permission to see the requested webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Webhook 403 error",
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "errors": [
                      {
                        "error": "You do not have access to webhook ID: 5"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "The webhook does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Webhook 404 error",
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "errors": [
                      {
                        "error": "No webhook was found with ID: 7."
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Webhook 500 error",
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "errors": [
                      {
                        "error": "Sorry for the inconvenience, please try again later or contact BambooHR."
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Update a webhook, based on webhook ID.",
        "summary": "Update Webhook",
        "tags": [
          "Webhooks"
        ],
        "operationId": "put-webhook",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is a webhook ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Add Webhook",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the webhook.",
                    "example": "My new webhook",
                    "type": "string",
                    "maxLength": 1024
                  },
                  "monitorFields": {
                    "description": "A list of fields to monitor.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "firstName",
                      "lastName"
                    ]
                  },
                  "postFields": {
                    "description": "A list of fields to post to the webhook url. Field ID or alias: external name",
                    "type": "object",
                    "additionalProperties": {
                      "description": "External name to post field to",
                      "type": "string"
                    },
                    "example": {
                      "firstName": "Name",
                      "lastName": "Surname",
                      "dateOfBirth": "DOB"
                    }
                  },
                  "url": {
                    "description": "The url the webhook should send data to (must begin with https://).",
                    "pattern": "^http://",
                    "type": "string"
                  },
                  "format": {
                    "description": "The format the webhook should use (json - default, form-encoded).",
                    "enum": [
                      "json",
                      "form-encoded"
                    ],
                    "type": "string"
                  },
                  "frequency": {
                    "description": "How often the webhook could fire.",
                    "type": "object",
                    "properties": {
                      "hour": {
                        "description": "The hour to potentially fire (0-23, null to potentially fire every hour)",
                        "minimum": 0,
                        "maximum": 23,
                        "type": "integer"
                      },
                      "minute": {
                        "description": "The minute to potentially fire (0-59, null to potentially fire every minute)",
                        "minimum": 0,
                        "maximum": 59,
                        "type": "integer"
                      },
                      "day": {
                        "description": "The day to potentially fire (1-31, null to potentially fire every day)",
                        "minimum": 1,
                        "maximum": 31,
                        "type": "integer"
                      },
                      "month": {
                        "description": "The month to potentially fire (1-12, null to potentially fire every month)",
                        "minimum": 1,
                        "maximum": 12,
                        "type": "integer"
                      }
                    }
                  },
                  "limit": {
                    "description": "To limit how often to potentially fire a webhook, and maximum amount of records to send",
                    "type": "object",
                    "properties": {
                      "times": {
                        "description": "The amount of records to send",
                        "type": "integer"
                      },
                      "seconds": {
                        "description": "The minimum amount of seconds between requests",
                        "type": "integer"
                      }
                    }
                  },
                  "includeCompanyDomain": {
                    "description": "If set to true, the company domain will be added to the header.",
                    "type": "boolean",
                    "example": true
                  }
                },
                "required": [
                  "name",
                  "monitorFields",
                  "postFields",
                  "url"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Webhook updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Add Webhook Response",
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The id of the webhook.",
                      "example": "4",
                      "type": "integer"
                    },
                    "name": {
                      "description": "The name of the webhook.",
                      "type": "string",
                      "example": "Example Webhook",
                      "maxLength": 1024
                    },
                    "created": {
                      "description": "timestamp of creation",
                      "example": "2021-09-20 22:58:01",
                      "type": "string"
                    },
                    "lastSent": {
                      "description": "timestamp of last webhook sent",
                      "example": "2021-09-20 22:58:01",
                      "type": "string"
                    },
                    "monitorFields": {
                      "description": "A list of fields to monitor.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "firstName",
                        "lastName"
                      ]
                    },
                    "postFields": {
                      "description": "A list of fields to post to the webhook url. Field ID or alias: external name",
                      "type": "object",
                      "additionalProperties": {
                        "description": "External name to post field to",
                        "type": "string"
                      },
                      "example": {
                        "firstName": "Name",
                        "lastName": "Surname",
                        "dateOfBirth": "DOB"
                      }
                    },
                    "url": {
                      "description": "The url the webhook should send data to.",
                      "example": "https://www.example.com",
                      "type": "string"
                    },
                    "format": {
                      "description": "The format the webhook should use (json, form-encoded).",
                      "example": "json",
                      "type": "string"
                    },
                    "frequency": {
                      "description": "How often the webhook could fire.",
                      "type": "object",
                      "properties": {
                        "hour": {
                          "description": "The hour to potentially fire.",
                          "example": 12,
                          "type": "integer"
                        },
                        "minute": {
                          "description": "The minute to potentially fire",
                          "example": 56,
                          "type": "integer"
                        },
                        "day": {
                          "description": "The day to potentially fire",
                          "example": 24,
                          "type": "integer"
                        },
                        "month": {
                          "example": 7,
                          "description": "The month to potentially fire"
                        }
                      }
                    },
                    "limit": {
                      "description": "To limit how often to potentially fire a webhook, and maximum amount of records to send",
                      "type": "object",
                      "properties": {
                        "times": {
                          "description": "The amount of records to send",
                          "example": 15,
                          "type": "integer"
                        },
                        "seconds": {
                          "description": "The minimum amount of seconds between requests",
                          "example": 500,
                          "type": "integer"
                        }
                      }
                    },
                    "includeCompanyDomain": {
                      "description": "If set to true, the company domain will be added to the header.",
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided JSON is bad, missing required fields, or mulitple access levels.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Webhook 403 error",
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "errors": [
                      {
                        "error": "Invalid request body",
                        "issues": [
                          "problem one",
                          "problem two",
                          "…"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "The user API key is invalid."
          },
          "403": {
            "description": "Permission violations in the fields selected, or the user does not have access to the webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "errors": [
                      {
                        "error": "Permission denied to the following fields",
                        "monitorFields": [
                          {
                            "id": "123",
                            "name": "alias or id"
                          }
                        ],
                        "postFields": [
                          {
                            "id": "123",
                            "name": "alias or id"
                          }
                        ],
                        "unknownFields": [
                          {
                            "id": "123",
                            "name": "alias or id"
                          }
                        ],
                        "duplicatePostString": [
                          "fieldName"
                        ]
                      },
                      {
                        "error": "You do not have access to webhook ID: 5"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "The webhook to be updated doesn't exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Webhook 404 error",
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "errors": [
                      {
                        "error": "No webhook was found with ID: 7."
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Webhook 500 error",
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "errors": [
                      {
                        "error": "Sorry for the inconvenience, please try again later or contact BambooHR."
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete a webhook that is tied to a specific user API Key.",
        "summary": "Delete Webhook",
        "tags": [
          "Webhooks"
        ],
        "operationId": "delete-webhook",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "{id} is an webhook ID that is associated with the User API key.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook was deleted"
          },
          "401": {
            "description": "The user API key is invalid."
          },
          "403": {
            "description": "The API user key does not have permission to delete the requested webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Webhook 403 error",
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "errors": [
                      {
                        "error": "You do not have access to webhook ID: 5"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "The webhook to be deleted doesn't exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Webhook 404 error",
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "errors": [
                      {
                        "error": "No webhook was found with ID: 7."
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Webhook 500 error",
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "errors": [
                      {
                        "error": "Sorry for the inconvenience, please try again later or contact BambooHR."
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/webhooks/monitor_fields": {
      "get": {
        "description": "Get a list fields webhooks can monitor monitor",
        "summary": "Get monitor fields",
        "tags": [
          "Webhooks"
        ],
        "operationId": "get-monitor-fields",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of logs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fields": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          },
                          "alias": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The user API key is invalid."
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Webhook 500 error",
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "errors": [
                      {
                        "error": "Sorry for the inconvenience, please try again later or contact BambooHR."
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{companyDomain}/v1/webhooks/{id}/log": {
      "get": {
        "description": "Get webhook logs for specific webhook id that is associated with the user API Key.",
        "summary": "Get Webhook Logs",
        "tags": [
          "Webhooks"
        ],
        "operationId": "get-webhook-logs",
        "parameters": [
          {
            "in": "path",
            "name": "companyDomain",
            "required": true,
            "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The webhook ID to get logs about.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A Webhook",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Webhook Log Response",
                  "type": "object",
                  "properties": {
                    "webhookId": {
                      "description": "The id of the webhook.",
                      "example": "5",
                      "type": "integer"
                    },
                    "url": {
                      "description": "The URL of the webhook.",
                      "type": "string",
                      "example": "https://exmaple.com"
                    },
                    "lastAttempted": {
                      "description": "timestamp of last time the webhook was sent",
                      "example": "2021-09-20 22:58:01",
                      "type": "string"
                    },
                    "lastSuccess": {
                      "description": "timestamp of last time the webhook was sent successfully",
                      "example": "2021-09-20 22:58:01",
                      "type": "string"
                    },
                    "failureCount": {
                      "description": "Count of how many times this call failed since last success",
                      "type": "integer",
                      "example": 0
                    },
                    "status": {
                      "description": "Status code of last request",
                      "example": 200,
                      "type": "integer"
                    },
                    "employeeIds": {
                      "description": "A list of employee ids that were changed.",
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "example": [
                        1,
                        2
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The API user key is invalid, or does not have permission to see the requested webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Webhook 403 error",
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "errors": [
                      {
                        "error": "You do not have access to webhook ID: 5"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "The webhook does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Webhook 404 error",
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "errors": [
                      {
                        "error": "No webhook was found with ID: 7."
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Webhook 500 error",
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "errors": [
                      {
                        "error": "Sorry for the inconvenience, please try again later or contact BambooHR."
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://api.bamboohr.com/api/gateway.php"
    }
  ],
  "components": {
    "parameters": {
      "CompanyDomainParameter": {
        "in": "path",
        "name": "companyDomain",
        "required": true,
        "description": "The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"",
        "schema": {
          "type": "string"
        }
      },
      "EmployeeIdPathParameter": {
        "in": "path",
        "name": "employeeId",
        "required": true,
        "description": "The ID of the employee.",
        "schema": {
          "type": "integer"
        }
      },
      "AcceptHeaderParameter": {
        "name": "Accept",
        "in": "header",
        "required": false,
        "description": "This endpoint can produce either JSON or XML.",
        "schema": {
          "type": "string",
          "enum": [
            "application/xml",
            "application/json"
          ]
        }
      },
      "AcceptXmlHeaderParameter": {
        "name": "Accept",
        "in": "header",
        "required": false,
        "description": "This endpoint will produce XML.",
        "schema": {
          "type": "string",
          "enum": [
            "application/xml"
          ]
        }
      },
      "AcceptJsonHeaderParameter": {
        "name": "Accept",
        "in": "header",
        "required": false,
        "description": "This endpoint will produce JSON.",
        "schema": {
          "type": "string",
          "enum": [
            "application/json"
          ]
        }
      }
    },
    "responses": {
      "400": {
        "description": "Unauthorized",
        "headers": {
          "X-BambooHR-Message": {
            "description": "Human readable error to help when debugging, suitable for logging",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized",
        "headers": {
          "X-BambooHR-Message": {
            "description": "Human readable error to help when debugging, suitable for logging",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "403": {
        "description": "Forbidden",
        "headers": {
          "X-BambooHR-Message": {
            "description": "Human readable error to help when debugging, suitable for logging",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "404": {
        "description": "Not Found",
        "headers": {
          "X-BambooHR-Message": {
            "description": "Human readable error to help when debugging, suitable for logging",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "409": {
        "description": "Conflict",
        "headers": {
          "X-BambooHR-Message": {
            "description": "Human readable error to help when debugging, suitable for logging",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "413": {
        "description": "Payload too large",
        "headers": {
          "X-BambooHR-Message": {
            "description": "The attempted file upload was too large",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "500": {
        "description": "Unknown Error",
        "headers": {
          "X-BambooHR-Message": {
            "description": "There was an unknown server error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "requestBodies": {
      "TimeOffPolicies": {
        "content": {
          "application/json": {
            "schema": {
              "title": "Time Off Policies",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "timeOffPolicyId": {
                    "type": "integer"
                  },
                  "accrualStartDate": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "required": true
      },
      "NewWebHook": {
        "content": {
          "application/json": {
            "schema": {
              "title": "Add Webhook",
              "type": "object",
              "properties": {
                "name": {
                  "description": "The name of the webhook.",
                  "example": "My new webhook",
                  "type": "string",
                  "maxLength": 1024
                },
                "monitorFields": {
                  "description": "A list of fields to monitor.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "firstName",
                    "lastName"
                  ]
                },
                "postFields": {
                  "description": "A list of fields to post to the webhook url. Field ID or alias: external name",
                  "type": "object",
                  "additionalProperties": {
                    "description": "External name to post field to",
                    "type": "string"
                  },
                  "example": {
                    "firstName": "Name",
                    "lastName": "Surname",
                    "dateOfBirth": "DOB"
                  }
                },
                "url": {
                  "description": "The url the webhook should send data to (must begin with https://).",
                  "pattern": "^http://",
                  "type": "string"
                },
                "format": {
                  "description": "The format the webhook should use (json - default, form-encoded).",
                  "enum": [
                    "json",
                    "form-encoded"
                  ],
                  "type": "string"
                },
                "frequency": {
                  "description": "How often the webhook could fire.",
                  "type": "object",
                  "properties": {
                    "hour": {
                      "description": "The hour to potentially fire (0-23, null to potentially fire every hour)",
                      "minimum": 0,
                      "maximum": 23,
                      "type": "integer"
                    },
                    "minute": {
                      "description": "The minute to potentially fire (0-59, null to potentially fire every minute)",
                      "minimum": 0,
                      "maximum": 59,
                      "type": "integer"
                    },
                    "day": {
                      "description": "The day to potentially fire (1-31, null to potentially fire every day)",
                      "minimum": 1,
                      "maximum": 31,
                      "type": "integer"
                    },
                    "month": {
                      "description": "The month to potentially fire (1-12, null to potentially fire every month)",
                      "minimum": 1,
                      "maximum": 12,
                      "type": "integer"
                    }
                  }
                },
                "limit": {
                  "description": "To limit how often to potentially fire a webhook, and maximum amount of records to send",
                  "type": "object",
                  "properties": {
                    "times": {
                      "description": "The amount of records to send",
                      "type": "integer"
                    },
                    "seconds": {
                      "description": "The minimum amount of seconds between requests",
                      "type": "integer"
                    }
                  }
                },
                "includeCompanyDomain": {
                  "description": "If set to true, the company domain will be added to the header.",
                  "type": "boolean",
                  "example": true
                }
              },
              "required": [
                "name",
                "monitorFields",
                "postFields",
                "url"
              ]
            }
          }
        },
        "required": true
      },
      "TableRowUpdate": {
        "content": {
          "application/json": {
            "schema": {
              "title": "Table Row Update",
              "type": "object",
              "properties": {
                "date": {
                  "description": "",
                  "type": "string"
                },
                "location": {
                  "description": "",
                  "type": "string"
                },
                "division": {
                  "description": "",
                  "type": "string"
                },
                "department": {
                  "description": "",
                  "type": "string"
                },
                "jobTitle": {
                  "description": "",
                  "type": "string"
                },
                "reportsTo": {
                  "description": "",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          }
        },
        "required": true
      },
      "EmployeeDependent": {
        "content": {
          "application/json": {
            "schema": {
              "title": "Employee Dependent",
              "type": "object",
              "properties": {
                "employeeId": {
                  "description": "",
                  "type": "string"
                },
                "firstName": {
                  "description": "",
                  "type": "string"
                },
                "middleName": {
                  "description": "",
                  "type": "string"
                },
                "lastName": {
                  "description": "",
                  "type": "string"
                },
                "relationship": {
                  "description": "",
                  "type": "string"
                },
                "gender": {
                  "description": "",
                  "type": "string"
                },
                "ssn": {
                  "description": "",
                  "type": "string"
                },
                "dateOfBirth": {
                  "description": "",
                  "type": "string"
                },
                "addressLine1": {
                  "description": "",
                  "type": "string"
                },
                "addressLine2": {
                  "description": "",
                  "type": "string"
                },
                "city": {
                  "description": "",
                  "type": "string"
                },
                "state": {
                  "description": "",
                  "type": "string"
                },
                "zipCode": {
                  "description": "",
                  "type": "string"
                },
                "homePhone": {
                  "description": "",
                  "type": "string"
                },
                "country": {
                  "description": "",
                  "type": "string"
                },
                "isUsCitizen": {
                  "description": "",
                  "type": "string"
                },
                "isStudent": {
                  "description": "",
                  "type": "string"
                }
              }
            }
          }
        },
        "required": true
      },
      "post-goal-commentText": {
        "content": {
          "application/json": {
            "schema": {
              "type": "string"
            }
          }
        },
        "required": true
      }
    },
    "securitySchemes": {
      "auth": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://{companyDomain}.bamboohr.com/authorize.php",
            "tokenUrl": "https://{companyDomain}.bamboohr.com/token.php",
            "scopes": {}
          }
        }
      },
      "basic": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "schemas": {
      "Employee": {
        "title": "Employee when updating",
        "example": {
          "firstName": "Panda",
          "lastName": "Bear"
        },
        "type": "object",
        "properties": {
          "firstName": {
            "description": "",
            "type": "string",
            "maximum": 255
          },
          "lastName": {
            "description": "",
            "type": "string",
            "maximum": 255
          }
        },
        "additionalProperties": true
      },
      "postNewEmployee": {
        "title": "New Employee",
        "example": {
          "firstName": "Panda",
          "lastName": "Bear"
        },
        "type": "object",
        "properties": {
          "firstName": {
            "description": "",
            "type": "string",
            "maximum": 255
          },
          "lastName": {
            "description": "",
            "type": "string",
            "maximum": 255
          }
        },
        "additionalProperties": true
      },
      "ListFieldValues": {
        "title": "Add or Update Values for List Fields",
        "type": "object",
        "properties": {
          "options": {
            "description": "",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "description": "",
                  "type": "integer"
                },
                "value": {
                  "description": "",
                  "type": "string",
                  "maximum": 255
                },
                "archived": {
                  "description": "",
                  "type": "string",
                  "maximum": 255
                },
                "adpCode": {
                  "description": "",
                  "type": "string",
                  "maximum": 255
                }
              }
            }
          }
        },
        "additionalProperties": false
      },
      "TimeOffRequest": {
        "title": "Add time off request",
        "type": "object",
        "properties": {
          "status": {
            "description": "",
            "type": "string",
            "maximum": 255
          },
          "start": {
            "description": "",
            "type": "string",
            "maximum": 255
          },
          "end": {
            "description": "",
            "type": "string",
            "maximum": 255
          },
          "timeOffTypeId": {
            "description": "",
            "type": "integer"
          },
          "amount": {
            "description": "",
            "type": "integer"
          },
          "notes": {
            "description": "",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "string"
                },
                "note": {
                  "type": "string"
                }
              }
            }
          },
          "dates": {
            "description": "",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "ymd": {
                  "type": "string"
                },
                "amount": {
                  "type": "integer"
                }
              }
            }
          },
          "previousRequest": {
            "description": "",
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "request": {
        "title": "Request Status",
        "example": {
          "status": "Approved",
          "note": "Note!"
        },
        "type": "object",
        "properties": {
          "status": {
            "description": "One of approved, cancelled, denied",
            "type": "string",
            "maximum": 20
          },
          "note": {
            "description": "A note to attach to the change in status",
            "type": "string",
            "maximum": 255
          }
        },
        "additionalProperties": false
      },
      "TimeOffHistory": {
        "type": "object",
        "properties": {
          "date": {
            "description": "The date the request should be added in history. This will usually be the first date of the request. Should be in ISO8601 date format (YYYY-MM-DD).",
            "type": "string"
          },
          "timeOffRequestId": {
            "description": "The ID of the time off request.",
            "type": "integer"
          },
          "note": {
            "description": "This is an optional note to show in history.",
            "type": "string",
            "maximum": 255
          }
        },
        "required": [
          "date",
          "timeOffRequestId"
        ],
        "additionalProperties": false
      },
      "AdjustTimeOffBalance": {
        "type": "object",
        "properties": {
          "date": {
            "description": "The date the adjustment should be added in history. Should be in ISO8601 date format (YYYY-MM-DD).",
            "type": "string"
          },
          "timeOffTypeId": {
            "description": "The ID of the time off type to add a balance adjustment for.",
            "type": "integer"
          },
          "amount": {
            "description": "The number of hours/days to adjust the balance by.",
            "type": "number",
            "format": "float"
          },
          "note": {
            "description": "This is an optional note to show in history.",
            "type": "string",
            "maximum": 255
          }
        },
        "required": [
          "date",
          "timeOffTypeId",
          "amount"
        ],
        "additionalProperties": false
      },
      "TimeOffPolicies": {
        "title": "Time Off Policies",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "timeOffPolicyId": {
              "type": "integer"
            },
            "accrualStartDate": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "PostNewEmployeeFileCategory": {
        "title": "New Employee File Category",
        "example": [
          "A new category"
        ],
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "EmployeeFileUpdate": {
        "title": "Employee File Update",
        "type": "object",
        "properties": {
          "name": {
            "description": "",
            "type": "string"
          },
          "categoryId": {
            "description": "",
            "type": "string"
          },
          "shareWithEmployee": {
            "description": "",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "NewCompanyFileCategory": {
        "title": "New Company File Category",
        "example": [
          "A new category"
        ],
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "CompanyFileUpdate": {
        "title": "Company File Update",
        "type": "object",
        "properties": {
          "name": {
            "description": "",
            "type": "string"
          },
          "categoryId": {
            "description": "",
            "type": "string"
          },
          "shareWithEmployee": {
            "description": "",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RequestCustomReport": {
        "title": "Request Custom Report",
        "type": "object",
        "properties": {
          "title": {
            "description": "",
            "type": "string"
          },
          "filters": {
            "description": "",
            "type": "object",
            "properties": {
              "lastChanged": {
                "description": "",
                "type": "object",
                "properties": {
                  "includeNull": {
                    "description": "yes|no",
                    "type": "string"
                  },
                  "value": {
                    "description": "Date last changed",
                    "type": "string"
                  }
                }
              }
            }
          },
          "fields": {
            "description": "",
            "type": "array",
            "items": {
              "description": "",
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "TableRowUpdate": {
        "title": "Table Row Update",
        "type": "object",
        "properties": {
          "date": {
            "description": "",
            "type": "string"
          },
          "location": {
            "description": "",
            "type": "string"
          },
          "division": {
            "description": "",
            "type": "string"
          },
          "department": {
            "description": "",
            "type": "string"
          },
          "jobTitle": {
            "description": "",
            "type": "string"
          },
          "reportsTo": {
            "description": "",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Login": {
        "title": "Login",
        "type": "object",
        "properties": {
          "applicationKey": {
            "description": "",
            "type": "string"
          },
          "user": {
            "description": "",
            "type": "string"
          },
          "password": {
            "description": "",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EmployeeDependent": {
        "title": "Employee Dependent",
        "type": "object",
        "properties": {
          "employeeId": {
            "description": "",
            "type": "string"
          },
          "firstName": {
            "description": "",
            "type": "string"
          },
          "middleName": {
            "description": "",
            "type": "string"
          },
          "lastName": {
            "description": "",
            "type": "string"
          },
          "relationship": {
            "description": "",
            "type": "string"
          },
          "gender": {
            "description": "",
            "type": "string"
          },
          "ssn": {
            "description": "",
            "type": "string"
          },
          "dateOfBirth": {
            "description": "",
            "type": "string"
          },
          "addressLine1": {
            "description": "",
            "type": "string"
          },
          "addressLine2": {
            "description": "",
            "type": "string"
          },
          "city": {
            "description": "",
            "type": "string"
          },
          "state": {
            "description": "",
            "type": "string"
          },
          "zipCode": {
            "description": "",
            "type": "string"
          },
          "homePhone": {
            "description": "",
            "type": "string"
          },
          "country": {
            "description": "",
            "type": "string"
          },
          "isUsCitizen": {
            "description": "",
            "type": "string"
          },
          "isStudent": {
            "description": "",
            "type": "string"
          }
        }
      },
      "CompanyBenefitResponse": {
        "title": "Company Benefit",
        "type": "object",
        "properties": {
          "name": {
            "description": "Name",
            "type": "string"
          },
          "benefitVendorId": {
            "description": "Benefit vendor ID",
            "type": "string"
          },
          "benefitType": {
            "description": "Benefit type",
            "type": "string",
            "enum": [
              "health",
              "dental",
              "vision",
              "retirement",
              "hsa",
              "flex",
              "life",
              "disability",
              "reimbursement",
              "supplemental",
              "other"
            ]
          },
          "deductionTypeId": {
            "description": "Deduction type ID",
            "type": "integer"
          },
          "startDate": {
            "description": "Benefit start date",
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "description": "Benefit end date",
            "type": "string",
            "format": "date"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "planUrl": {
            "description": "Plan url",
            "type": "string"
          },
          "ssoLoginUrl": {
            "description": "SSO login url",
            "type": "string"
          },
          "ssoLoginUrlLinkText": {
            "description": "SSO login link text",
            "type": "string"
          },
          "safeHarbor": {
            "description": "Is a safe harbor",
            "type": "string",
            "enum": [
              "yes",
              "no",
              null
            ]
          },
          "meetAcaMin": {
            "description": "Meets ACA minimum requirements",
            "type": "string",
            "enum": [
              "yes",
              "no",
              null
            ]
          },
          "reimbursementAmount": {
            "description": "Reimbursement amount",
            "type": "number"
          },
          "reimbursementFrequency": {
            "description": "Reimbursement frequency",
            "type": "string",
            "enum": [
              "pay period",
              "month",
              "quarter",
              "year",
              "one time",
              null
            ]
          },
          "minEssentialCoverage": {
            "description": "Provides minimum essential coverage",
            "type": "string",
            "enum": [
              "yes",
              "no",
              null
            ]
          }
        }
      },
      "CompanyBenefitUpdateRequest": {
        "title": "Company Benefit Update Request",
        "type": "object",
        "properties": {
          "properties": {
            "description": "Property",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "enum": [
                    "endYmd",
                    "url",
                    "ssoLoginPrompt",
                    "ssoLoginUrl",
                    "externalId"
                  ]
                },
                "value": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "CompanyBenefitRequest": {
        "title": "Company Benefit Request",
        "type": "object",
        "properties": {
          "companyBenefitName": {
            "description": "Name",
            "type": "string"
          },
          "benefitVendorId": {
            "description": "Benefit vendor ID",
            "type": "string"
          },
          "benefitType": {
            "description": "Benefit type",
            "type": "string",
            "enum": [
              "health",
              "dental",
              "vision",
              "retirement",
              "hsa",
              "flex",
              "life",
              "disability",
              "reimbursement",
              "supplemental",
              "other"
            ]
          },
          "deductionTypeId": {
            "description": "Deduction type ID",
            "type": "string"
          },
          "startDate": {
            "description": "Benefit start date",
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "description": "Benefit end date",
            "type": "string",
            "format": "date"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "planUrl": {
            "description": "Plan url",
            "type": "string"
          },
          "ssoLoginUrl": {
            "description": "SSO login url",
            "type": "string"
          },
          "ssoLoginUrlLinkText": {
            "description": "SSO login link text",
            "type": "string"
          },
          "safeHarbor": {
            "description": "Is a safe harbor",
            "type": "boolean"
          },
          "meetAcaMin": {
            "description": "Meets ACA minimum requirements",
            "type": "boolean"
          },
          "reimbursementAmount": {
            "description": "Reimbursement amount",
            "type": "number"
          },
          "reimbursementFrequency": {
            "description": "Reimbursement frequency",
            "type": "string",
            "enum": [
              "pay period",
              "month",
              "quarter",
              "year",
              "one time",
              null
            ]
          },
          "reimbursementCurrencyCode": {
            "description": "Reimbursement currency code",
            "type": "string"
          },
          "minEssentialCoverage": {
            "description": "Provides minimum essential coverage",
            "type": "boolean"
          }
        }
      },
      "CompanyBenefitType": {
        "title": "Company Benefit Type",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the company benefit plan.",
            "type": "string"
          },
          "slug": {
            "description": "The unique identifier for the company benefit plan.",
            "type": "string"
          },
          "canBeAcaPlan": {
            "description": "Can the company benefit plan be an ACA plan.",
            "type": "boolean"
          },
          "canCoExistEnrollment": {
            "description": "Can the company benefit plan co-exist with an enrollment plan.",
            "type": "boolean"
          },
          "isReimbursementPlan": {
            "description": "Is the company benefit plan a reimbursement plan.",
            "type": "boolean"
          }
        }
      },
      "EmployeeBenefitFilters": {
        "title": "Employee Benefit Filters",
        "type": "object",
        "properties": {
          "filters": {
            "type": "object",
            "description": "At least one filter is required",
            "properties": {
              "employeeId": {
                "description": "Employee Id",
                "type": "integer"
              },
              "companyBenefitId": {
                "description": "Company Benefit Id",
                "type": "integer"
              },
              "enrollmentStatusEffectiveDate": {
                "description": "Enrollment Status Effective Date",
                "type": "string",
                "format": "date"
              }
            }
          }
        }
      },
      "EmployeeBenefit": {
        "title": "Employee Benefit",
        "type": "object",
        "properties": {
          "employeeId": {
            "description": "Employee ID",
            "type": "integer"
          },
          "companyBenefitId": {
            "description": "Company benefit ID",
            "type": "integer"
          },
          "companyBenefitName": {
            "description": "Company benefit name",
            "type": "string"
          },
          "coverageLevel": {
            "description": "Coverage level",
            "type": "string"
          },
          "deductionEndDate": {
            "description": "Deduction end date",
            "type": "string",
            "format": "date"
          },
          "deductionStartDate": {
            "description": "Deduction start date",
            "type": "string",
            "format": "date"
          },
          "enrollmentStatus": {
            "description": "Enrollment status",
            "type": "string",
            "enum": [
              "Eligible",
              "Enrolled",
              "Waived",
              "Withdrawn",
              "Terminated",
              "Ineligible"
            ]
          },
          "effectiveDate": {
            "description": "Enrollment status effective date",
            "type": "string",
            "format": "date"
          },
          "currencyCode": {
            "description": "Currency code",
            "type": "string"
          },
          "employeeAmount": {
            "description": "Employee amount",
            "type": "number"
          },
          "employeeAmountType": {
            "description": "Employee amount type",
            "type": "string"
          },
          "employeePercentBasedOn": {
            "description": "Employee percent based on",
            "type": "string"
          },
          "employeeCapAmount": {
            "description": "Employee cap amount",
            "type": "number"
          },
          "employeeCapAmountType": {
            "description": "Employee cap amount type",
            "type": "string"
          },
          "employeeAnnualMax": {
            "description": "Employee annual max",
            "type": "number"
          },
          "companyAmount": {
            "description": "Company amount",
            "type": "number"
          },
          "companyAmountType": {
            "description": "Company amount type",
            "type": "string"
          },
          "companyPercentBasedOn": {
            "description": "Company percent based on",
            "type": "string"
          },
          "companyCapAmount": {
            "description": "Company cap amount",
            "type": "number"
          },
          "companyCapAmountType": {
            "description": "Company cap amount type",
            "type": "string"
          },
          "companyAnnualMax": {
            "description": "Company annual max",
            "type": "number"
          },
          "benefitPlanCoverageId": {
            "description": "Benefit Plan Coverage ID",
            "type": "number"
          }
        }
      },
      "BenefitPlan": {
        "title": "Benefit Plan",
        "type": "object",
        "properties": {
          "name": {
            "description": "",
            "type": "string"
          },
          "type": {
            "description": "",
            "type": "string"
          },
          "deductionTypeId": {
            "description": "",
            "type": "string"
          },
          "startYmd": {
            "description": "",
            "type": "string"
          },
          "endYmd": {
            "description": "",
            "type": "string"
          },
          "url": {
            "description": "",
            "type": "string"
          },
          "meetAcaMin": {
            "description": "",
            "type": "string"
          },
          "description": {
            "description": "",
            "type": "string"
          }
        }
      },
      "BenefitPlanCoverage": {
        "title": "Benefit Plan Coverage",
        "type": "object",
        "properties": {
          "benefitPlanId": {
            "description": "",
            "type": "string"
          },
          "benefitCoverageId": {
            "description": "",
            "type": "string"
          },
          "totalCost": {
            "description": "",
            "type": "string"
          },
          "currencyType": {
            "description": "",
            "type": "string"
          },
          "startYmd": {
            "description": "",
            "type": "string"
          },
          "endYmd": {
            "description": "",
            "type": "string"
          }
        }
      },
      "BenefitGroup": {
        "title": "Benefit Group",
        "type": "object",
        "properties": {
          "name": {
            "description": "",
            "type": "string"
          },
          "payPeriod": {
            "description": "",
            "type": "string"
          },
          "startDate": {
            "description": "",
            "type": "string"
          },
          "endDate": {
            "description": "",
            "type": "string"
          }
        }
      },
      "BenefitGroupEmployee": {
        "title": "Benefit Group Employee",
        "type": "object",
        "properties": {
          "benefitGroupId": {
            "description": "",
            "type": "string"
          },
          "employeeId": {
            "description": "",
            "type": "string"
          },
          "startDate": {
            "description": "",
            "type": "string"
          },
          "endDate": {
            "description": "",
            "type": "string"
          }
        }
      },
      "BenefitGroupPlan": {
        "title": "Benefit Group Plan",
        "type": "object",
        "properties": {
          "benefitGroupId": {
            "description": "",
            "type": "string"
          },
          "benefitPlanId": {
            "description": "",
            "type": "string"
          },
          "eligibility": {
            "description": "",
            "type": "string"
          },
          "waitPeriod": {
            "description": "",
            "type": "string"
          },
          "waitPeriodType": {
            "description": "",
            "type": "string"
          },
          "startDate": {
            "description": "",
            "type": "string"
          },
          "endDate": {
            "description": "",
            "type": "string"
          }
        }
      },
      "BenefitGroupPlanCost": {
        "title": "Benefit Group Plan Cost",
        "type": "object",
        "properties": {
          "benefitGroupPlanId": {
            "description": "",
            "type": "string"
          },
          "benefitPlanCoverageId": {
            "description": "",
            "type": "string"
          },
          "employeeCost": {
            "description": "",
            "type": "string"
          },
          "companyCost": {
            "description": "",
            "type": "string"
          },
          "startDate": {
            "description": "",
            "type": "string"
          },
          "endDate": {
            "description": "",
            "type": "string"
          }
        }
      },
      "EmployeeWithholding": {
        "title": "Employee Withholding",
        "type": "object",
        "properties": {
          "fedWithholding": {
            "description": "",
            "type": "string"
          },
          "stateWithholding": {
            "description": "",
            "type": "string"
          },
          "localWithholding": {
            "description": "",
            "type": "string"
          },
          "additionalFed": {
            "description": "",
            "type": "string"
          },
          "additionalState": {
            "description": "",
            "type": "string"
          },
          "additionalLocal": {
            "description": "",
            "type": "string"
          },
          "taxState": {
            "description": "",
            "type": "string"
          },
          "taxLocal": {
            "description": "",
            "type": "string"
          }
        }
      },
      "EmployeeDeposit": {
        "title": "Employee Deposit",
        "type": "object",
        "properties": {
          "accounts": {
            "description": "",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "accountType": {
                  "type": "string"
                },
                "maskedAccountNumber": {
                  "type": "string"
                },
                "bankName": {
                  "type": "string"
                },
                "depositOrder": {
                  "type": "string"
                },
                "ruleType": {
                  "type": "string"
                },
                "ruleAmount": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          }
        }
      },
      "EmployeeUnpaidPaystub": {
        "title": "Employee Unpaid Paystub",
        "type": "object",
        "properties": {
          "employeeId": {
            "description": "",
            "type": "string"
          },
          "unpaidPeriods": {
            "description": "",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "payDate": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          }
        }
      },
      "EmployeePaystub": {
        "title": "Employee Paystub",
        "type": "object",
        "properties": {
          "employeeId": {
            "description": "",
            "type": "string"
          },
          "externalRecordId": {
            "description": "",
            "type": "string"
          },
          "payPeriodFrom": {
            "description": "",
            "type": "string"
          },
          "payPeriodTo": {
            "description": "",
            "type": "string"
          },
          "payDate": {
            "description": "",
            "type": "string"
          },
          "payorName": {
            "description": "",
            "type": "string"
          },
          "payorAdd1": {
            "description": "",
            "type": "string"
          },
          "payorAdd2": {
            "description": "",
            "type": "string"
          },
          "payorCity": {
            "description": "",
            "type": "string"
          },
          "payorState": {
            "description": "",
            "type": "string"
          },
          "payorZip": {
            "description": "",
            "type": "string"
          },
          "payeeName": {
            "description": "",
            "type": "string"
          },
          "currencyCode": {
            "description": "",
            "type": "string"
          },
          "net": {
            "description": "",
            "type": "string"
          },
          "gross": {
            "description": "",
            "type": "string"
          },
          "totalTaxes": {
            "description": "",
            "type": "string"
          },
          "totalDeductions": {
            "description": "",
            "type": "string"
          },
          "ytdNet": {
            "description": "",
            "type": "string"
          },
          "ytdGross": {
            "description": "",
            "type": "string"
          },
          "ytdTaxes": {
            "description": "",
            "type": "string"
          },
          "ytdDeductions": {
            "description": "",
            "type": "string"
          },
          "fedWitholding": {
            "description": "",
            "type": "string"
          },
          "federalType": {
            "description": "must be 2020_w4, pre_2020_w4, or null",
            "type": "string",
            "enum": [
              "2020_w4",
              "pre_2020_w4"
            ]
          },
          "twoJobs": {
            "description": "boolean value",
            "type": "string"
          },
          "dependentsAmount": {
            "description": "float value",
            "type": "string"
          },
          "otherIncome": {
            "description": "float value",
            "type": "string"
          },
          "deductionsAmount": {
            "description": "float value",
            "type": "string"
          },
          "stateWithholding": {
            "description": "",
            "type": "string"
          },
          "localWithholding": {
            "description": "",
            "type": "string"
          },
          "additionalFed": {
            "description": "",
            "type": "string"
          },
          "additionalState": {
            "description": "",
            "type": "string"
          },
          "additionalLocal": {
            "description": "",
            "type": "string"
          },
          "taxState": {
            "description": "",
            "type": "string"
          },
          "taxLocal": {
            "description": "",
            "type": "string"
          },
          "wages": {
            "description": "",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "externalWageId": {
                  "type": "string"
                },
                "wageDescription": {
                  "type": "string"
                },
                "wageAmount": {
                  "type": "string"
                },
                "ytdWageAmount": {
                  "type": "string"
                },
                "wageRate": {
                  "type": "string"
                },
                "hours": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "taxes": {
            "description": "",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "externalTaxId": {
                  "type": "string"
                },
                "taxDescription": {
                  "type": "string"
                },
                "taxAmount": {
                  "type": "string"
                },
                "ytdTaxAmount": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "deductions": {
            "description": "",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "externalDeductionId": {
                  "type": "string"
                },
                "deductionDescription": {
                  "type": "string"
                },
                "deductionAmount": {
                  "type": "string"
                },
                "ytdDeductionAmount": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "deposits": {
            "description": "",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "depositOrder": {
                  "type": "string"
                },
                "depositAmount": {
                  "type": "string"
                },
                "maskedAccountNumber": {
                  "type": "string"
                },
                "accountType": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          }
        }
      },
      "TimeTrackingRecord": {
        "title": "Time Tracking Record",
        "type": "object",
        "properties": {
          "timeTrackingId": {
            "description": "A unique identifier for the record. Use this ID to adjust or delete these hours. It can be any ID you use to track the record up to 36 characters in length. (i.e. UUID).",
            "type": "string",
            "maximum": 36
          },
          "employeeId": {
            "description": "The ID of the employee.",
            "type": "integer"
          },
          "divisionId": {
            "description": "[Optional] The ID of the division for the employee.",
            "type": "integer"
          },
          "departmentId": {
            "description": "[Optional] The ID of the department for the employee.",
            "type": "integer"
          },
          "jobTitleId": {
            "description": "[Optional] The ID of the job title for the employee.",
            "type": "integer"
          },
          "payCode": {
            "description": "[Optional] Only necessary if the payroll provider requires a pay code",
            "type": "string",
            "maximum": 50
          },
          "dateHoursWorked": {
            "description": "The date the hours were worked. Please use the ISO-8601 date format YYYY-MM-DD.",
            "type": "string"
          },
          "payRate": {
            "description": "[Optional] The rate of pay. e.g. $15.00/hour should use 15.00 here. Only necessary if the payroll provider requires a pay rate.",
            "type": "number",
            "format": "float"
          },
          "rateType": {
            "description": "The type of hours - regular or overtime. Please use either \"REG\" or \"OT\" here.",
            "type": "string"
          },
          "hoursWorked": {
            "description": "The number of hours worked.",
            "type": "number",
            "format": "float"
          },
          "jobCode": {
            "description": "[Optional] A job code.",
            "type": "integer"
          },
          "jobData": {
            "description": "[Optional] A list of up to four 20 characters max job numbers in comma delimited format with no spaces.",
            "type": "string"
          }
        },
        "required": [
          "timeTrackingId",
          "employeeId",
          "dateHoursWorked",
          "rateType",
          "hoursWorked"
        ]
      },
      "TimeTrackingRecordBulk": {
        "title": "Time Tracking Record Bulk",
        "type": "array",
        "items": {
          "title": "Time Tracking Record",
          "type": "object",
          "properties": {
            "timeTrackingId": {
              "description": "A unique identifier for the record. Use this ID to adjust or delete these hours. It can be any ID you use to track the record up to 36 characters in length. (i.e. UUID).",
              "type": "string",
              "maximum": 36
            },
            "employeeId": {
              "description": "The ID of the employee.",
              "type": "integer"
            },
            "divisionId": {
              "description": "[Optional] The ID of the division for the employee.",
              "type": "integer"
            },
            "departmentId": {
              "description": "[Optional] The ID of the department for the employee.",
              "type": "integer"
            },
            "jobTitleId": {
              "description": "[Optional] The ID of the job title for the employee.",
              "type": "integer"
            },
            "payCode": {
              "description": "[Optional] Only necessary if the payroll provider requires a pay code",
              "type": "string",
              "maximum": 50
            },
            "dateHoursWorked": {
              "description": "The date the hours were worked. Please use the ISO-8601 date format YYYY-MM-DD.",
              "type": "string"
            },
            "payRate": {
              "description": "[Optional] The rate of pay. e.g. $15.00/hour should use 15.00 here. Only necessary if the payroll provider requires a pay rate.",
              "type": "number",
              "format": "float"
            },
            "rateType": {
              "description": "The type of hours - regular or overtime. Please use either \"REG\" or \"OT\" here.",
              "type": "string"
            },
            "hoursWorked": {
              "description": "The number of hours worked.",
              "type": "number",
              "format": "float"
            },
            "jobCode": {
              "description": "[Optional] A job code.",
              "type": "integer"
            },
            "jobData": {
              "description": "[Optional] A list of up to four 20 characters max job numbers in comma delimited format with no spaces.",
              "type": "string"
            }
          },
          "required": [
            "timeTrackingId",
            "employeeId",
            "dateHoursWorked",
            "rateType",
            "hoursWorked"
          ]
        }
      },
      "TimesheetEntry": {
        "title": "Timesheet Entry",
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of the entry.",
            "type": "integer"
          },
          "employeeId": {
            "description": "ID of the employee associated with the entry.",
            "type": "integer"
          },
          "type": {
            "description": "type of the entry.",
            "enum": [
              "hour",
              "clock"
            ],
            "type": "string"
          },
          "start": {
            "description": "Timestamp, in UTC, of when the employee clocked in. ISO 8601 format. Property can be null.",
            "type": "string"
          },
          "end": {
            "description": "Timestamp, in UTC, of when the employee clocked out. ISO 8601 format. Property can be null.",
            "type": "string"
          },
          "timezone": {
            "description": "The timezone the clock entry was recorded in. Property can be null.",
            "type": "string"
          },
          "hours": {
            "description": "The number of hours for the entry. This value has a maximum scale of 4. Property can be null.",
            "type": "number"
          },
          "note": {
            "description": "The note associated with the entry. Property can be null.",
            "type": "string"
          },
          "projectInfo": {
            "title": "Time Tracking Project Info",
            "type": "object",
            "properties": {
              "project": {
                "title": "Time Tracking Project",
                "type": "object",
                "properties": {
                  "id": {
                    "description": "ID of the project.",
                    "type": "integer"
                  },
                  "name": {
                    "description": "Name of the project.",
                    "type": "string"
                  }
                }
              },
              "task": {
                "title": "Time Tracking Task",
                "type": "object",
                "properties": {
                  "id": {
                    "description": "ID of the task.",
                    "type": "integer"
                  },
                  "name": {
                    "description": "Name of the task.",
                    "type": "string"
                  }
                }
              }
            }
          },
          "approved": {
            "description": "Approval status of the timesheet for the entry.",
            "type": "boolean"
          },
          "approvedAt": {
            "description": "Timestamp, in UTC, of when the timesheet for the entry was approved. Property can be null.",
            "type": "string"
          }
        }
      },
      "TimeTrackingProjectInfo": {
        "title": "Time Tracking Project Info",
        "type": "object",
        "properties": {
          "project": {
            "title": "Time Tracking Project",
            "type": "object",
            "properties": {
              "id": {
                "description": "ID of the project.",
                "type": "integer"
              },
              "name": {
                "description": "Name of the project.",
                "type": "string"
              }
            }
          },
          "task": {
            "title": "Time Tracking Task",
            "type": "object",
            "properties": {
              "id": {
                "description": "ID of the task.",
                "type": "integer"
              },
              "name": {
                "description": "Name of the task.",
                "type": "string"
              }
            }
          }
        }
      },
      "TimeTrackingProject": {
        "title": "Time Tracking Project",
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of the project.",
            "type": "integer"
          },
          "name": {
            "description": "Name of the project.",
            "type": "string"
          }
        }
      },
      "TimeTrackingTask": {
        "title": "Time Tracking Task",
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of the task.",
            "type": "integer"
          },
          "name": {
            "description": "Name of the task.",
            "type": "string"
          }
        }
      },
      "TimeTrackingProjectWithTasks": {
        "title": "Time tracking project with tasks.",
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of the project.",
            "type": "integer"
          },
          "name": {
            "description": "Name of the project.",
            "type": "string"
          },
          "tasks": {
            "description": "A list of time tracking tasks for the project.",
            "type": "array",
            "items": {
              "title": "Time Tracking Task",
              "type": "object",
              "properties": {
                "id": {
                  "description": "ID of the task.",
                  "type": "integer"
                },
                "name": {
                  "description": "Name of the task.",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "TimeTrackingProjectsWithTasks": {
        "title": "List of time tracking projects with tasks.",
        "type": "array",
        "items": {
          "title": "Time tracking project with tasks.",
          "type": "object",
          "properties": {
            "id": {
              "description": "ID of the project.",
              "type": "integer"
            },
            "name": {
              "description": "Name of the project.",
              "type": "string"
            },
            "tasks": {
              "description": "A list of time tracking tasks for the project.",
              "type": "array",
              "items": {
                "title": "Time Tracking Task",
                "type": "object",
                "properties": {
                  "id": {
                    "description": "ID of the task.",
                    "type": "integer"
                  },
                  "name": {
                    "description": "Name of the task.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "TimeTrackingProjectWithTasksAndEmployeeIds": {
        "title": "Time tracking project with tasks and list of employee IDs.",
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of the project.",
            "type": "integer"
          },
          "name": {
            "description": "Name of the project.",
            "type": "string"
          },
          "tasks": {
            "description": "A list of time tracking tasks for the project.",
            "type": "array",
            "items": {
              "title": "Time Tracking Task",
              "type": "object",
              "properties": {
                "id": {
                  "description": "ID of the task.",
                  "type": "integer"
                },
                "name": {
                  "description": "Name of the task.",
                  "type": "string"
                }
              }
            }
          },
          "employeeIds": {
            "description": "A list of employee IDs that can log time for this project. If not present, all employees can log time for the project.",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "Goal": {
        "title": "Employee Goal",
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique identifier for the record. Use this ID to reference this goal.",
            "type": "integer"
          },
          "title": {
            "description": "The goal title.",
            "type": "string",
            "maxLength": 1024
          },
          "description": {
            "description": "The goal description.",
            "type": "string",
            "maxLength": 65535
          },
          "percentComplete": {
            "description": "The goal completion percentage (0 - 100).",
            "type": "integer"
          },
          "alignsWithOptionId": {
            "description": "The option ID that aligns with this goal.",
            "type": "string"
          },
          "sharedWithEmployeeIds": {
            "description": "Employee IDs of employees with whom the goal is shared. All goal owners are considered \"shared with\".",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "maximum": 50
          },
          "dueDate": {
            "description": "The goal due date in YYYY-mm-dd format.",
            "type": "string"
          },
          "completionDate": {
            "description": "The date the goal was completed.",
            "type": "number",
            "format": "float"
          }
        },
        "required": [
          "id",
          "title"
        ]
      },
      "NewGoal": {
        "title": "Add Employee Goal",
        "type": "object",
        "properties": {
          "title": {
            "description": "[Required] The goal title.",
            "type": "string",
            "maxLength": 1024
          },
          "description": {
            "description": "[Optional] The goal description.",
            "type": "string",
            "maxLength": 65535
          },
          "percentComplete": {
            "description": "[Optional] The goal completion percentage (0 - 100). If completionDate is set, this value must be 100.",
            "type": "integer"
          },
          "alignsWithOptionId": {
            "description": "[Optional] The option ID that aligns with this goal.",
            "type": "string"
          },
          "sharedWithEmployeeIds": {
            "description": "[Required] Employee IDs of employees with whom the goal is shared. All goal owners are considered \"shared with\". This must include the employee for whom the goal is created.",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "maximum": 50
          },
          "dueDate": {
            "description": "[Required] The goal due date in YYYY-mm-dd format.",
            "type": "string"
          },
          "completionDate": {
            "description": "[Optional] The date the goal was completed. If date is set, and no milestones are contained within this goal, percentComplete must be set to 100. If this goal does contain milestones, completion date cannot be set.",
            "type": "number",
            "format": "float"
          },
          "milestones": {
            "description": "[Optional] Milestones for the goal.",
            "type": "array",
            "items": {
              "title": "Goal Milestone",
              "type": "object",
              "properties": {
                "title": {
                  "description": "[Required] The title of the milestone.",
                  "type": "string"
                },
                "startValue": {
                  "description": "[Optional] Initial value of the milestone. Rounded to the nearest hundredth. If this value is set, endValue must also be set.",
                  "type": "number",
                  "format": "float"
                },
                "endValue": {
                  "description": "[Optional] End goal value for the milestone. Rounded to the nearest hundredth. If this value is set, startValue must also be set.",
                  "type": "number",
                  "format": "float"
                }
              },
              "required": [
                "title"
              ]
            }
          }
        },
        "required": [
          "title",
          "dueDate",
          "sharedWithEmployeeIds"
        ]
      },
      "UpdateGoalV1_1": {
        "title": "Update Employee Goal With Milestones",
        "type": "object",
        "properties": {
          "title": {
            "description": "[Required] The goal title.",
            "type": "string",
            "maxLength": 1024
          },
          "description": {
            "description": "[Optional] The goal description.",
            "type": "string",
            "maxLength": 65535
          },
          "alignsWithOptionId": {
            "description": "[Optional] The option ID that aligns with this goal.",
            "type": "string"
          },
          "sharedWithEmployeeIds": {
            "description": "[Required] Employee IDs of employees with whom the goal is shared. All goal owners are considered \"shared with\". This must include the employee for whom the goal is created.",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "maximum": 50
          },
          "dueDate": {
            "description": "[Required] The goal due date in YYYY-mm-dd format.",
            "type": "string"
          },
          "milestonesEnabled": {
            "description": "[Optional] A flag indicating whether or not milestones are enabled for this goal. Setting this flag to false will delete all existing milestones for this goal.",
            "type": "boolean"
          },
          "deletedMilestoneIds": {
            "description": "[Optional] Ids of all the milestones to be deleted with the update.",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "milestones": {
            "description": "[Optional] All milestones to be added to the goal with this update.",
            "type": "array",
            "items": {
              "title": "Goal Milestone",
              "type": "object",
              "properties": {
                "title": {
                  "description": "[Required] The title of the milestone.",
                  "type": "string"
                },
                "startValue": {
                  "description": "[Optional] Initial value of the milestone. Rounded to the nearest hundredth. If this value is set, endValue must also be set.",
                  "type": "number",
                  "format": "float"
                },
                "endValue": {
                  "description": "[Optional] End goal value for the milestone. Rounded to the nearest hundredth. If this value is set, startValue must also be set.",
                  "type": "number",
                  "format": "float"
                }
              },
              "required": [
                "title"
              ]
            }
          }
        },
        "required": [
          "title",
          "dueDate",
          "sharedWithEmployeeIds"
        ]
      },
      "Milestone": {
        "title": "Goal Milestone",
        "type": "object",
        "properties": {
          "title": {
            "description": "[Required] The title of the milestone.",
            "type": "string"
          },
          "startValue": {
            "description": "[Optional] Initial value of the milestone. Rounded to the nearest hundredth. If this value is set, endValue must also be set.",
            "type": "number",
            "format": "float"
          },
          "endValue": {
            "description": "[Optional] End goal value for the milestone. Rounded to the nearest hundredth. If this value is set, startValue must also be set.",
            "type": "number",
            "format": "float"
          }
        },
        "required": [
          "title"
        ]
      },
      "Location": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID of the location",
            "type": "integer"
          },
          "name": {
            "description": "Name of the location",
            "type": "string"
          },
          "description": {
            "description": "Description of the location",
            "type": "string"
          },
          "city": {
            "description": "City of the location",
            "type": "string"
          },
          "state": {
            "type": "object",
            "properties": {
              "id": {
                "description": "The ID of the state",
                "type": "integer"
              },
              "name": {
                "description": "The name of the state",
                "type": "string"
              },
              "abbrev": {
                "description": "The abbreviation of the state",
                "type": "string"
              },
              "iso_code": {
                "description": "The ISO standard code of the state",
                "type": "string"
              }
            }
          },
          "country": {
            "type": "object",
            "properties": {
              "id": {
                "description": "The ID of the country",
                "type": "integer"
              },
              "name": {
                "description": "The name of the country",
                "type": "string"
              },
              "iso_code": {
                "description": "The ISO standard code of the country",
                "type": "string"
              }
            }
          },
          "zipcode": {
            "description": "The ZIP or postal code of the location",
            "type": "string"
          },
          "addressLine1": {
            "description": "The first address line of the location",
            "type": "string"
          },
          "addressLine2": {
            "description": "The second address line of the location",
            "type": "string"
          },
          "phone": {
            "description": "The phone number of the location",
            "type": "string"
          }
        }
      },
      "State": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID of the state",
            "type": "integer"
          },
          "name": {
            "description": "The name of the state",
            "type": "string"
          },
          "abbrev": {
            "description": "The abbreviation of the state",
            "type": "string"
          },
          "iso_code": {
            "description": "The ISO standard code of the state",
            "type": "string"
          }
        }
      },
      "Country": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID of the country",
            "type": "integer"
          },
          "name": {
            "description": "The name of the country",
            "type": "string"
          },
          "iso_code": {
            "description": "The ISO standard code of the country",
            "type": "string"
          }
        }
      },
      "HiringLead": {
        "type": "object",
        "properties": {
          "employeeId": {
            "description": "The employeeId of the potential hiring lead",
            "type": "integer"
          },
          "preferredFullName": {
            "description": "The preferred full name of the potential hiring lead",
            "type": "string"
          }
        }
      },
      "TrainingType": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID of the training",
            "type": "integer"
          },
          "name": {
            "description": "Name of the training type.",
            "type": "string"
          },
          "renewable": {
            "description": "If true, training will be renewed based off of frequency.",
            "type": "boolean"
          },
          "frequency": {
            "description": "The frequency is the (optional) amount of months between renewing trainings. Not valid if training are not renewable.",
            "type": "integer"
          },
          "dueFromHireDate": {
            "description": "Number of days before the training is due for new hires. Not valid if training is not required.",
            "type": "integer"
          },
          "required": {
            "description": "Is this a required training?",
            "type": "integer"
          },
          "category": {
            "description": "The category ID and name",
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "linkUrl": {
            "description": "Optional URL that can be included with a training.",
            "type": "string"
          },
          "description": {
            "description": "Description for the training.",
            "type": "string"
          },
          "allowEmployeesToMarkComplete": {
            "description": "Allows all employees who can view the training to be able to mark it complete.",
            "type": "boolean"
          }
        }
      },
      "TrainingCategory": {
        "description": "The category ID and name",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "TrainingRecord": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID of the training record.",
            "type": "integer"
          },
          "employeeId": {
            "description": "The ID of the employee associated with the training.",
            "type": "integer"
          },
          "completed": {
            "description": "Completed is a date in the format yyyy-mm-dd.",
            "type": "string"
          },
          "notes": {
            "description": "Notes left on the training record.",
            "type": "string"
          },
          "instructor": {
            "description": "Name of the instructor.",
            "type": "string"
          },
          "credits": {
            "description": "What was credited for the training record.",
            "type": "number"
          },
          "hours": {
            "description": "Hours associated with the training record.",
            "type": "number"
          },
          "cost": {
            "description": "The currency and cost for the training record.",
            "type": "string"
          },
          "type": {
            "description": "The training type ID.",
            "type": "integer"
          }
        }
      },
      "NewWebHook": {
        "title": "Add Webhook",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the webhook.",
            "example": "My new webhook",
            "type": "string",
            "maxLength": 1024
          },
          "monitorFields": {
            "description": "A list of fields to monitor.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "firstName",
              "lastName"
            ]
          },
          "postFields": {
            "description": "A list of fields to post to the webhook url. Field ID or alias: external name",
            "type": "object",
            "additionalProperties": {
              "description": "External name to post field to",
              "type": "string"
            },
            "example": {
              "firstName": "Name",
              "lastName": "Surname",
              "dateOfBirth": "DOB"
            }
          },
          "url": {
            "description": "The url the webhook should send data to (must begin with https://).",
            "pattern": "^http://",
            "type": "string"
          },
          "format": {
            "description": "The format the webhook should use (json - default, form-encoded).",
            "enum": [
              "json",
              "form-encoded"
            ],
            "type": "string"
          },
          "frequency": {
            "description": "How often the webhook could fire.",
            "type": "object",
            "properties": {
              "hour": {
                "description": "The hour to potentially fire (0-23, null to potentially fire every hour)",
                "minimum": 0,
                "maximum": 23,
                "type": "integer"
              },
              "minute": {
                "description": "The minute to potentially fire (0-59, null to potentially fire every minute)",
                "minimum": 0,
                "maximum": 59,
                "type": "integer"
              },
              "day": {
                "description": "The day to potentially fire (1-31, null to potentially fire every day)",
                "minimum": 1,
                "maximum": 31,
                "type": "integer"
              },
              "month": {
                "description": "The month to potentially fire (1-12, null to potentially fire every month)",
                "minimum": 1,
                "maximum": 12,
                "type": "integer"
              }
            }
          },
          "limit": {
            "description": "To limit how often to potentially fire a webhook, and maximum amount of records to send",
            "type": "object",
            "properties": {
              "times": {
                "description": "The amount of records to send",
                "type": "integer"
              },
              "seconds": {
                "description": "The minimum amount of seconds between requests",
                "type": "integer"
              }
            }
          },
          "includeCompanyDomain": {
            "description": "If set to true, the company domain will be added to the header.",
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "name",
          "monitorFields",
          "postFields",
          "url"
        ]
      },
      "WebHookResponse": {
        "title": "Add Webhook Response",
        "type": "object",
        "properties": {
          "id": {
            "description": "The id of the webhook.",
            "example": "4",
            "type": "integer"
          },
          "name": {
            "description": "The name of the webhook.",
            "type": "string",
            "example": "Example Webhook",
            "maxLength": 1024
          },
          "created": {
            "description": "timestamp of creation",
            "example": "2021-09-20 22:58:01",
            "type": "string"
          },
          "lastSent": {
            "description": "timestamp of last webhook sent",
            "example": "2021-09-20 22:58:01",
            "type": "string"
          },
          "monitorFields": {
            "description": "A list of fields to monitor.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "firstName",
              "lastName"
            ]
          },
          "postFields": {
            "description": "A list of fields to post to the webhook url. Field ID or alias: external name",
            "type": "object",
            "additionalProperties": {
              "description": "External name to post field to",
              "type": "string"
            },
            "example": {
              "firstName": "Name",
              "lastName": "Surname",
              "dateOfBirth": "DOB"
            }
          },
          "url": {
            "description": "The url the webhook should send data to.",
            "example": "https://www.example.com",
            "type": "string"
          },
          "format": {
            "description": "The format the webhook should use (json, form-encoded).",
            "example": "json",
            "type": "string"
          },
          "frequency": {
            "description": "How often the webhook could fire.",
            "type": "object",
            "properties": {
              "hour": {
                "description": "The hour to potentially fire.",
                "example": 12,
                "type": "integer"
              },
              "minute": {
                "description": "The minute to potentially fire",
                "example": 56,
                "type": "integer"
              },
              "day": {
                "description": "The day to potentially fire",
                "example": 24,
                "type": "integer"
              },
              "month": {
                "example": 7,
                "description": "The month to potentially fire"
              }
            }
          },
          "limit": {
            "description": "To limit how often to potentially fire a webhook, and maximum amount of records to send",
            "type": "object",
            "properties": {
              "times": {
                "description": "The amount of records to send",
                "example": 15,
                "type": "integer"
              },
              "seconds": {
                "description": "The minimum amount of seconds between requests",
                "example": 500,
                "type": "integer"
              }
            }
          },
          "includeCompanyDomain": {
            "description": "If set to true, the company domain will be added to the header.",
            "type": "boolean",
            "example": true
          }
        }
      },
      "WebHookLogResponse": {
        "title": "Webhook Log Response",
        "type": "object",
        "properties": {
          "webhookId": {
            "description": "The id of the webhook.",
            "example": "5",
            "type": "integer"
          },
          "url": {
            "description": "The URL of the webhook.",
            "type": "string",
            "example": "https://exmaple.com"
          },
          "lastAttempted": {
            "description": "timestamp of last time the webhook was sent",
            "example": "2021-09-20 22:58:01",
            "type": "string"
          },
          "lastSuccess": {
            "description": "timestamp of last time the webhook was sent successfully",
            "example": "2021-09-20 22:58:01",
            "type": "string"
          },
          "failureCount": {
            "description": "Count of how many times this call failed since last success",
            "type": "integer",
            "example": 0
          },
          "status": {
            "description": "Status code of last request",
            "example": 200,
            "type": "integer"
          },
          "employeeIds": {
            "description": "A list of employee ids that were changed.",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          }
        }
      },
      "Webhook400Error": {
        "title": "Webhook 403 error",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        },
        "example": {
          "errors": [
            {
              "error": "Invalid request body",
              "issues": [
                "problem one",
                "problem two",
                "…"
              ]
            }
          ]
        }
      },
      "Webhook403Error": {
        "title": "Webhook 403 error",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        },
        "example": {
          "errors": [
            {
              "error": "You do not have access to webhook ID: 5"
            }
          ]
        }
      },
      "Webhook404Error": {
        "title": "Webhook 404 error",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        },
        "example": {
          "errors": [
            {
              "error": "No webhook was found with ID: 7."
            }
          ]
        }
      },
      "Webhook500Error": {
        "title": "Webhook 500 error",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        },
        "example": {
          "errors": [
            {
              "error": "Sorry for the inconvenience, please try again later or contact BambooHR."
            }
          ]
        }
      }
    }
  }
}